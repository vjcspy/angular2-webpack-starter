__meteor_runtime_config__ = {
  "meteorEnv": {},
  "DDP_DEFAULT_CONNECTION_URL": "http://cloud.dev:2005"
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var global, meteorEnv, Meteor;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/global.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    global = this; // 1
    // 2
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/client_environment.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    meteorEnv = __meteor_runtime_config__.meteorEnv; // 1
    // 2
    /**                                                                                                     // 3
     * @summary The Meteor namespace                                                                        // 4
     * @namespace Meteor                                                                                    // 5
     */ // 6
    Meteor = { // 7
      /**                                                                                                   // 8
       * @summary Boolean variable.  True if running in production environment.                             // 9
       * @locus Anywhere                                                                                    // 10
       * @static                                                                                            // 11
       * @type {Boolean}                                                                                    // 12
       */ // 13
      isProduction: meteorEnv.NODE_ENV === "production", // 14
      // 15
      /**                                                                                                   // 16
       * @summary Boolean variable.  True if running in development environment.                            // 17
       * @locus Anywhere                                                                                    // 18
       * @static                                                                                            // 19
       * @type {Boolean}                                                                                    // 20
       */ // 21
      isDevelopment: meteorEnv.NODE_ENV !== "production", // 22
      // 23
      /**                                                                                                   // 24
       * @summary Boolean variable.  True if running in client environment.                                 // 25
       * @locus Anywhere                                                                                    // 26
       * @static                                                                                            // 27
       * @type {Boolean}                                                                                    // 28
       */ // 29
      isClient: true, // 30
      // 31
      /**                                                                                                   // 32
       * @summary Boolean variable.  True if running in server environment.                                 // 33
       * @locus Anywhere                                                                                    // 34
       * @static                                                                                            // 35
       * @type {Boolean}                                                                                    // 36
       */ // 37
      isServer: false, // 38
      isCordova: false // 39
    }; // 40
    // 41
    if (typeof __meteor_runtime_config__ === 'object' && // 42
    __meteor_runtime_config__.PUBLIC_SETTINGS) {
      // 43
      /**                                                                                                   // 44
       * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
       * @locus Anywhere                                                                                    // 46
       * @type {Object}                                                                                     // 47
       */ // 48
      Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS }; // 49
    } // 50
    // 51
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/helpers.js                                                                           //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer) // 1
      var Future = Npm.require('fibers/future'); // 2
    // 3
    if (typeof __meteor_runtime_config__ === 'object' && // 4
    __meteor_runtime_config__.meteorRelease) {
      // 5
      /**                                                                                                   // 6
       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
       * @locus Anywhere                                                                                    // 8
       * @type {String}                                                                                     // 9
       */ // 10
      Meteor.release = __meteor_runtime_config__.meteorRelease; // 11
    } // 12
    // 13
    // XXX find a better home for these? Ideally they would be _.get,                                       // 14
    // _.ensure, _.delete..                                                                                 // 15
    // 16
    // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 17
    // a[b][c] doesn't exist.                                                                               // 18
    //                                                                                                      // 19
    Meteor._get = function (obj /*, arguments */) {
      // 20
      for (var i = 1; i < arguments.length; i++) {
        // 21
        if (!(arguments[i] in obj)) // 22
          return undefined; // 23
        obj = obj[arguments[i]]; // 24
      } // 25
      return obj; // 26
    }; // 27
    // 28
    // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 29
    // it is created and set to {}. Either way, it is returned.                                             // 30
    //                                                                                                      // 31
    Meteor._ensure = function (obj /*, arguments */) {
      // 32
      for (var i = 1; i < arguments.length; i++) {
        // 33
        var key = arguments[i]; // 34
        if (!(key in obj)) // 35
          obj[key] = {}; // 36
        obj = obj[key]; // 37
      } // 38
      // 39
      return obj; // 40
    }; // 41
    // 42
    // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 43
    // isn't empty, then a[b] unless it isn't empty.                                                        // 44
    //                                                                                                      // 45
    Meteor._delete = function (obj /*, arguments */) {
      // 46
      var stack = [obj]; // 47
      var leaf = true; // 48
      for (var i = 1; i < arguments.length - 1; i++) {
        // 49
        var key = arguments[i]; // 50
        if (!(key in obj)) {
          // 51
          leaf = false; // 52
          break; // 53
        } // 54
        obj = obj[key]; // 55
        if (typeof obj !== "object") // 56
          break; // 57
        stack.push(obj); // 58
      } // 59
      // 60
      for (var i = stack.length - 1; i >= 0; i--) {
        // 61
        var key = arguments[i + 1]; // 62
        // 63
        if (leaf) // 64
          leaf = false; // 65
        else // 66
          for (var other in stack[i][key]) // 67
          return; // not empty -- we're done                                                              // 68
        // 69
        delete stack[i][key]; // 70
      } // 71
    }; // 72
    // 73
    // wrapAsync can wrap any function that takes some number of arguments that                             // 74
    // can't be undefined, followed by some optional arguments, where the callback                          // 75
    // is the last optional argument.                                                                       // 76
    // e.g. fs.readFile(pathname, [callback]),                                                              // 77
    // fs.open(pathname, flags, [mode], [callback])                                                         // 78
    // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 79
    // functions where the callback is the only argument of type Function.                                  // 80
    // 81
    /**                                                                                                     // 82
     * @memberOf Meteor                                                                                     // 83
     * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
     * @locus Anywhere                                                                                      // 85
     * @param {Function} func A function that takes a callback as its final parameter                       // 86
     * @param {Object} [context] Optional `this` object against which the original function will be invoked
     */ // 88
    Meteor.wrapAsync = function (fn, context) {
      // 89
      return function () /* arguments */{
        // 90
        var self = context || this; // 91
        var newArgs = Array.prototype.slice.call(arguments); // 92
        var callback; // 93
        // 94
        for (var i = newArgs.length - 1; i >= 0; --i) {
          // 95
          var arg = newArgs[i]; // 96
          var type = typeof arg; // 97
          if (type !== "undefined") {
            // 98
            if (type === "function") {
              // 99
              callback = arg; // 100
            } // 101
            break; // 102
          } // 103
        } // 104
        // 105
        if (!callback) {
          // 106
          if (Meteor.isClient) {
            // 107
            callback = logErr; // 108
          } else {
            // 109
            var fut = new Future(); // 110
            callback = fut.resolver(); // 111
          } // 112
          ++i; // Insert the callback just after arg.                                                       // 113
        } // 114
        // 115
        newArgs[i] = Meteor.bindEnvironment(callback); // 116
        var result = fn.apply(self, newArgs); // 117
        return fut ? fut.wait() : result; // 118
      }; // 119
    }; // 120
    // 121
    // Sets child's prototype to a new object whose prototype is parent's                                   // 122
    // prototype. Used as:                                                                                  // 123
    //   Meteor._inherits(ClassB, ClassA).                                                                  // 124
    //   _.extend(ClassB.prototype, { ... })                                                                // 125
    // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 126
    var hasOwn = Object.prototype.hasOwnProperty; // 127
    Meteor._inherits = function (Child, Parent) {
      // 128
      // copy Parent static properties                                                                      // 129
      for (var key in Parent) {
        // 130
        // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131
        // properties                                                                                       // 132
        if (hasOwn.call(Parent, key)) {
          // 133
          Child[key] = Parent[key]; // 134
        } // 135
      } // 136
      // 137
      // a middle member of prototype chain: takes the prototype from the Parent                            // 138
      var Middle = function () {
        // 139
        this.constructor = Child; // 140
      }; // 141
      Middle.prototype = Parent.prototype; // 142
      Child.prototype = new Middle(); // 143
      Child.__super__ = Parent.prototype; // 144
      return Child; // 145
    }; // 146
    // 147
    var warnedAboutWrapAsync = false; // 148
    // 149
    /**                                                                                                     // 150
     * @deprecated in 0.9.3                                                                                 // 151
     */ // 152
    Meteor._wrapAsync = function (fn, context) {
      // 153
      if (!warnedAboutWrapAsync) {
        // 154
        Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync"); // 155
        warnedAboutWrapAsync = true; // 156
      } // 157
      return Meteor.wrapAsync.apply(Meteor, arguments); // 158
    }; // 159
    // 160
    function logErr(err) {
      // 161
      if (err) {
        // 162
        return Meteor._debug( // 163
        "Exception in callback of async function", // 164
        err.stack ? err.stack : err // 165
        ); // 166
      } // 167
    } // 168
    // 169
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {
    // 31
    // 32
    var global = this; // 33
    // 34
    // 35
    // IE 10, Node >= 9.1                                                                                   // 36
    // 37
    function useSetImmediate() {
      // 38
      if (!global.setImmediate) // 39
        return null; // 40
      else {
          // 41
          var setImmediate = function (fn) {
            // 42
            global.setImmediate(fn); // 43
          }; // 44
          setImmediate.implementation = 'setImmediate'; // 45
          return setImmediate; // 46
        } // 47
    } // 48
    // 49
    // 50
    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                       // 51
    // 52
    function usePostMessage() {
      // 53
      // The test against `importScripts` prevents this implementation                                      // 54
      // from being installed inside a web worker, where                                                    // 55
      // `global.postMessage` means something completely different and                                      // 56
      // can't be used for this purpose.                                                                    // 57
      // 58
      if (!global.postMessage || global.importScripts) {
        // 59
        return null; // 60
      } // 61
      // 62
      // Avoid synchronous post message implementations.                                                    // 63
      // 64
      var postMessageIsAsynchronous = true; // 65
      var oldOnMessage = global.onmessage; // 66
      global.onmessage = function () {
        // 67
        postMessageIsAsynchronous = false; // 68
      }; // 69
      global.postMessage("", "*"); // 70
      global.onmessage = oldOnMessage; // 71
      // 72
      if (!postMessageIsAsynchronous) // 73
        return null; // 74
      // 75
      var funcIndex = 0; // 76
      var funcs = {}; // 77
      // 78
      // Installs an event handler on `global` for the `message` event: see                                 // 79
      // * https://developer.mozilla.org/en/DOM/window.postMessage                                          // 80
      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages     // 81
      // 82
      // XXX use Random.id() here?                                                                          // 83
      var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.'; // 84
      // 85
      function isStringAndStartsWith(string, putativeStart) {
        // 86
        return typeof string === "string" && // 87
        string.substring(0, putativeStart.length) === putativeStart; // 88
      } // 89
      // 90
      function onGlobalMessage(event) {
        // 91
        // This will catch all incoming messages (even from other                                           // 92
        // windows!), so we need to try reasonably hard to avoid letting                                    // 93
        // anyone else trick us into firing off. We test the origin is                                      // 94
        // still this window, and that a (randomly generated)                                               // 95
        // unpredictable identifying prefix is present.                                                     // 96
        if (event.source === global && // 97
        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {
          // 98
          var index = event.data.substring(MESSAGE_PREFIX.length); // 99
          try {
            // 100
            if (funcs[index]) // 101
              funcs[index](); // 102
          } // 103
          finally {
            // 104
            delete funcs[index]; // 105
          } // 106
        } // 107
      } // 108
      // 109
      if (global.addEventListener) {
        // 110
        global.addEventListener("message", onGlobalMessage, false); // 111
      } else {
        // 112
        global.attachEvent("onmessage", onGlobalMessage); // 113
      } // 114
      // 115
      var setImmediate = function (fn) {
        // 116
        // Make `global` post a message to itself with the handle and                                       // 117
        // identifying prefix, thus asynchronously invoking our                                             // 118
        // onGlobalMessage listener above.                                                                  // 119
        ++funcIndex; // 120
        funcs[funcIndex] = fn; // 121
        global.postMessage(MESSAGE_PREFIX + funcIndex, "*"); // 122
      }; // 123
      setImmediate.implementation = 'postMessage'; // 124
      return setImmediate; // 125
    } // 126
    // 127
    // 128
    function useTimeout() {
      // 129
      var setImmediate = function (fn) {
        // 130
        global.setTimeout(fn, 0); // 131
      }; // 132
      setImmediate.implementation = 'setTimeout'; // 133
      return setImmediate; // 134
    } // 135
    // 136
    // 137
    Meteor._setImmediate = // 138
    useSetImmediate() || // 139
    usePostMessage() || // 140
    useTimeout(); // 141
    // 142
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/timers.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function withoutInvocation(f) {
      // 1
      if (Package.ddp) {
        // 2
        var DDP = Package.ddp.DDP; // 3
        var CurrentInvocation = // 4
        DDP._CurrentMethodInvocation || // 5
        // For backwards compatibility, as explained in this issue:                                       // 6
        // https://github.com/meteor/meteor/issues/8947                                                   // 7
        DDP._CurrentInvocation; // 8
        // 9
        var invocation = CurrentInvocation.get(); // 10
        if (invocation && invocation.isSimulation) {
          // 11
          throw new Error("Can't set timers inside simulations"); // 12
        } // 13
        // 14
        return function () {
          // 15
          CurrentInvocation.withValue(null, f); // 16
        }; // 17
      } else {
        // 18
        return f; // 19
      } // 20
    } // 21
    // 22
    function bindAndCatch(context, f) {
      // 23
      return Meteor.bindEnvironment(withoutInvocation(f), context); // 24
    } // 25
    // 26
    // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 27
    // inside a server method are not part of the method invocation and                                     // 28
    // should clear out the CurrentMethodInvocation environment variable.                                   // 29
    // 30
    /**                                                                                                     // 31
     * @memberOf Meteor                                                                                     // 32
     * @summary Call a function in the future after waiting for a specified delay.                          // 33
     * @locus Anywhere                                                                                      // 34
     * @param {Function} func The function to run                                                           // 35
     * @param {Number} delay Number of milliseconds to wait before calling function                         // 36
     */ // 37
    Meteor.setTimeout = function (f, duration) {
      // 38
      return setTimeout(bindAndCatch("setTimeout callback", f), duration); // 39
    }; // 40
    // 41
    /**                                                                                                     // 42
     * @memberOf Meteor                                                                                     // 43
     * @summary Call a function repeatedly, with a time delay between calls.                                // 44
     * @locus Anywhere                                                                                      // 45
     * @param {Function} func The function to run                                                           // 46
     * @param {Number} delay Number of milliseconds to wait between each function call.                     // 47
     */ // 48
    Meteor.setInterval = function (f, duration) {
      // 49
      return setInterval(bindAndCatch("setInterval callback", f), duration); // 50
    }; // 51
    // 52
    /**                                                                                                     // 53
     * @memberOf Meteor                                                                                     // 54
     * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 55
     * @locus Anywhere                                                                                      // 56
     * @param {Object} id The handle returned by `Meteor.setInterval`                                       // 57
     */ // 58
    Meteor.clearInterval = function (x) {
      // 59
      return clearInterval(x); // 60
    }; // 61
    // 62
    /**                                                                                                     // 63
     * @memberOf Meteor                                                                                     // 64
     * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 65
     * @locus Anywhere                                                                                      // 66
     * @param {Object} id The handle returned by `Meteor.setTimeout`                                        // 67
     */ // 68
    Meteor.clearTimeout = function (x) {
      // 69
      return clearTimeout(x); // 70
    }; // 71
    // 72
    // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 73
    // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 74
    //    callSomethingThatDefersSomeWork();                                                                // 75
    //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 76
    // 77
    /**                                                                                                     // 78
     * @memberOf Meteor                                                                                     // 79
     * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
     * @locus Anywhere                                                                                      // 81
     * @param {Function} func The function to run                                                           // 82
     */ // 83
    Meteor.defer = function (f) {
      // 84
      Meteor._setImmediate(bindAndCatch("defer callback", f)); // 85
    }; // 86
    // 87
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/errors.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Makes an error subclass which properly contains a stack trace in most                                // 1
    // environments. constructor can set fields on `this` (and should probably set                          // 2
    // `message`, which is what gets displayed at the top of a stack trace).                                // 3
    //                                                                                                      // 4
    Meteor.makeErrorType = function (name, constructor) {
      // 5
      var errorClass = function () /*arguments*/{
        // 6
        // Ensure we get a proper stack trace in most Javascript environments                               // 7
        if (Error.captureStackTrace) {
          // 8
          // V8 environments (Chrome and Node.js)                                                           // 9
          Error.captureStackTrace(this, errorClass); // 10
        } else {
          // 11
          // Borrow the .stack property of a native Error object.                                           // 12
          this.stack = new Error().stack; // 13
        } // 14
        // Safari magically works.                                                                          // 15
        // 16
        constructor.apply(this, arguments); // 17
        // 18
        this.errorType = name; // 19
      }; // 20
      // 21
      Meteor._inherits(errorClass, Error); // 22
      // 23
      return errorClass; // 24
    }; // 25
    // 26
    // This should probably be in the livedata package, but we don't want                                   // 27
    // to require you to use the livedata package to get it. Eventually we                                  // 28
    // should probably rename it to DDP.Error and put it back in the                                        // 29
    // 'livedata' package (which we should rename to 'ddp' also.)                                           // 30
    //                                                                                                      // 31
    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                         // 32
    // containing 'error' and optionally 'reason' and 'details'.                                            // 33
    // The DDP client manually puts these into Meteor.Error objects. (We don't use                          // 34
    // EJSON.addType here because the type is determined by location in the                                 // 35
    // protocol, not text on the wire.)                                                                     // 36
    // 37
    /**                                                                                                     // 38
     * @summary This class represents a symbolic error thrown by a method.                                  // 39
     * @locus Anywhere                                                                                      // 40
     * @class                                                                                               // 41
     * @param {String} error A string code uniquely identifying this kind of error.                         // 42
     * This string should be used by callers of the method to determine the                                 // 43
     * appropriate action to take, instead of attempting to parse the reason                                // 44
     * or details fields. For example:                                                                      // 45
     *                                                                                                      // 46
     * ```                                                                                                  // 47
     * // on the server, pick a code unique to this error                                                   // 48
     * // the reason field should be a useful debug message                                                 // 49
     * throw new Meteor.Error("logged-out",                                                                 // 50
     *   "The user must be logged in to post a comment.");                                                  // 51
     *                                                                                                      // 52
     * // on the client                                                                                     // 53
     * Meteor.call("methodName", function (error) {                                                         // 54
     *   // identify the error                                                                              // 55
     *   if (error && error.error === "logged-out") {                                                       // 56
     *     // show a nice error message                                                                     // 57
     *     Session.set("errorMessage", "Please log in to post a comment.");                                 // 58
     *   }                                                                                                  // 59
     * });                                                                                                  // 60
     * ```                                                                                                  // 61
     *                                                                                                      // 62
     * For legacy reasons, some built-in Meteor functions such as `check` throw                             // 63
     * errors with a number in this field.                                                                  // 64
     *                                                                                                      // 65
     * @param {String} [reason] Optional.  A short human-readable summary of the                            // 66
     * error, like 'Not Found'.                                                                             // 67
     * @param {String} [details] Optional.  Additional information about the error,                         // 68
     * like a textual stack trace.                                                                          // 69
     */ // 70
    Meteor.Error = Meteor.makeErrorType( // 71
    "Meteor.Error", // 72
    function (error, reason, details) {
      // 73
      var self = this; // 74
      // 75
      // Newer versions of DDP use this property to signify that an error                                 // 76
      // can be sent back and reconstructed on the calling client.                                        // 77
      self.isClientSafe = true; // 78
      // 79
      // String code uniquely identifying this kind of error.                                             // 80
      self.error = error; // 81
      // 82
      // Optional: A short human-readable summary of the error. Not                                       // 83
      // intended to be shown to end users, just developers. ("Not Found",                                // 84
      // "Internal Server Error")                                                                         // 85
      self.reason = reason; // 86
      // 87
      // Optional: Additional information about the error, say for                                        // 88
      // debugging. It might be a (textual) stack trace if the server is                                  // 89
      // willing to provide one. The corresponding thing in HTTP would be                                 // 90
      // the body of a 404 or 500 response. (The difference is that we                                    // 91
      // never expect this to be shown to end users, only developers, so                                  // 92
      // it doesn't need to be pretty.)                                                                   // 93
      self.details = details; // 94
      // 95
      // This is what gets displayed at the top of a stack trace. Current                                 // 96
      // format is "[404]" (if no reason is set) or "File not found [404]"                                // 97
      if (self.reason) // 98
        self.message = self.reason + ' [' + self.error + ']'; // 99
      else // 100
        self.message = '[' + self.error + ']'; // 101
    }); // 102
    // 103
    // Meteor.Error is basically data and is sent over DDP, so you should be able to                        // 104
    // properly EJSON-clone it. This is especially important because if a                                   // 105
    // Meteor.Error is thrown through a Future, the error, reason, and details                              // 106
    // properties become non-enumerable so a standard Object clone won't preserve                           // 107
    // them and they will be lost from DDP.                                                                 // 108
    Meteor.Error.prototype.clone = function () {
      // 109
      var self = this; // 110
      return new Meteor.Error(self.error, self.reason, self.details); // 111
    }; // 112
    // 113
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/fiber_stubs_client.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This file is a partial analogue to fiber_helpers.js, which allows the client                         // 1
    // to use a queue too, and also to call noYieldsAllowed.                                                // 2
    // 3
    // The client has no ability to yield, so noYieldsAllowed is a noop.                                    // 4
    //                                                                                                      // 5
    Meteor._noYieldsAllowed = function (f) {
      // 6
      return f(); // 7
    }; // 8
    // 9
    // An even simpler queue of tasks than the fiber-enabled one.  This one just                            // 10
    // runs all the tasks when you call runTask or flush, synchronously.                                    // 11
    //                                                                                                      // 12
    Meteor._SynchronousQueue = function () {
      // 13
      var self = this; // 14
      self._tasks = []; // 15
      self._running = false; // 16
      self._runTimeout = null; // 17
    }; // 18
    // 19
    var SQp = Meteor._SynchronousQueue.prototype; // 20
    // 21
    SQp.runTask = function (task) {
      // 22
      var self = this; // 23
      if (!self.safeToRunTask()) // 24
        throw new Error("Could not synchronously run a task from a running task"); // 25
      self._tasks.push(task); // 26
      var tasks = self._tasks; // 27
      self._tasks = []; // 28
      self._running = true; // 29
      // 30
      if (self._runTimeout) {
        // 31
        // Since we're going to drain the queue, we can forget about the timeout                            // 32
        // which tries to run it.  (But if one of our tasks queues something else,                          // 33
        // the timeout will be correctly re-created.)                                                       // 34
        clearTimeout(self._runTimeout); // 35
        self._runTimeout = null; // 36
      } // 37
      // 38
      try {
        // 39
        while (tasks.length > 0) {
          // 40
          var t = tasks.shift(); // 41
          try {
            // 42
            t(); // 43
          } catch (e) {
            // 44
            if (tasks.length === 0) {
              // 45
              // this was the last task, that is, the one we're calling runTask                             // 46
              // for.                                                                                       // 47
              throw e; // 48
            } // 49
            Meteor._debug("Exception in queued task: " + (e.stack || e)); // 50
          } // 51
        } // 52
      } finally {
        // 53
        self._running = false; // 54
      } // 55
    }; // 56
    // 57
    SQp.queueTask = function (task) {
      // 58
      var self = this; // 59
      self._tasks.push(task); // 60
      // Intentionally not using Meteor.setTimeout, because it doesn't like runing                          // 61
      // in stubs for now.                                                                                  // 62
      if (!self._runTimeout) {
        // 63
        self._runTimeout = setTimeout(function () {
          // 64
          return self.flush.apply(self, arguments); // 65
        }, 0); // 66
      } // 67
    }; // 68
    // 69
    SQp.flush = function () {
      // 70
      var self = this; // 71
      self.runTask(function () {}); // 72
    }; // 73
    // 74
    SQp.drain = function () {
      // 75
      var self = this; // 76
      if (!self.safeToRunTask()) {
        // 77
        return; // 78
      } // 79
      while (self._tasks.length > 0) {
        // 80
        self.flush(); // 81
      } // 82
    }; // 83
    // 84
    SQp.safeToRunTask = function () {
      // 85
      var self = this; // 86
      return !self._running; // 87
    }; // 88
    // 89
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/startup_client.js                                                                    //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var callbackQueue = []; // 1
    var isLoadingCompleted = false; // 2
    var isReady = false; // 3
    // 4
    // Keeps track of how many events to wait for in addition to loading completing,                        // 5
    // before we're considered ready.                                                                       // 6
    var readyHoldsCount = 0; // 7
    // 8
    var holdReady = function () {
      // 9
      readyHoldsCount++; // 10
    }; // 11
    // 12
    var releaseReadyHold = function () {
      // 13
      readyHoldsCount--; // 14
      maybeReady(); // 15
    }; // 16
    // 17
    var maybeReady = function () {
      // 18
      if (isReady || !isLoadingCompleted || readyHoldsCount > 0) // 19
        return; // 20
      // 21
      isReady = true; // 22
      // 23
      // Run startup callbacks                                                                              // 24
      while (callbackQueue.length) // 25
      callbackQueue.shift()(); // 26
      // 27
      if (Meteor.isCordova) {
        // 28
        // Notify the WebAppLocalServer plugin that startup was completed successfully,                     // 29
        // so we can roll back faulty versions if this doesn't happen                                       // 30
        WebAppLocalServer.startupDidComplete(); // 31
      } // 32
    }; // 33
    // 34
    var loadingCompleted = function () {
      // 35
      if (!isLoadingCompleted) {
        // 36
        isLoadingCompleted = true; // 37
        maybeReady(); // 38
      } // 39
    }; // 40
    // 41
    if (Meteor.isCordova) {
      // 42
      holdReady(); // 43
      document.addEventListener('deviceready', releaseReadyHold, false); // 44
    } // 45
    // 46
    if (document.readyState === 'complete' || document.readyState === 'loaded') {
      // 47
      // Loading has completed,                                                                             // 48
      // but allow other scripts the opportunity to hold ready                                              // 49
      window.setTimeout(loadingCompleted); // 50
    } else {
      // Attach event listeners to wait for loading to complete                                      // 51
      if (document.addEventListener) {
        // 52
        document.addEventListener('DOMContentLoaded', loadingCompleted, false); // 53
        window.addEventListener('load', loadingCompleted, false); // 54
      } else {
        // Use IE event model for < IE9                                                              // 55
        document.attachEvent('onreadystatechange', function () {
          // 56
          if (document.readyState === "complete") {
            // 57
            loadingCompleted(); // 58
          } // 59
        }); // 60
        window.attachEvent('load', loadingCompleted); // 61
      } // 62
    } // 63
    // 64
    /**                                                                                                     // 65
     * @summary Run code when a client or a server starts.                                                  // 66
     * @locus Anywhere                                                                                      // 67
     * @param {Function} func A function to run on startup.                                                 // 68
     */ // 69
    Meteor.startup = function (callback) {
      // 70
      // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/                                    // 71
      var doScroll = !document.addEventListener && // 72
      document.documentElement.doScroll; // 73
      // 74
      if (!doScroll || window !== top) {
        // 75
        if (isReady) // 76
          callback(); // 77
        else // 78
          callbackQueue.push(callback); // 79
      } else {
        // 80
        try {
          doScroll('left');
        } // 81
        catch (error) {
          // 82
          setTimeout(function () {
            Meteor.startup(callback);
          }, 50); // 83
          return; // 84
        }; // 85
        callback(); // 86
      } // 87
    }; // 88
    // 89
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/debug.js                                                                             //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var suppress = 0; // 1
    // 2
    // replacement for console.log. This is a temporary API. We should                                      // 3
    // provide a real logging API soon (possibly just a polyfill for                                        // 4
    // console?)                                                                                            // 5
    //                                                                                                      // 6
    // NOTE: this is used on the server to print the warning about                                          // 7
    // having autopublish enabled when you probably meant to turn it                                        // 8
    // off. it's not really the proper use of something called                                              // 9
    // _debug. the intent is for this message to go to the terminal and                                     // 10
    // be very visible. if you change _debug to go someplace else, etc,                                     // 11
    // please fix the autopublish code to do something reasonable.                                          // 12
    //                                                                                                      // 13
    Meteor._debug = function () /* arguments */{
      // 14
      if (suppress) {
        // 15
        suppress--; // 16
        return; // 17
      } // 18
      if (typeof console !== 'undefined' && // 19
      typeof console.log !== 'undefined') {
        // 20
        if (arguments.length == 0) {
          // IE Companion breaks otherwise                                       // 21
          // IE10 PP4 requires at least one argument                                                        // 22
          console.log(''); // 23
        } else {
          // 24
          // IE doesn't have console.log.apply, it's not a real Object.                                     // 25
          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                // 26
          // http://patik.com/blog/complete-cross-browser-console-log/                                      // 27
          if (typeof console.log.apply === "function") {
            // 28
            // Most browsers                                                                                // 29
            // 30
            // Chrome and Safari only hyperlink URLs to source files in first argument of                   // 31
            // console.log, so try to call it with one argument if possible.                                // 32
            // Approach taken here: If all arguments are strings, join them on space.                       // 33
            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                          // 34
            var allArgumentsOfTypeString = true; // 35
            for (var i = 0; i < arguments.length; i++) // 36
            if (typeof arguments[i] !== "string") // 37
              allArgumentsOfTypeString = false; // 38
            // 39
            if (allArgumentsOfTypeString) // 40
              console.log.apply(console, [Array.prototype.join.call(arguments, " ")]); // 41
            else // 42
              console.log.apply(console, arguments); // 43
            // 44
          } else if (typeof Function.prototype.bind === "function") {
            // 45
            // IE9                                                                                          // 46
            var log = Function.prototype.bind.call(console.log, console); // 47
            log.apply(console, arguments); // 48
          } else {
            // 49
            // IE8                                                                                          // 50
            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments)); // 51
          } // 52
        } // 53
      } // 54
    }; // 55
    // 56
    // Suppress the next 'count' Meteor._debug messsages. Use this to                                       // 57
    // stop tests from spamming the console.                                                                // 58
    //                                                                                                      // 59
    Meteor._suppress_log = function (count) {
      // 60
      suppress += count; // 61
    }; // 62
    // 63
    Meteor._suppressed_log_expected = function () {
      // 64
      return suppress !== 0; // 65
    }; // 66
    // 67
    // 68
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/string_utils.js                                                                      //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like Perl's quotemeta: quotes all regexp metacharacters.                                             // 1
    // Code taken from                                                                                      // 2
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                    // 3
    Meteor._escapeRegExp = function (string) {
      // 4
      return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // 5
    }; // 6
    // 7
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/test_environment.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var TEST_METADATA_STR; // 1
    if (Meteor.isClient) {
      // 2
      TEST_METADATA_STR = meteorEnv.TEST_METADATA; // 3
    } else {
      // 4
      TEST_METADATA_STR = process.env.TEST_METADATA; // 5
    } // 6
    // 7
    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}"); // 8
    var testDriverPackageName = TEST_METADATA.driverPackage; // 9
    // 10
    // Note that if we are in test-packages mode neither of these will be set,                              // 11
    // but we will have a test driver package                                                               // 12
    Meteor.isTest = !!TEST_METADATA.isTest; // 13
    Meteor.isAppTest = !!TEST_METADATA.isAppTest; // 14
    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest; // 15
    // 16
    if (typeof testDriverPackageName === "string") {
      // 17
      Meteor.startup(function () {
        // 18
        var testDriverPackage = Package[testDriverPackageName]; // 19
        if (!testDriverPackage) {
          // 20
          throw new Error("Can't find test driver package: " + testDriverPackageName); // 21
        } // 22
        // 23
        // On the client, the test driver *must* define `runTests`                                          // 24
        if (Meteor.isClient) {
          // 25
          if (typeof testDriverPackage.runTests !== "function") {
            // 26
            throw new Error("Test driver package " + testDriverPackageName // 27
            + " missing `runTests` export"); // 28
          } // 29
          testDriverPackage.runTests(); // 30
        } else {
          // 31
          // The server can optionally define `start`                                                       // 32
          if (typeof testDriverPackage.start === "function") {
            // 33
            testDriverPackage.start(); // 34
          } // 35
        } // 36
      }); // 37
    } // 38
    // 39
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/dynamics_browser.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Simple implementation of dynamic scoping, for use in browsers                                        // 1
    // 2
    var nextSlot = 0; // 3
    var currentValues = []; // 4
    // 5
    Meteor.EnvironmentVariable = function () {
      // 6
      this.slot = nextSlot++; // 7
    }; // 8
    // 9
    var EVp = Meteor.EnvironmentVariable.prototype; // 10
    // 11
    EVp.get = function () {
      // 12
      return currentValues[this.slot]; // 13
    }; // 14
    // 15
    EVp.getOrNullIfOutsideFiber = function () {
      // 16
      return this.get(); // 17
    }; // 18
    // 19
    EVp.withValue = function (value, func) {
      // 20
      var saved = currentValues[this.slot]; // 21
      try {
        // 22
        currentValues[this.slot] = value; // 23
        var ret = func(); // 24
      } finally {
        // 25
        currentValues[this.slot] = saved; // 26
      } // 27
      return ret; // 28
    }; // 29
    // 30
    Meteor.bindEnvironment = function (func, onException, _this) {
      // 31
      // needed in order to be able to create closures inside func and                                      // 32
      // have the closed variables not change back to their original                                        // 33
      // values                                                                                             // 34
      var boundValues = currentValues.slice(); // 35
      // 36
      if (!onException || typeof onException === 'string') {
        // 37
        var description = onException || "callback of async function"; // 38
        onException = function (error) {
          // 39
          Meteor._debug( // 40
          "Exception in " + description + ":", // 41
          error && error.stack || error // 42
          ); // 43
        }; // 44
      } // 45
      // 46
      return function () /* arguments */{
        // 47
        var savedValues = currentValues; // 48
        try {
          // 49
          currentValues = boundValues; // 50
          var ret = func.apply(_this, arguments); // 51
        } catch (e) {
          // 52
          // note: callback-hook currently relies on the fact that if onException                           // 53
          // throws in the browser, the wrapped call throws.                                                // 54
          onException(e); // 55
        } finally {
          // 56
          currentValues = savedValues; // 57
        } // 58
        return ret; // 59
      }; // 60
    }; // 61
    // 62
    Meteor._nodeCodeMustBeInFiber = function () {// 63
      // no-op on browser                                                                                   // 64
    }; // 65
    // 66
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/url_common.js                                                                        //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                     // 1
     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
     * @locus Anywhere                                                                                      // 3
     * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".             // 4
     * @param {Object} [options]                                                                            // 5
     * @param {Boolean} options.secure Create an HTTPS URL.                                                 // 6
     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
     */ // 9
    Meteor.absoluteUrl = function (path, options) {
      // 10
      // path is optional                                                                                   // 11
      if (!options && typeof path === 'object') {
        // 12
        options = path; // 13
        path = undefined; // 14
      } // 15
      // merge options with defaults                                                                        // 16
      options = Object.assign({}, Meteor.absoluteUrl.defaultOptions, options || {}); // 17
      // 18
      var url = options.rootUrl; // 19
      if (!url) // 20
        throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment"); // 21
      // 22
      if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'                          // 23
        url = 'http://' + url; // we will later fix to https if options.secure is set                       // 24
      // 25
      if (!/\/$/.test(url)) // url ends with '/'                                                            // 26
        url += '/'; // 27
      // 28
      if (path) // 29
        url += path; // 30
      // 31
      // turn http to https if secure option is set, and we're not talking                                  // 32
      // to localhost.                                                                                      // 33
      if (options.secure && // 34
      /^http:/.test(url) && // url starts with 'http:'                                                  // 35
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost                                // 36
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1                                          // 37
        url = url.replace(/^http:/, 'https:'); // 38
      // 39
      if (options.replaceLocalhost) // 40
        url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1'); // 41
      // 42
      return url; // 43
    }; // 44
    // 45
    // allow later packages to override default options                                                     // 46
    Meteor.absoluteUrl.defaultOptions = {}; // 47
    if (typeof __meteor_runtime_config__ === "object" && // 48
    __meteor_runtime_config__.ROOT_URL) // 49
      Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL; // 50
    // 51
    // 52
    Meteor._relativeToSiteRootUrl = function (link) {
      // 53
      if (typeof __meteor_runtime_config__ === "object" && // 54
      link.substr(0, 1) === "/") // 55
        link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link; // 56
      return link; // 57
    }; // 58
    // 59
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.meteor = {}, {
    Meteor: Meteor,
    global: global,
    meteorEnv: meteorEnv
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['meteor-base'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['babel-compiler'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package.ecmascript = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var _exports, _;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/pre.js                                                                            //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Define an object named exports. This will cause underscore.js to put `_` as a                         // 1
    // field on it, instead of in the global namespace.  See also post.js.                                   // 2
    _exports = {}; // 3
    // 4
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/underscore.js                                                                     //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //     Underscore.js 1.5.2                                                                               // 1
    //     http://underscorejs.org                                                                           // 2
    //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                // 3
    //     Underscore may be freely distributed under the MIT license.                                       // 4
    // 5
    (function () {
      // 6
      // 7
      // Baseline setup                                                                                      // 8
      // --------------                                                                                      // 9
      // 10
      // Establish the root object, `window` in the browser, or `exports` on the server.                     // 11
      var root = this; // 12
      // 13
      // Save the previous value of the `_` variable.                                                        // 14
      var previousUnderscore = root._; // 15
      // 16
      // Establish the object that gets returned to break out of a loop iteration.                           // 17
      var breaker = {}; // 18
      // 19
      // Save bytes in the minified (but not gzipped) version:                                               // 20
      var ArrayProto = Array.prototype,
          ObjProto = Object.prototype,
          FuncProto = Function.prototype; // 21
      // 22
      // Create quick reference variables for speed access to core prototypes.                               // 23
      var // 24
      push = ArrayProto.push,
          // 25
      slice = ArrayProto.slice,
          // 26
      concat = ArrayProto.concat,
          // 27
      toString = ObjProto.toString,
          // 28
      hasOwnProperty = ObjProto.hasOwnProperty; // 29
      // 30
      // All **ECMAScript 5** native function implementations that we hope to use                            // 31
      // are declared here.                                                                                  // 32
      var // 33
      nativeForEach = ArrayProto.forEach,
          // 34
      nativeMap = ArrayProto.map,
          // 35
      nativeReduce = ArrayProto.reduce,
          // 36
      nativeReduceRight = ArrayProto.reduceRight,
          // 37
      nativeFilter = ArrayProto.filter,
          // 38
      nativeEvery = ArrayProto.every,
          // 39
      nativeSome = ArrayProto.some,
          // 40
      nativeIndexOf = ArrayProto.indexOf,
          // 41
      nativeLastIndexOf = ArrayProto.lastIndexOf,
          // 42
      nativeIsArray = Array.isArray,
          // 43
      nativeKeys = Object.keys,
          // 44
      nativeBind = FuncProto.bind; // 45
      // 46
      // Create a safe reference to the Underscore object for use below.                                     // 47
      var _ = function (obj) {
        // 48
        if (obj instanceof _) return obj; // 49
        if (!(this instanceof _)) return new _(obj); // 50
        this._wrapped = obj; // 51
      }; // 52
      // 53
      // Export the Underscore object for **Node.js**, with                                                  // 54
      // backwards-compatibility for the old `require()` API. If we're in                                    // 55
      // the browser, add `_` as a global object via a string identifier,                                    // 56
      // for Closure Compiler "advanced" mode.                                                               // 57
      if (typeof _exports !== 'undefined') {
        // 58
        if (typeof module !== 'undefined' && module.exports) {
          // 59
          _exports = module.exports = _; // 60
        } // 61
        _exports._ = _; // 62
      } else {
        // 63
        root._ = _; // 64
      } // 65
      // 66
      // Current version.                                                                                    // 67
      _.VERSION = '1.5.2'; // 68
      // 69
      // Collection Functions                                                                                // 70
      // --------------------                                                                                // 71
      // 72
      // METEOR CHANGE: Define _isArguments instead of depending on                                          // 73
      // _.isArguments which is defined using each. In looksLikeArray                                        // 74
      // (which each depends on), we then use _isArguments instead of                                        // 75
      // _.isArguments.                                                                                      // 76
      var _isArguments = function (obj) {
        // 77
        return toString.call(obj) === '[object Arguments]'; // 78
      }; // 79
      // Define a fallback version of the method in browsers (ahem, IE), where                               // 80
      // there isn't any inspectable "Arguments" type.                                                       // 81
      if (!_isArguments(arguments)) {
        // 82
        _isArguments = function (obj) {
          // 83
          return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function'); // 84
        }; // 85
      } // 86
      // 87
      // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an                         // 88
      // array. This looksLikeArray function is introduced by Meteor, and replaces                           // 89
      // all instances of `obj.length === +obj.length`.                                                      // 90
      // https://github.com/meteor/meteor/issues/594                                                         // 91
      // https://github.com/jashkenas/underscore/issues/770                                                  // 92
      var looksLikeArray = function (obj) {
        // 93
        return obj.length === +obj.length // 94
        // _.isArguments not yet necessarily defined here                                            // 95
        && (_isArguments(obj) || obj.constructor !== Object); // 96
      }; // 97
      // 98
      // The cornerstone, an `each` implementation, aka `forEach`.                                           // 99
      // Handles objects with the built-in `forEach`, arrays, and raw objects.                               // 100
      // Delegates to **ECMAScript 5**'s native `forEach` if available.                                      // 101
      var each = _.each = _.forEach = function (obj, iterator, context) {
        // 102
        if (obj == null) return; // 103
        if (nativeForEach && obj.forEach === nativeForEach) {
          // 104
          obj.forEach(iterator, context); // 105
        } else if (looksLikeArray(obj)) {
          // 106
          for (var i = 0, length = obj.length; i < length; i++) {
            // 107
            if (iterator.call(context, obj[i], i, obj) === breaker) return; // 108
          } // 109
        } else {
          // 110
          var keys = _.keys(obj); // 111
          for (var i = 0, length = keys.length; i < length; i++) {
            // 112
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return; // 113
          } // 114
        } // 115
      }; // 116
      // 117
      // Return the results of applying the iterator to each element.                                        // 118
      // Delegates to **ECMAScript 5**'s native `map` if available.                                          // 119
      _.map = _.collect = function (obj, iterator, context) {
        // 120
        var results = []; // 121
        if (obj == null) return results; // 122
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context); // 123
        each(obj, function (value, index, list) {
          // 124
          results.push(iterator.call(context, value, index, list)); // 125
        }); // 126
        return results; // 127
      }; // 128
      // 129
      var reduceError = 'Reduce of empty array with no initial value'; // 130
      // 131
      // **Reduce** builds up a single result from a list of values, aka `inject`,                           // 132
      // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.                           // 133
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        // 134
        var initial = arguments.length > 2; // 135
        if (obj == null) obj = []; // 136
        if (nativeReduce && obj.reduce === nativeReduce) {
          // 137
          if (context) iterator = _.bind(iterator, context); // 138
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator); // 139
        } // 140
        each(obj, function (value, index, list) {
          // 141
          if (!initial) {
            // 142
            memo = value; // 143
            initial = true; // 144
          } else {
            // 145
            memo = iterator.call(context, memo, value, index, list); // 146
          } // 147
        }); // 148
        if (!initial) throw new TypeError(reduceError); // 149
        return memo; // 150
      }; // 151
      // 152
      // The right-associative version of reduce, also known as `foldr`.                                     // 153
      // Delegates to **ECMAScript 5**'s native `reduceRight` if available.                                  // 154
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
        // 155
        var initial = arguments.length > 2; // 156
        if (obj == null) obj = []; // 157
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          // 158
          if (context) iterator = _.bind(iterator, context); // 159
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator); // 160
        } // 161
        var length = obj.length; // 162
        if (!looksLikeArray(obj)) {
          // 163
          var keys = _.keys(obj); // 164
          length = keys.length; // 165
        } // 166
        each(obj, function (value, index, list) {
          // 167
          index = keys ? keys[--length] : --length; // 168
          if (!initial) {
            // 169
            memo = obj[index]; // 170
            initial = true; // 171
          } else {
            // 172
            memo = iterator.call(context, memo, obj[index], index, list); // 173
          } // 174
        }); // 175
        if (!initial) throw new TypeError(reduceError); // 176
        return memo; // 177
      }; // 178
      // 179
      // Return the first value which passes a truth test. Aliased as `detect`.                              // 180
      _.find = _.detect = function (obj, iterator, context) {
        // 181
        var result; // 182
        any(obj, function (value, index, list) {
          // 183
          if (iterator.call(context, value, index, list)) {
            // 184
            result = value; // 185
            return true; // 186
          } // 187
        }); // 188
        return result; // 189
      }; // 190
      // 191
      // Return all the elements that pass a truth test.                                                     // 192
      // Delegates to **ECMAScript 5**'s native `filter` if available.                                       // 193
      // Aliased as `select`.                                                                                // 194
      _.filter = _.select = function (obj, iterator, context) {
        // 195
        var results = []; // 196
        if (obj == null) return results; // 197
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context); // 198
        each(obj, function (value, index, list) {
          // 199
          if (iterator.call(context, value, index, list)) results.push(value); // 200
        }); // 201
        return results; // 202
      }; // 203
      // 204
      // Return all the elements for which a truth test fails.                                               // 205
      _.reject = function (obj, iterator, context) {
        // 206
        return _.filter(obj, function (value, index, list) {
          // 207
          return !iterator.call(context, value, index, list); // 208
        }, context); // 209
      }; // 210
      // 211
      // Determine whether all of the elements match a truth test.                                           // 212
      // Delegates to **ECMAScript 5**'s native `every` if available.                                        // 213
      // Aliased as `all`.                                                                                   // 214
      _.every = _.all = function (obj, iterator, context) {
        // 215
        iterator || (iterator = _.identity); // 216
        var result = true; // 217
        if (obj == null) return result; // 218
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context); // 219
        each(obj, function (value, index, list) {
          // 220
          if (!(result = result && iterator.call(context, value, index, list))) return breaker; // 221
        }); // 222
        return !!result; // 223
      }; // 224
      // 225
      // Determine if at least one element in the object matches a truth test.                               // 226
      // Delegates to **ECMAScript 5**'s native `some` if available.                                         // 227
      // Aliased as `any`.                                                                                   // 228
      var any = _.some = _.any = function (obj, iterator, context) {
        // 229
        iterator || (iterator = _.identity); // 230
        var result = false; // 231
        if (obj == null) return result; // 232
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context); // 233
        each(obj, function (value, index, list) {
          // 234
          if (result || (result = iterator.call(context, value, index, list))) return breaker; // 235
        }); // 236
        return !!result; // 237
      }; // 238
      // 239
      // Determine if the array or object contains a given value (using `===`).                              // 240
      // Aliased as `include`.                                                                               // 241
      _.contains = _.include = function (obj, target) {
        // 242
        if (obj == null) return false; // 243
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1; // 244
        return any(obj, function (value) {
          // 245
          return value === target; // 246
        }); // 247
      }; // 248
      // 249
      // Invoke a method (with arguments) on every item in a collection.                                     // 250
      _.invoke = function (obj, method) {
        // 251
        var args = slice.call(arguments, 2); // 252
        var isFunc = _.isFunction(method); // 253
        return _.map(obj, function (value) {
          // 254
          return (isFunc ? method : value[method]).apply(value, args); // 255
        }); // 256
      }; // 257
      // 258
      // Convenience version of a common use case of `map`: fetching a property.                             // 259
      _.pluck = function (obj, key) {
        // 260
        return _.map(obj, function (value) {
          return value[key];
        }); // 261
      }; // 262
      // 263
      // Convenience version of a common use case of `filter`: selecting only objects                        // 264
      // containing specific `key:value` pairs.                                                              // 265
      _.where = function (obj, attrs, first) {
        // 266
        if (_.isEmpty(attrs)) return first ? void 0 : []; // 267
        return _[first ? 'find' : 'filter'](obj, function (value) {
          // 268
          for (var key in attrs) {
            // 269
            if (attrs[key] !== value[key]) return false; // 270
          } // 271
          return true; // 272
        }); // 273
      }; // 274
      // 275
      // Convenience version of a common use case of `find`: getting the first object                        // 276
      // containing specific `key:value` pairs.                                                              // 277
      _.findWhere = function (obj, attrs) {
        // 278
        return _.where(obj, attrs, true); // 279
      }; // 280
      // 281
      // Return the maximum element or (element-based computation).                                          // 282
      // Can't optimize arrays of integers longer than 65,535 elements.                                      // 283
      // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)                               // 284
      _.max = function (obj, iterator, context) {
        // 285
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          // 286
          return Math.max.apply(Math, obj); // 287
        } // 288
        if (!iterator && _.isEmpty(obj)) return -Infinity; // 289
        var result = { computed: -Infinity, value: -Infinity }; // 290
        each(obj, function (value, index, list) {
          // 291
          var computed = iterator ? iterator.call(context, value, index, list) : value; // 292
          computed > result.computed && (result = { value: value, computed: computed }); // 293
        }); // 294
        return result.value; // 295
      }; // 296
      // 297
      // Return the minimum element (or element-based computation).                                          // 298
      _.min = function (obj, iterator, context) {
        // 299
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          // 300
          return Math.min.apply(Math, obj); // 301
        } // 302
        if (!iterator && _.isEmpty(obj)) return Infinity; // 303
        var result = { computed: Infinity, value: Infinity }; // 304
        each(obj, function (value, index, list) {
          // 305
          var computed = iterator ? iterator.call(context, value, index, list) : value; // 306
          computed < result.computed && (result = { value: value, computed: computed }); // 307
        }); // 308
        return result.value; // 309
      }; // 310
      // 311
      // Shuffle an array, using the modern version of the                                                   // 312
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                          // 313
      _.shuffle = function (obj) {
        // 314
        var rand; // 315
        var index = 0; // 316
        var shuffled = []; // 317
        each(obj, function (value) {
          // 318
          rand = _.random(index++); // 319
          shuffled[index - 1] = shuffled[rand]; // 320
          shuffled[rand] = value; // 321
        }); // 322
        return shuffled; // 323
      }; // 324
      // 325
      // Sample **n** random values from an array.                                                           // 326
      // If **n** is not specified, returns a single random element from the array.                          // 327
      // The internal `guard` argument allows it to work with `map`.                                         // 328
      _.sample = function (obj, n, guard) {
        // 329
        if (arguments.length < 2 || guard) {
          // 330
          return obj[_.random(obj.length - 1)]; // 331
        } // 332
        return _.shuffle(obj).slice(0, Math.max(0, n)); // 333
      }; // 334
      // 335
      // An internal function to generate lookup iterators.                                                  // 336
      var lookupIterator = function (value) {
        // 337
        return _.isFunction(value) ? value : function (obj) {
          return obj[value];
        }; // 338
      }; // 339
      // 340
      // Sort the object's values by a criterion produced by an iterator.                                    // 341
      _.sortBy = function (obj, value, context) {
        // 342
        var iterator = lookupIterator(value); // 343
        return _.pluck(_.map(obj, function (value, index, list) {
          // 344
          return { // 345
            value: value, // 346
            index: index, // 347
            criteria: iterator.call(context, value, index, list) // 348
          }; // 349
        }).sort(function (left, right) {
          // 350
          var a = left.criteria; // 351
          var b = right.criteria; // 352
          if (a !== b) {
            // 353
            if (a > b || a === void 0) return 1; // 354
            if (a < b || b === void 0) return -1; // 355
          } // 356
          return left.index - right.index; // 357
        }), 'value'); // 358
      }; // 359
      // 360
      // An internal function used for aggregate "group by" operations.                                      // 361
      var group = function (behavior) {
        // 362
        return function (obj, value, context) {
          // 363
          var result = {}; // 364
          var iterator = value == null ? _.identity : lookupIterator(value); // 365
          each(obj, function (value, index) {
            // 366
            var key = iterator.call(context, value, index, obj); // 367
            behavior(result, key, value); // 368
          }); // 369
          return result; // 370
        }; // 371
      }; // 372
      // 373
      // Groups the object's values by a criterion. Pass either a string attribute                           // 374
      // to group by, or a function that returns the criterion.                                              // 375
      _.groupBy = group(function (result, key, value) {
        // 376
        (_.has(result, key) ? result[key] : result[key] = []).push(value); // 377
      }); // 378
      // 379
      // Indexes the object's values by a criterion, similar to `groupBy`, but for                           // 380
      // when you know that your index values will be unique.                                                // 381
      _.indexBy = group(function (result, key, value) {
        // 382
        result[key] = value; // 383
      }); // 384
      // 385
      // Counts instances of an object that group by a certain criterion. Pass                               // 386
      // either a string attribute to count by, or a function that returns the                               // 387
      // criterion.                                                                                          // 388
      _.countBy = group(function (result, key) {
        // 389
        _.has(result, key) ? result[key]++ : result[key] = 1; // 390
      }); // 391
      // 392
      // Use a comparator function to figure out the smallest index at which                                 // 393
      // an object should be inserted so as to maintain order. Uses binary search.                           // 394
      _.sortedIndex = function (array, obj, iterator, context) {
        // 395
        iterator = iterator == null ? _.identity : lookupIterator(iterator); // 396
        var value = iterator.call(context, obj); // 397
        var low = 0,
            high = array.length; // 398
        while (low < high) {
          // 399
          var mid = low + high >>> 1; // 400
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid; // 401
        } // 402
        return low; // 403
      }; // 404
      // 405
      // Safely create a real, live array from anything iterable.                                            // 406
      _.toArray = function (obj) {
        // 407
        if (!obj) return []; // 408
        if (_.isArray(obj)) return slice.call(obj); // 409
        if (looksLikeArray(obj)) return _.map(obj, _.identity); // 410
        return _.values(obj); // 411
      }; // 412
      // 413
      // Return the number of elements in an object.                                                         // 414
      _.size = function (obj) {
        // 415
        if (obj == null) return 0; // 416
        return looksLikeArray(obj) ? obj.length : _.keys(obj).length; // 417
      }; // 418
      // 419
      // Array Functions                                                                                     // 420
      // ---------------                                                                                     // 421
      // 422
      // Get the first element of an array. Passing **n** will return the first N                            // 423
      // values in the array. Aliased as `head` and `take`. The **guard** check                              // 424
      // allows it to work with `_.map`.                                                                     // 425
      _.first = _.head = _.take = function (array, n, guard) {
        // 426
        if (array == null) return void 0; // 427
        return n == null || guard ? array[0] : slice.call(array, 0, n); // 428
      }; // 429
      // 430
      // Returns everything but the last entry of the array. Especially useful on                            // 431
      // the arguments object. Passing **n** will return all the values in                                   // 432
      // the array, excluding the last N. The **guard** check allows it to work with                         // 433
      // `_.map`.                                                                                            // 434
      _.initial = function (array, n, guard) {
        // 435
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n)); // 436
      }; // 437
      // 438
      // Get the last element of an array. Passing **n** will return the last N                              // 439
      // values in the array. The **guard** check allows it to work with `_.map`.                            // 440
      _.last = function (array, n, guard) {
        // 441
        if (array == null) return void 0; // 442
        if (n == null || guard) {
          // 443
          return array[array.length - 1]; // 444
        } else {
          // 445
          return slice.call(array, Math.max(array.length - n, 0)); // 446
        } // 447
      }; // 448
      // 449
      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                  // 450
      // Especially useful on the arguments object. Passing an **n** will return                             // 451
      // the rest N values in the array. The **guard**                                                       // 452
      // check allows it to work with `_.map`.                                                               // 453
      _.rest = _.tail = _.drop = function (array, n, guard) {
        // 454
        return slice.call(array, n == null || guard ? 1 : n); // 455
      }; // 456
      // 457
      // Trim out all falsy values from an array.                                                            // 458
      _.compact = function (array) {
        // 459
        return _.filter(array, _.identity); // 460
      }; // 461
      // 462
      // Internal implementation of a recursive `flatten` function.                                          // 463
      var flatten = function (input, shallow, output) {
        // 464
        if (shallow && _.every(input, _.isArray)) {
          // 465
          return concat.apply(output, input); // 466
        } // 467
        each(input, function (value) {
          // 468
          if (_.isArray(value) || _.isArguments(value)) {
            // 469
            shallow ? push.apply(output, value) : flatten(value, shallow, output); // 470
          } else {
            // 471
            output.push(value); // 472
          } // 473
        }); // 474
        return output; // 475
      }; // 476
      // 477
      // Flatten out an array, either recursively (by default), or just one level.                           // 478
      _.flatten = function (array, shallow) {
        // 479
        return flatten(array, shallow, []); // 480
      }; // 481
      // 482
      // Return a version of the array that does not contain the specified value(s).                         // 483
      _.without = function (array) {
        // 484
        return _.difference(array, slice.call(arguments, 1)); // 485
      }; // 486
      // 487
      // Produce a duplicate-free version of the array. If the array has already                             // 488
      // been sorted, you have the option of using a faster algorithm.                                       // 489
      // Aliased as `unique`.                                                                                // 490
      _.uniq = _.unique = function (array, isSorted, iterator, context) {
        // 491
        if (_.isFunction(isSorted)) {
          // 492
          context = iterator; // 493
          iterator = isSorted; // 494
          isSorted = false; // 495
        } // 496
        var initial = iterator ? _.map(array, iterator, context) : array; // 497
        var results = []; // 498
        var seen = []; // 499
        each(initial, function (value, index) {
          // 500
          if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
            // 501
            seen.push(value); // 502
            results.push(array[index]); // 503
          } // 504
        }); // 505
        return results; // 506
      }; // 507
      // 508
      // Produce an array that contains the union: each distinct element from all of                         // 509
      // the passed-in arrays.                                                                               // 510
      _.union = function () {
        // 511
        return _.uniq(_.flatten(arguments, true)); // 512
      }; // 513
      // 514
      // Produce an array that contains every item shared between all the                                    // 515
      // passed-in arrays.                                                                                   // 516
      _.intersection = function (array) {
        // 517
        var rest = slice.call(arguments, 1); // 518
        return _.filter(_.uniq(array), function (item) {
          // 519
          return _.every(rest, function (other) {
            // 520
            return _.indexOf(other, item) >= 0; // 521
          }); // 522
        }); // 523
      }; // 524
      // 525
      // Take the difference between one array and a number of other arrays.                                 // 526
      // Only the elements present in just the first array will remain.                                      // 527
      _.difference = function (array) {
        // 528
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1)); // 529
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        }); // 530
      }; // 531
      // 532
      // Zip together multiple lists into a single array -- elements that share                              // 533
      // an index go together.                                                                               // 534
      _.zip = function () {
        // 535
        var length = _.max(_.pluck(arguments, "length").concat(0)); // 536
        var results = new Array(length); // 537
        for (var i = 0; i < length; i++) {
          // 538
          results[i] = _.pluck(arguments, '' + i); // 539
        } // 540
        return results; // 541
      }; // 542
      // 543
      // Converts lists into objects. Pass either a single array of `[key, value]`                           // 544
      // pairs, or two parallel arrays of the same length -- one of keys, and one of                         // 545
      // the corresponding values.                                                                           // 546
      _.object = function (list, values) {
        // 547
        if (list == null) return {}; // 548
        var result = {}; // 549
        for (var i = 0, length = list.length; i < length; i++) {
          // 550
          if (values) {
            // 551
            result[list[i]] = values[i]; // 552
          } else {
            // 553
            result[list[i][0]] = list[i][1]; // 554
          } // 555
        } // 556
        return result; // 557
      }; // 558
      // 559
      // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),                       // 560
      // we need this function. Return the position of the first occurrence of an                            // 561
      // item in an array, or -1 if the item is not included in the array.                                   // 562
      // Delegates to **ECMAScript 5**'s native `indexOf` if available.                                      // 563
      // If the array is large and already in sort order, pass `true`                                        // 564
      // for **isSorted** to use binary search.                                                              // 565
      _.indexOf = function (array, item, isSorted) {
        // 566
        if (array == null) return -1; // 567
        var i = 0,
            length = array.length; // 568
        if (isSorted) {
          // 569
          if (typeof isSorted == 'number') {
            // 570
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted; // 571
          } else {
            // 572
            i = _.sortedIndex(array, item); // 573
            return array[i] === item ? i : -1; // 574
          } // 575
        } // 576
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted); // 577
        for (; i < length; i++) if (array[i] === item) return i; // 578
        return -1; // 579
      }; // 580
      // 581
      // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.                                  // 582
      _.lastIndexOf = function (array, item, from) {
        // 583
        if (array == null) return -1; // 584
        var hasIndex = from != null; // 585
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          // 586
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item); // 587
        } // 588
        var i = hasIndex ? from : array.length; // 589
        while (i--) if (array[i] === item) return i; // 590
        return -1; // 591
      }; // 592
      // 593
      // Generate an integer Array containing an arithmetic progression. A port of                           // 594
      // the native Python `range()` function. See                                                           // 595
      // [the Python documentation](http://docs.python.org/library/functions.html#range).                    // 596
      _.range = function (start, stop, step) {
        // 597
        if (arguments.length <= 1) {
          // 598
          stop = start || 0; // 599
          start = 0; // 600
        } // 601
        step = arguments[2] || 1; // 602
        // 603
        var length = Math.max(Math.ceil((stop - start) / step), 0); // 604
        var idx = 0; // 605
        var range = new Array(length); // 606
        // 607
        while (idx < length) {
          // 608
          range[idx++] = start; // 609
          start += step; // 610
        } // 611
        // 612
        return range; // 613
      }; // 614
      // 615
      // Function (ahem) Functions                                                                           // 616
      // ------------------                                                                                  // 617
      // 618
      // Reusable constructor function for prototype setting.                                                // 619
      var ctor = function () {}; // 620
      // 621
      // Create a function bound to a given object (assigning `this`, and arguments,                         // 622
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                              // 623
      // available.                                                                                          // 624
      _.bind = function (func, context) {
        // 625
        var args, bound; // 626
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError(); // 628
        args = slice.call(arguments, 2); // 629
        return bound = function () {
          // 630
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments))); // 631
          ctor.prototype = func.prototype; // 632
          var self = new ctor(); // 633
          ctor.prototype = null; // 634
          var result = func.apply(self, args.concat(slice.call(arguments))); // 635
          if (Object(result) === result) return result; // 636
          return self; // 637
        }; // 638
      }; // 639
      // 640
      // Partially apply a function by creating a version that has had some of its                           // 641
      // arguments pre-filled, without changing its dynamic `this` context.                                  // 642
      _.partial = function (func) {
        // 643
        var args = slice.call(arguments, 1); // 644
        return function () {
          // 645
          return func.apply(this, args.concat(slice.call(arguments))); // 646
        }; // 647
      }; // 648
      // 649
      // Bind all of an object's methods to that object. Useful for ensuring that                            // 650
      // all callbacks defined on an object belong to it.                                                    // 651
      _.bindAll = function (obj) {
        // 652
        var funcs = slice.call(arguments, 1); // 653
        if (funcs.length === 0) throw new Error("bindAll must be passed function names"); // 654
        each(funcs, function (f) {
          obj[f] = _.bind(obj[f], obj);
        }); // 655
        return obj; // 656
      }; // 657
      // 658
      // Memoize an expensive function by storing its results.                                               // 659
      _.memoize = function (func, hasher) {
        // 660
        var memo = {}; // 661
        hasher || (hasher = _.identity); // 662
        return function () {
          // 663
          var key = hasher.apply(this, arguments); // 664
          return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments); // 665
        }; // 666
      }; // 667
      // 668
      // Delays a function for the given number of milliseconds, and then calls                              // 669
      // it with the arguments supplied.                                                                     // 670
      _.delay = function (func, wait) {
        // 671
        var args = slice.call(arguments, 2); // 672
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait); // 673
      }; // 674
      // 675
      // Defers a function, scheduling it to run after the current call stack has                            // 676
      // cleared.                                                                                            // 677
      _.defer = function (func) {
        // 678
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1))); // 679
      }; // 680
      // 681
      // Returns a function, that, when invoked, will only be triggered at most once                         // 682
      // during a given window of time. Normally, the throttled function will run                            // 683
      // as much as it can, without ever going more than once per `wait` duration;                           // 684
      // but if you'd like to disable the execution on the leading edge, pass                                // 685
      // `{leading: false}`. To disable execution on the trailing edge, ditto.                               // 686
      _.throttle = function (func, wait, options) {
        // 687
        var context, args, result; // 688
        var timeout = null; // 689
        var previous = 0; // 690
        options || (options = {}); // 691
        var later = function () {
          // 692
          previous = options.leading === false ? 0 : new Date(); // 693
          timeout = null; // 694
          result = func.apply(context, args); // 695
        }; // 696
        return function () {
          // 697
          var now = new Date(); // 698
          if (!previous && options.leading === false) previous = now; // 699
          var remaining = wait - (now - previous); // 700
          context = this; // 701
          args = arguments; // 702
          if (remaining <= 0) {
            // 703
            clearTimeout(timeout); // 704
            timeout = null; // 705
            previous = now; // 706
            result = func.apply(context, args); // 707
          } else if (!timeout && options.trailing !== false) {
            // 708
            timeout = setTimeout(later, remaining); // 709
          } // 710
          return result; // 711
        }; // 712
      }; // 713
      // 714
      // Returns a function, that, as long as it continues to be invoked, will not                           // 715
      // be triggered. The function will be called after it stops being called for                           // 716
      // N milliseconds. If `immediate` is passed, trigger the function on the                               // 717
      // leading edge, instead of the trailing.                                                              // 718
      _.debounce = function (func, wait, immediate) {
        // 719
        var timeout, args, context, timestamp, result; // 720
        return function () {
          // 721
          context = this; // 722
          args = arguments; // 723
          timestamp = new Date(); // 724
          var later = function () {
            // 725
            var last = new Date() - timestamp; // 726
            if (last < wait) {
              // 727
              timeout = setTimeout(later, wait - last); // 728
            } else {
              // 729
              timeout = null; // 730
              if (!immediate) result = func.apply(context, args); // 731
            } // 732
          }; // 733
          var callNow = immediate && !timeout; // 734
          if (!timeout) {
            // 735
            timeout = setTimeout(later, wait); // 736
          } // 737
          if (callNow) result = func.apply(context, args); // 738
          return result; // 739
        }; // 740
      }; // 741
      // 742
      // Returns a function that will be executed at most one time, no matter how                            // 743
      // often you call it. Useful for lazy initialization.                                                  // 744
      _.once = function (func) {
        // 745
        var ran = false,
            memo; // 746
        return function () {
          // 747
          if (ran) return memo; // 748
          ran = true; // 749
          memo = func.apply(this, arguments); // 750
          func = null; // 751
          return memo; // 752
        }; // 753
      }; // 754
      // 755
      // Returns the first function passed as an argument to the second,                                     // 756
      // allowing you to adjust arguments, run code before and after, and                                    // 757
      // conditionally execute the original function.                                                        // 758
      _.wrap = function (func, wrapper) {
        // 759
        return function () {
          // 760
          var args = [func]; // 761
          push.apply(args, arguments); // 762
          return wrapper.apply(this, args); // 763
        }; // 764
      }; // 765
      // 766
      // Returns a function that is the composition of a list of functions, each                             // 767
      // consuming the return value of the function that follows.                                            // 768
      _.compose = function () {
        // 769
        var funcs = arguments; // 770
        return function () {
          // 771
          var args = arguments; // 772
          for (var i = funcs.length - 1; i >= 0; i--) {
            // 773
            args = [funcs[i].apply(this, args)]; // 774
          } // 775
          return args[0]; // 776
        }; // 777
      }; // 778
      // 779
      // Returns a function that will only be executed after being called N times.                           // 780
      _.after = function (times, func) {
        // 781
        return function () {
          // 782
          if (--times < 1) {
            // 783
            return func.apply(this, arguments); // 784
          } // 785
        }; // 786
      }; // 787
      // 788
      // Object Functions                                                                                    // 789
      // ----------------                                                                                    // 790
      // 791
      // Retrieve the names of an object's properties.                                                       // 792
      // Delegates to **ECMAScript 5**'s native `Object.keys`                                                // 793
      _.keys = nativeKeys || function (obj) {
        // 794
        if (obj !== Object(obj)) throw new TypeError('Invalid object'); // 795
        var keys = []; // 796
        for (var key in obj) if (_.has(obj, key)) keys.push(key); // 797
        return keys; // 798
      }; // 799
      // 800
      // Retrieve the values of an object's properties.                                                      // 801
      _.values = function (obj) {
        // 802
        var keys = _.keys(obj); // 803
        var length = keys.length; // 804
        var values = new Array(length); // 805
        for (var i = 0; i < length; i++) {
          // 806
          values[i] = obj[keys[i]]; // 807
        } // 808
        return values; // 809
      }; // 810
      // 811
      // Convert an object into a list of `[key, value]` pairs.                                              // 812
      _.pairs = function (obj) {
        // 813
        var keys = _.keys(obj); // 814
        var length = keys.length; // 815
        var pairs = new Array(length); // 816
        for (var i = 0; i < length; i++) {
          // 817
          pairs[i] = [keys[i], obj[keys[i]]]; // 818
        } // 819
        return pairs; // 820
      }; // 821
      // 822
      // Invert the keys and values of an object. The values must be serializable.                           // 823
      _.invert = function (obj) {
        // 824
        var result = {}; // 825
        var keys = _.keys(obj); // 826
        for (var i = 0, length = keys.length; i < length; i++) {
          // 827
          result[obj[keys[i]]] = keys[i]; // 828
        } // 829
        return result; // 830
      }; // 831
      // 832
      // Return a sorted list of the function names available on the object.                                 // 833
      // Aliased as `methods`                                                                                // 834
      _.functions = _.methods = function (obj) {
        // 835
        var names = []; // 836
        for (var key in obj) {
          // 837
          if (_.isFunction(obj[key])) names.push(key); // 838
        } // 839
        return names.sort(); // 840
      }; // 841
      // 842
      // Extend a given object with all the properties in passed-in object(s).                               // 843
      _.extend = function (obj) {
        // 844
        each(slice.call(arguments, 1), function (source) {
          // 845
          if (source) {
            // 846
            for (var prop in source) {
              // 847
              obj[prop] = source[prop]; // 848
            } // 849
          } // 850
        }); // 851
        return obj; // 852
      }; // 853
      // 854
      // Return a copy of the object only containing the whitelisted properties.                             // 855
      _.pick = function (obj) {
        // 856
        var copy = {}; // 857
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1)); // 858
        each(keys, function (key) {
          // 859
          if (key in obj) copy[key] = obj[key]; // 860
        }); // 861
        return copy; // 862
      }; // 863
      // 864
      // Return a copy of the object without the blacklisted properties.                                    // 865
      _.omit = function (obj) {
        // 866
        var copy = {}; // 867
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1)); // 868
        for (var key in obj) {
          // 869
          if (!_.contains(keys, key)) copy[key] = obj[key]; // 870
        } // 871
        return copy; // 872
      }; // 873
      // 874
      // Fill in a given object with default properties.                                                     // 875
      _.defaults = function (obj) {
        // 876
        each(slice.call(arguments, 1), function (source) {
          // 877
          if (source) {
            // 878
            for (var prop in source) {
              // 879
              if (obj[prop] === void 0) obj[prop] = source[prop]; // 880
            } // 881
          } // 882
        }); // 883
        return obj; // 884
      }; // 885
      // 886
      // Create a (shallow-cloned) duplicate of an object.                                                   // 887
      _.clone = function (obj) {
        // 888
        if (!_.isObject(obj)) return obj; // 889
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj); // 890
      }; // 891
      // 892
      // Invokes interceptor with the obj, and then returns obj.                                             // 893
      // The primary purpose of this method is to "tap into" a method chain, in                              // 894
      // order to perform operations on intermediate results within the chain.                               // 895
      _.tap = function (obj, interceptor) {
        // 896
        interceptor(obj); // 897
        return obj; // 898
      }; // 899
      // 900
      // Internal recursive comparison function for `isEqual`.                                               // 901
      var eq = function (a, b, aStack, bStack) {
        // 902
        // Identical objects are equal. `0 === -0`, but they aren't identical.                               // 903
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).           // 904
        if (a === b) return a !== 0 || 1 / a == 1 / b; // 905
        // A strict comparison is necessary because `null == undefined`.                                     // 906
        if (a == null || b == null) return a === b; // 907
        // Unwrap any wrapped objects.                                                                       // 908
        if (a instanceof _) a = a._wrapped; // 909
        if (b instanceof _) b = b._wrapped; // 910
        // Compare `[[Class]]` names.                                                                        // 911
        var className = toString.call(a); // 912
        if (className != toString.call(b)) return false; // 913
        switch (className) {// 914
          // Strings, numbers, dates, and booleans are compared by value.                                    // 915
          case '[object String]':
            // 916
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is             // 917
            // equivalent to `new String("5")`.                                                              // 918
            return a == String(b); // 919
          case '[object Number]':
            // 920
            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for               // 921
            // other numeric values.                                                                         // 922
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b; // 923
          case '[object Date]': // 924
          case '[object Boolean]':
            // 925
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their            // 926
            // millisecond representations. Note that invalid dates with millisecond representations         // 927
            // of `NaN` are not equivalent.                                                                  // 928
            return +a == +b; // 929
          // RegExps are compared by their source patterns and flags.                                        // 930
          case '[object RegExp]':
            // 931
            return a.source == b.source && // 932
            a.global == b.global && // 933
            a.multiline == b.multiline && // 934
            a.ignoreCase == b.ignoreCase; // 935
        } // 936
        if (typeof a != 'object' || typeof b != 'object') return false; // 937
        // Assume equality for cyclic structures. The algorithm for detecting cyclic                         // 938
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                       // 939
        var length = aStack.length; // 940
        while (length--) {
          // 941
          // Linear search. Performance is inversely proportional to the number of                           // 942
          // unique nested structures.                                                                       // 943
          if (aStack[length] == a) return bStack[length] == b; // 944
        } // 945
        // Objects with different constructors are not equivalent, but `Object`s                             // 946
        // from different frames are.                                                                        // 947
        var aCtor = a.constructor,
            bCtor = b.constructor; // 948
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && // 949
        _.isFunction(bCtor) && bCtor instanceof bCtor)) {
          // 950
          return false; // 951
        } // 952
        // Add the first object to the stack of traversed objects.                                           // 953
        aStack.push(a); // 954
        bStack.push(b); // 955
        var size = 0,
            result = true; // 956
        // Recursively compare objects and arrays.                                                           // 957
        if (className == '[object Array]') {
          // 958
          // Compare array lengths to determine if a deep comparison is necessary.                           // 959
          size = a.length; // 960
          result = size == b.length; // 961
          if (result) {
            // 962
            // Deep compare the contents, ignoring non-numeric properties.                                   // 963
            while (size--) {
              // 964
              if (!(result = eq(a[size], b[size], aStack, bStack))) break; // 965
            } // 966
          } // 967
        } else {
          // 968
          // Deep compare objects.                                                                           // 969
          for (var key in a) {
            // 970
            if (_.has(a, key)) {
              // 971
              // Count the expected number of properties.                                                    // 972
              size++; // 973
              // Deep compare each member.                                                                   // 974
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break; // 975
            } // 976
          } // 977
          // Ensure that both objects contain the same number of properties.                                 // 978
          if (result) {
            // 979
            for (key in b) {
              // 980
              if (_.has(b, key) && !size--) break; // 981
            } // 982
            result = !size; // 983
          } // 984
        } // 985
        // Remove the first object from the stack of traversed objects.                                      // 986
        aStack.pop(); // 987
        bStack.pop(); // 988
        return result; // 989
      }; // 990
      // 991
      // Perform a deep comparison to check if two objects are equal.                                        // 992
      _.isEqual = function (a, b) {
        // 993
        return eq(a, b, [], []); // 994
      }; // 995
      // 996
      // Is a given array, string, or object empty?                                                          // 997
      // An "empty" object has no enumerable own-properties.                                                 // 998
      _.isEmpty = function (obj) {
        // 999
        if (obj == null) return true; // 1000
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0; // 1001
        for (var key in obj) if (_.has(obj, key)) return false; // 1002
        return true; // 1003
      }; // 1004
      // 1005
      // Is a given value a DOM element?                                                                     // 1006
      _.isElement = function (obj) {
        // 1007
        return !!(obj && obj.nodeType === 1); // 1008
      }; // 1009
      // 1010
      // Is a given value an array?                                                                          // 1011
      // Delegates to ECMA5's native Array.isArray                                                           // 1012
      _.isArray = nativeIsArray || function (obj) {
        // 1013
        return toString.call(obj) == '[object Array]'; // 1014
      }; // 1015
      // 1016
      // Is a given variable an object?                                                                      // 1017
      _.isObject = function (obj) {
        // 1018
        return obj === Object(obj); // 1019
      }; // 1020
      // 1021
      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.             // 1022
      each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {
        // 1023
        _['is' + name] = function (obj) {
          // 1024
          return toString.call(obj) == '[object ' + name + ']'; // 1025
        }; // 1026
      }); // 1027
      // 1028
      // Define a fallback version of the method in browsers (ahem, IE), where                               // 1029
      // there isn't any inspectable "Arguments" type.                                                       // 1030
      if (!_.isArguments(arguments)) {
        // 1031
        _.isArguments = function (obj) {
          // 1032
          return !!(obj && _.has(obj, 'callee')); // 1033
        }; // 1034
      } // 1035
      // 1036
      // Optimize `isFunction` if appropriate.                                                               // 1037
      if (typeof /./ !== 'function') {
        // 1038
        _.isFunction = function (obj) {
          // 1039
          return typeof obj === 'function'; // 1040
        }; // 1041
      } // 1042
      // 1043
      // Is a given object a finite number?                                                                  // 1044
      _.isFinite = function (obj) {
        // 1045
        return isFinite(obj) && !isNaN(parseFloat(obj)); // 1046
      }; // 1047
      // 1048
      // Is the given value `NaN`? (NaN is the only number which does not equal itself).                     // 1049
      _.isNaN = function (obj) {
        // 1050
        return _.isNumber(obj) && obj != +obj; // 1051
      }; // 1052
      // 1053
      // Is a given value a boolean?                                                                         // 1054
      _.isBoolean = function (obj) {
        // 1055
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]'; // 1056
      }; // 1057
      // 1058
      // Is a given value equal to null?                                                                     // 1059
      _.isNull = function (obj) {
        // 1060
        return obj === null; // 1061
      }; // 1062
      // 1063
      // Is a given variable undefined?                                                                      // 1064
      _.isUndefined = function (obj) {
        // 1065
        return obj === void 0; // 1066
      }; // 1067
      // 1068
      // Shortcut function for checking if an object has a given property directly                           // 1069
      // on itself (in other words, not on a prototype).                                                     // 1070
      _.has = function (obj, key) {
        // 1071
        return hasOwnProperty.call(obj, key); // 1072
      }; // 1073
      // 1074
      // Utility Functions                                                                                   // 1075
      // -----------------                                                                                   // 1076
      // 1077
      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                           // 1078
      // previous owner. Returns a reference to the Underscore object.                                       // 1079
      _.noConflict = function () {
        // 1080
        root._ = previousUnderscore; // 1081
        return this; // 1082
      }; // 1083
      // 1084
      // Keep the identity function around for default iterators.                                            // 1085
      _.identity = function (value) {
        // 1086
        return value; // 1087
      }; // 1088
      // 1089
      // Run a function **n** times.                                                                         // 1090
      _.times = function (n, iterator, context) {
        // 1091
        var accum = Array(Math.max(0, n)); // 1092
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i); // 1093
        return accum; // 1094
      }; // 1095
      // 1096
      // Return a random integer between min and max (inclusive).                                            // 1097
      _.random = function (min, max) {
        // 1098
        if (max == null) {
          // 1099
          max = min; // 1100
          min = 0; // 1101
        } // 1102
        return min + Math.floor(Math.random() * (max - min + 1)); // 1103
      }; // 1104
      // 1105
      // List of HTML entities for escaping.                                                                 // 1106
      var entityMap = { // 1107
        escape: { // 1108
          '&': '&amp;', // 1109
          '<': '&lt;', // 1110
          '>': '&gt;', // 1111
          '"': '&quot;', // 1112
          "'": '&#x27;' // 1113
          // 1114
        } }; // 1115
      entityMap.unescape = _.invert(entityMap.escape); // 1116
      // 1117
      // Regexes containing the keys and values listed immediately above.                                    // 1118
      var entityRegexes = { // 1119
        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'), // 1120
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g') // 1121
      }; // 1122
      // 1123
      // Functions for escaping and unescaping strings to/from HTML interpolation.                           // 1124
      _.each(['escape', 'unescape'], function (method) {
        // 1125
        _[method] = function (string) {
          // 1126
          if (string == null) return ''; // 1127
          return ('' + string).replace(entityRegexes[method], function (match) {
            // 1128
            return entityMap[method][match]; // 1129
          }); // 1130
        }; // 1131
      }); // 1132
      // 1133
      // If the value of the named `property` is a function then invoke it with the                          // 1134
      // `object` as context; otherwise, return it.                                                          // 1135
      _.result = function (object, property) {
        // 1136
        if (object == null) return void 0; // 1137
        var value = object[property]; // 1138
        return _.isFunction(value) ? value.call(object) : value; // 1139
      }; // 1140
      // 1141
      // Add your own custom functions to the Underscore object.                                             // 1142
      _.mixin = function (obj) {
        // 1143
        each(_.functions(obj), function (name) {
          // 1144
          var func = _[name] = obj[name]; // 1145
          _.prototype[name] = function () {
            // 1146
            var args = [this._wrapped]; // 1147
            push.apply(args, arguments); // 1148
            return result.call(this, func.apply(_, args)); // 1149
          }; // 1150
        }); // 1151
      }; // 1152
      // 1153
      // Generate a unique integer id (unique within the entire client session).                             // 1154
      // Useful for temporary DOM ids.                                                                       // 1155
      var idCounter = 0; // 1156
      _.uniqueId = function (prefix) {
        // 1157
        var id = ++idCounter + ''; // 1158
        return prefix ? prefix + id : id; // 1159
      }; // 1160
      // 1161
      // By default, Underscore uses ERB-style template delimiters, change the                               // 1162
      // following template settings to use alternative delimiters.                                          // 1163
      _.templateSettings = { // 1164
        evaluate: /<%([\s\S]+?)%>/g, // 1165
        interpolate: /<%=([\s\S]+?)%>/g, // 1166
        escape: /<%-([\s\S]+?)%>/g // 1167
      }; // 1168
      // 1169
      // When customizing `templateSettings`, if you don't want to define an                                 // 1170
      // interpolation, evaluation or escaping regex, we need one that is                                    // 1171
      // guaranteed not to match.                                                                            // 1172
      var noMatch = /(.)^/; // 1173
      // 1174
      // Certain characters need to be escaped so that they can be put into a                                // 1175
      // string literal.                                                                                     // 1176
      var escapes = { // 1177
        "'": "'", // 1178
        '\\': '\\', // 1179
        '\r': 'r', // 1180
        '\n': 'n', // 1181
        '\t': 't', // 1182
        '\u2028': 'u2028', // 1183
        '\u2029': 'u2029' // 1184
      }; // 1185
      // 1186
      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g; // 1187
      // 1188
      // JavaScript micro-templating, similar to John Resig's implementation.                                // 1189
      // Underscore templating handles arbitrary delimiters, preserves whitespace,                           // 1190
      // and correctly escapes quotes within interpolated code.                                              // 1191
      _.template = function (text, data, settings) {
        // 1192
        var render; // 1193
        settings = _.defaults({}, settings, _.templateSettings); // 1194
        // 1195
        // Combine delimiters into one regular expression via alternation.                                   // 1196
        var matcher = new RegExp([// 1197
        (settings.escape || noMatch).source, // 1198
        (settings.interpolate || noMatch).source, // 1199
        (settings.evaluate || noMatch).source // 1200
        ].join('|') + '|$', 'g'); // 1201
        // 1202
        // Compile the template source, escaping string literals appropriately.                              // 1203
        var index = 0; // 1204
        var source = "__p+='"; // 1205
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          // 1206
          source += text.slice(index, offset) // 1207
          .replace(escaper, function (match) {
            return '\\' + escapes[match];
          }); // 1208
          // 1209
          if (escape) {
            // 1210
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"; // 1211
          } // 1212
          if (interpolate) {
            // 1213
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"; // 1214
          } // 1215
          if (evaluate) {
            // 1216
            source += "';\n" + evaluate + "\n__p+='"; // 1217
          } // 1218
          index = offset + match.length; // 1219
          return match; // 1220
        }); // 1221
        source += "';\n"; // 1222
        // 1223
        // If a variable is not specified, place data values in local scope.                                 // 1224
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n'; // 1225
        // 1226
        source = "var __t,__p='',__j=Array.prototype.join," + // 1227
        "print=function(){__p+=__j.call(arguments,'');};\n" + // 1228
        source + "return __p;\n"; // 1229
        // 1230
        try {
          // 1231
          render = new Function(settings.variable || 'obj', '_', source); // 1232
        } catch (e) {
          // 1233
          e.source = source; // 1234
          throw e; // 1235
        } // 1236
        // 1237
        if (data) return render(data, _); // 1238
        var template = function (data) {
          // 1239
          return render.call(this, data, _); // 1240
        }; // 1241
        // 1242
        // Provide the compiled function source as a convenience for precompilation.                         // 1243
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}'; // 1244
        // 1245
        return template; // 1246
      }; // 1247
      // 1248
      // Add a "chain" function, which will delegate to the wrapper.                                         // 1249
      _.chain = function (obj) {
        // 1250
        return _(obj).chain(); // 1251
      }; // 1252
      // 1253
      // OOP                                                                                                 // 1254
      // ---------------                                                                                     // 1255
      // If Underscore is called as a function, it returns a wrapped object that                             // 1256
      // can be used OO-style. This wrapper holds altered versions of all the                                // 1257
      // underscore functions. Wrapped objects may be chained.                                               // 1258
      // 1259
      // Helper function to continue chaining intermediate results.                                          // 1260
      var result = function (obj) {
        // 1261
        return this._chain ? _(obj).chain() : obj; // 1262
      }; // 1263
      // 1264
      // Add all of the Underscore functions to the wrapper object.                                          // 1265
      _.mixin(_); // 1266
      // 1267
      // Add all mutator Array functions to the wrapper.                                                     // 1268
      each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
        // 1269
        var method = ArrayProto[name]; // 1270
        _.prototype[name] = function () {
          // 1271
          var obj = this._wrapped; // 1272
          method.apply(obj, arguments); // 1273
          if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0]; // 1274
          return result.call(this, obj); // 1275
        }; // 1276
      }); // 1277
      // 1278
      // Add all accessor Array functions to the wrapper.                                                    // 1279
      each(['concat', 'join', 'slice'], function (name) {
        // 1280
        var method = ArrayProto[name]; // 1281
        _.prototype[name] = function () {
          // 1282
          return result.call(this, method.apply(this._wrapped, arguments)); // 1283
        }; // 1284
      }); // 1285
      // 1286
      _.extend(_.prototype, { // 1287
        // 1288
        // Start chaining a wrapped Underscore object.                                                       // 1289
        chain: function () {
          // 1290
          this._chain = true; // 1291
          return this; // 1292
        }, // 1293
        // 1294
        // Extracts the result from a wrapped and chained object.                                            // 1295
        value: function () {
          // 1296
          return this._wrapped; // 1297
        } // 1298
        // 1299
      }); // 1300
      // 1301
    }).call(this); // 1302
    // 1303
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/post.js                                                                           //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This exports object was created in pre.js.  Now copy the `_` object from it                           // 1
    // into the package-scope variable `_`, which will get exported.                                         // 2
    _ = _exports._; // 3
    // 4
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.underscore = {}, {
    _: _
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var makeInstaller, makeInstallerOptions, meteorInstall;

  ///////////////////////////////////////////////////////////////////////////////
  //                                                                           //
  // packages/modules-runtime/.npm/package/node_modules/install/install.js     //
  // This file is in bare mode and is not in its own closure.                  //
  //                                                                           //
  ///////////////////////////////////////////////////////////////////////////////
  //
  makeInstaller = function (options) {
    // 2
    // 3
    options = options || {}; // 4
    // 5
    // These file extensions will be appended to required module identifiers   // 6
    // if they do not exactly match an installed module.                       // 7
    var defaultExtensions = options.extensions || [".js", ".json"]; // 8
    // 9
    // If defined, the options.onInstall function will be called any time      // 10
    // new modules are installed.                                              // 11
    var onInstall = options.onInstall; // 12
    // 13
    // If defined, each module-specific require function will be passed to     // 14
    // this function, along with the module object of the parent module, and   // 15
    // the result will be used in place of the original require function.      // 16
    var wrapRequire = options.wrapRequire; // 17
    // 18
    // If defined, the options.override function will be called before         // 19
    // looking up any top-level package identifiers in node_modules            // 20
    // directories. It can either return a string to provide an alternate      // 21
    // package identifier, or a non-string value to prevent the lookup from    // 22
    // proceeding.                                                             // 23
    var override = options.override; // 24
    // 25
    // If defined, the options.fallback function will be called when no        // 26
    // installed module is found for a required module identifier. Often       // 27
    // options.fallback will be implemented in terms of the native Node        // 28
    // require function, which has the ability to load binary modules.         // 29
    var fallback = options.fallback; // 30
    // 31
    // List of fields to look for in package.json files to determine the       // 32
    // main entry module of the package. The first field listed here whose     // 33
    // value is a string will be used to resolve the entry module.             // 34
    var mainFields = options.mainFields || ( // 35
    // If options.mainFields is absent and options.browser is truthy,        // 36
    // package resolution will prefer the "browser" field of package.json    // 37
    // files to the "main" field. Note that this only supports               // 38
    // string-valued "browser" fields for now, though in the future it       // 39
    // might make sense to support the object version, a la browserify.      // 40
    options.browser ? ["browser", "main"] : ["main"]); // 41
    // 42
    // Called below as hasOwn.call(obj, key).                                  // 43
    var hasOwn = {}.hasOwnProperty; // 44
    // 45
    // Cache for looking up File objects given absolute module identifiers.    // 46
    // Invariants:                                                             // 47
    //   filesByModuleId[module.id] === fileAppendId(root, module.id)          // 48
    //   filesByModuleId[module.id].module === module                          // 49
    var filesByModuleId = {}; // 50
    // 51
    // The file object representing the root directory of the installed        // 52
    // module tree.                                                            // 53
    var root = new File("/", new File("/..")); // 54
    var rootRequire = makeRequire(root); // 55
    // 56
    // Merges the given tree of directories and module factory functions       // 57
    // into the tree of installed modules and returns a require function       // 58
    // that behaves as if called from a module in the root directory.          // 59
    function install(tree, options) {
      // 60
      if (isObject(tree)) {
        // 61
        fileMergeContents(root, tree, options); // 62
        if (isFunction(onInstall)) {
          // 63
          onInstall(rootRequire); // 64
        } // 65
      } // 66
      return rootRequire; // 67
    } // 68
    // 69
    // Replace this function to enable Module.prototype.prefetch.              // 70
    install.fetch = function (ids) {
      // 71
      throw new Error("fetch not implemented"); // 72
    }; // 73
    // 74
    // This constructor will be used to instantiate the module objects         // 75
    // passed to module factory functions (i.e. the third argument after       // 76
    // require and exports), and is exposed as install.Module in case the      // 77
    // caller of makeInstaller wishes to modify Module.prototype.              // 78
    function Module(id) {
      // 79
      this.id = id; // 80
      // 81
      // The Node implementation of module.children unfortunately includes     // 82
      // only those child modules that were imported for the first time by     // 83
      // this parent module (i.e., child.parent === this).                     // 84
      this.children = []; // 85
      // 86
      // This object is an install.js extension that includes all child        // 87
      // modules imported by this module, even if this module is not the       // 88
      // first to import them.                                                 // 89
      this.childrenById = {}; // 90
    } // 91
    // 92
    Module.prototype.resolve = function (id) {
      // 93
      return this.require.resolve(id); // 94
    }; // 95
    // 96
    var resolvedPromise; // 97
    var lastPrefetchPromise; // 98
    // 99
    Module.prototype.prefetch = function (id) {
      // 100
      var _module = this; // 101
      var parentFile = getOwn(filesByModuleId, _module.id); // 102
      var missing; // Initialized to {} only if necessary.                     // 103
      // 104
      resolvedPromise = resolvedPromise || Promise.resolve(); // 105
      lastPrefetchPromise = lastPrefetchPromise || resolvedPromise; // 106
      var previousPromise = lastPrefetchPromise; // 107
      // 108
      function walk(_module2) {
        // 109
        var file = getOwn(filesByModuleId, _module2.id); // 110
        if (fileIsDynamic(file) && !file.pending) {
          // 111
          file.pending = true; // 112
          missing = missing || {}; // 113
          // 114
          // These are the data that will be exposed to the install.fetch      // 115
          // callback, so it's worth documenting each item with a comment.     // 116
          missing[_module2.id] = { // 117
            // The CommonJS module object that will be exposed to this         // 118
            // dynamic module when it is evaluated. Note that install.fetch    // 119
            // could decide to populate module.exports directly, instead of    // 120
            // fetching anything. In that case, install.fetch should omit      // 121
            // this module from the tree that it produces.                     // 122
            module: file.module, // 123
            // List of module identifier strings imported by this module.      // 124
            // Note that the missing object already contains all available     // 125
            // dependencies (including transitive dependencies), so            // 126
            // install.fetch should not need to traverse these dependencies    // 127
            // in most cases; however, they may be useful for other reasons.   // 128
            // Though the strings are unique, note that two different          // 129
            // strings could resolve to the same module.                       // 130
            deps: Object.keys(file.deps), // 131
            // The options (if any) that were passed as the second argument    // 132
            // to the install(tree, options) function when this stub was       // 133
            // first registered. Typically contains options.extensions, but    // 134
            // could contain any information appropriate for the entire tree   // 135
            // as originally installed. These options will be automatically    // 136
            // inherited by the newly fetched modules, so install.fetch        // 137
            // should not need to modify them.                                 // 138
            options: file.options, // 139
            // Any stub data included in the array notation from the           // 140
            // original entry for this dynamic module. Typically contains      // 141
            // "main" and/or "browser" fields for package.json files, and is   // 142
            // otherwise undefined.                                            // 143
            stub: file.stub // 144
          }; // 145
          // 146
          each(file.deps, function (parentId, id) {
            // 147
            fileResolve(file, id); // 148
          }); // 149
          // 150
          each(_module2.childrenById, walk); // 151
        } // 152
      } // 153
      // 154
      return lastPrefetchPromise = resolvedPromise.then(function () {
        // 155
        var absChildId = _module.resolve(id); // 156
        each(_module.childrenById, walk); // 157
        // 158
        return Promise.resolve( // 159
        // The install.fetch function takes an object mapping missing        // 160
        // dynamic module identifiers to options objects, and should         // 161
        // return a Promise that resolves to a module tree that can be       // 162
        // installed. As an optimization, if there were no missing dynamic   // 163
        // modules, then we can skip calling install.fetch entirely.         // 164
        missing && install.fetch(missing) // 165
        // 166
        ).then(function (tree) {
          // 167
          function both() {
            // 168
            if (tree) install(tree); // 169
            return absChildId; // 170
          } // 171
          // 172
          // Although we want multiple install.fetch calls to run in           // 173
          // parallel, it is important that the promises returned by           // 174
          // module.prefetch are resolved in the same order as the original    // 175
          // calls to module.prefetch, because previous fetches may include    // 176
          // modules assumed to exist by more recent module.prefetch calls.    // 177
          // Whether previousPromise was resolved or rejected, carry on with   // 178
          // the installation regardless.                                      // 179
          return previousPromise.then(both, both); // 180
        }); // 181
      }); // 182
    }; // 183
    // 184
    install.Module = Module; // 185
    // 186
    function getOwn(obj, key) {
      // 187
      return hasOwn.call(obj, key) && obj[key]; // 188
    } // 189
    // 190
    function isObject(value) {
      // 191
      return typeof value === "object" && value !== null; // 192
    } // 193
    // 194
    function isFunction(value) {
      // 195
      return typeof value === "function"; // 196
    } // 197
    // 198
    function isString(value) {
      // 199
      return typeof value === "string"; // 200
    } // 201
    // 202
    function makeMissingError(id) {
      // 203
      return new Error("Cannot find module '" + id + "'"); // 204
    } // 205
    // 206
    function makeRequire(file) {
      // 207
      function _require(id) {
        // 208
        var result = fileResolve(file, id); // 209
        if (result) {
          // 210
          return fileEvaluate(result, file.module); // 211
        } // 212
        // 213
        var error = makeMissingError(id); // 214
        // 215
        if (isFunction(fallback)) {
          // 216
          return fallback( // 217
          id, // The missing module identifier.                              // 218
          file.module.id, // The path of the requiring file.                 // 219
          error // The error we would have thrown.                           // 220
          ); // 221
        } // 222
        // 223
        throw error; // 224
      } // 225
      // 226
      if (isFunction(wrapRequire)) {
        // 227
        _require = wrapRequire(_require, file.module); // 228
      } // 229
      // 230
      _require.extensions = fileGetExtensions(file).slice(0); // 231
      // 232
      _require.resolve = function (id) {
        // 233
        var f = fileResolve(file, id); // 234
        if (f) return f.module.id; // 235
        var error = makeMissingError(id); // 236
        if (fallback && isFunction(fallback.resolve)) {
          // 237
          return fallback.resolve(id, file.module.id, error); // 238
        } // 239
        throw error; // 240
      }; // 241
      // 242
      return _require; // 243
    } // 244
    // 245
    // File objects represent either directories or modules that have been     // 246
    // installed. When a `File` respresents a directory, its `.contents`       // 247
    // property is an object containing the names of the files (or             // 248
    // directories) that it contains. When a `File` represents a module, its   // 249
    // `.contents` property is a function that can be invoked with the         // 250
    // appropriate `(require, exports, module)` arguments to evaluate the      // 251
    // module. If the `.contents` property is a string, that string will be    // 252
    // resolved as a module identifier, and the exports of the resulting       // 253
    // module will provide the exports of the original file. The `.parent`     // 254
    // property of a File is either a directory `File` or `null`. Note that    // 255
    // a child may claim another `File` as its parent even if the parent       // 256
    // does not have an entry for that child in its `.contents` object.        // 257
    // This is important for implementing anonymous files, and preventing      // 258
    // child modules from using `../relative/identifier` syntax to examine     // 259
    // unrelated modules.                                                      // 260
    function File(moduleId, parent) {
      // 261
      var file = this; // 262
      // 263
      // Link to the parent file.                                              // 264
      file.parent = parent = parent || null; // 265
      // 266
      // The module object for this File, which will eventually boast an       // 267
      // .exports property when/if the file is evaluated.                      // 268
      file.module = new Module(moduleId); // 269
      filesByModuleId[moduleId] = file; // 270
      // 271
      // The .contents of the file can be either (1) an object, if the file    // 272
      // represents a directory containing other files; (2) a factory          // 273
      // function, if the file represents a module that can be imported; (3)   // 274
      // a string, if the file is an alias for another file; or (4) null, if   // 275
      // the file's contents are not (yet) available.                          // 276
      file.contents = null; // 277
      // 278
      // Set of module identifiers imported by this module. Note that this     // 279
      // set is not necessarily complete, so don't rely on it unless you       // 280
      // know what you're doing.                                               // 281
      file.deps = {}; // 282
    } // 283
    // 284
    function fileEvaluate(file, parentModule) {
      // 285
      var _module3 = file.module; // 286
      if (!hasOwn.call(_module3, "exports")) {
        // 287
        var contents = file.contents; // 288
        if (!contents) {
          // 289
          // If this file was installed with array notation, and the array     // 290
          // contained one or more objects but no functions, then the combined
          // properties of the objects are treated as a temporary stub for     // 292
          // file.module.exports. This is particularly important for partial   // 293
          // package.json modules, so that the resolution logic can know the   // 294
          // value of the "main" and/or "browser" fields, at least, even if    // 295
          // the rest of the package.json file is not (yet) available.         // 296
          if (file.stub) {
            // 297
            return file.stub; // 298
          } // 299
          // 300
          throw makeMissingError(_module3.id); // 301
        } // 302
        // 303
        if (parentModule) {
          // 304
          _module3.parent = parentModule; // 305
          var children = parentModule.children; // 306
          if (Array.isArray(children)) {
            // 307
            children.push(_module3); // 308
          } // 309
        } // 310
        // 311
        // If a Module.prototype.useNode method is defined, give it a chance   // 312
        // to define module.exports based on module.id using Node.             // 313
        if (!isFunction(_module3.useNode) || // 314
        !_module3.useNode()) {
          // 315
          contents( // 316
          _module3.require = _module3.require || makeRequire(file), // 317
          // If the file had a .stub, reuse the same object for exports.     // 318
          _module3.exports = file.stub || {}, // 319
          _module3, // 320
          file.module.id, // 321
          file.parent.module.id // 322
          ); // 323
        } // 324
        // 325
        _module3.loaded = true; // 326
      } // 327
      // 328
      // The module.runModuleSetters method will be deprecated in favor of     // 329
      // just module.runSetters: https://github.com/benjamn/reify/pull/160     // 330
      var runSetters = _module3.runSetters || _module3.runModuleSetters; // 331
      if (isFunction(runSetters)) {
        // 332
        runSetters.call(_module3); // 333
      } // 334
      // 335
      return _module3.exports; // 336
    } // 337
    // 338
    function fileIsDirectory(file) {
      // 339
      return file && isObject(file.contents); // 340
    } // 341
    // 342
    function fileIsDynamic(file) {
      // 343
      return file && file.contents === null; // 344
    } // 345
    // 346
    function fileMergeContents(file, contents, options) {
      // 347
      if (Array.isArray(contents)) {
        // 348
        contents.forEach(function (item) {
          // 349
          if (isString(item)) {
            // 350
            file.deps[item] = file.module.id; // 351
          } else if (isFunction(item)) {
            // 352
            contents = item; // 353
          } else if (isObject(item)) {
            // 354
            file.stub = file.stub || {}; // 355
            each(item, function (value, key) {
              // 356
              file.stub[key] = value; // 357
            }); // 358
          } // 359
        }); // 360
        // 361
        if (!isFunction(contents)) {
          // 362
          // If the array did not contain a function, merge nothing.           // 363
          contents = null; // 364
        } // 365
        // 366
      } else if (!isFunction(contents) && // 367
      !isString(contents) && // 368
      !isObject(contents)) {
        // 369
        // If contents is neither an array nor a function nor a string nor     // 370
        // an object, just give up and merge nothing.                          // 371
        contents = null; // 372
      } // 373
      // 374
      if (contents) {
        // 375
        file.contents = file.contents || (isObject(contents) ? {} : contents);
        if (isObject(contents) && fileIsDirectory(file)) {
          // 377
          each(contents, function (value, key) {
            // 378
            if (key === "..") {
              // 379
              child = file.parent; // 380
              // 381
            } else {
              // 382
              var child = getOwn(file.contents, key); // 383
              // 384
              if (!child) {
                // 385
                child = file.contents[key] = new File( // 386
                file.module.id.replace(/\/*$/, "/") + key, // 387
                file // 388
                ); // 389
                // 390
                child.options = options; // 391
              } // 392
            } // 393
            // 394
            fileMergeContents(child, value, options); // 395
          }); // 396
        } // 397
      } // 398
    } // 399
    // 400
    function each(obj, callback, context) {
      // 401
      Object.keys(obj).forEach(function (key) {
        // 402
        callback.call(this, obj[key], key); // 403
      }, context); // 404
    } // 405
    // 406
    function fileGetExtensions(file) {
      // 407
      return file.options // 408
      && file.options.extensions // 409
      || defaultExtensions; // 410
    } // 411
    // 412
    function fileAppendIdPart(file, part, extensions) {
      // 413
      // Always append relative to a directory.                                // 414
      while (file && !fileIsDirectory(file)) {
        // 415
        file = file.parent; // 416
      } // 417
      // 418
      if (!file || !part || part === ".") {
        // 419
        return file; // 420
      } // 421
      // 422
      if (part === "..") {
        // 423
        return file.parent; // 424
      } // 425
      // 426
      var exactChild = getOwn(file.contents, part); // 427
      // 428
      // Only consider multiple file extensions if this part is the last       // 429
      // part of a module identifier and not equal to `.` or `..`, and there   // 430
      // was no exact match or the exact match was a directory.                // 431
      if (extensions && (!exactChild || fileIsDirectory(exactChild))) {
        // 432
        for (var e = 0; e < extensions.length; ++e) {
          // 433
          var child = getOwn(file.contents, part + extensions[e]); // 434
          if (child && !fileIsDirectory(child)) {
            // 435
            return child; // 436
          } // 437
        } // 438
      } // 439
      // 440
      return exactChild; // 441
    } // 442
    // 443
    function fileAppendId(file, id, extensions) {
      // 444
      var parts = id.split("/"); // 445
      // 446
      // Use `Array.prototype.every` to terminate iteration early if           // 447
      // `fileAppendIdPart` returns a falsy value.                             // 448
      parts.every(function (part, i) {
        // 449
        return file = i < parts.length - 1 // 450
        ? fileAppendIdPart(file, part) // 451
        : fileAppendIdPart(file, part, extensions); // 452
      }); // 453
      // 454
      return file; // 455
    } // 456
    // 457
    function recordChild(parentModule, childFile) {
      // 458
      var childModule = childFile && childFile.module; // 459
      if (parentModule && childModule) {
        // 460
        parentModule.childrenById[childModule.id] = childModule; // 461
      } // 462
    } // 463
    // 464
    function fileResolve(file, id, parentModule, seenDirFiles) {
      // 465
      var parentModule = parentModule || file.module; // 466
      var extensions = fileGetExtensions(file); // 467
      // 468
      file = // 469
      // Absolute module identifiers (i.e. those that begin with a `/`       // 470
      // character) are interpreted relative to the root directory, which    // 471
      // is a slight deviation from Node, which has access to the entire     // 472
      // file system.                                                        // 473
      id.charAt(0) === "/" ? fileAppendId(root, id, extensions) : // 474
      // Relative module identifiers are interpreted relative to the         // 475
      // current file, naturally.                                            // 476
      id.charAt(0) === "." ? fileAppendId(file, id, extensions) : // 477
      // Top-level module identifiers are interpreted as referring to        // 478
      // packages in `node_modules` directories.                             // 479
      nodeModulesLookup(file, id, extensions); // 480
      // 481
      // If the identifier resolves to a directory, we use the same logic as   // 482
      // Node to find an `index.js` or `package.json` file to evaluate.        // 483
      while (fileIsDirectory(file)) {
        // 484
        seenDirFiles = seenDirFiles || []; // 485
        // 486
        // If the "main" field of a `package.json` file resolves to a          // 487
        // directory we've already considered, then we should not attempt to   // 488
        // read the same `package.json` file again. Using an array as a set    // 489
        // is acceptable here because the number of directories to consider    // 490
        // is rarely greater than 1 or 2. Also, using indexOf allows us to     // 491
        // store File objects instead of strings.                              // 492
        if (seenDirFiles.indexOf(file) < 0) {
          // 493
          seenDirFiles.push(file); // 494
          // 495
          var pkgJsonFile = fileAppendIdPart(file, "package.json"),
              main; // 496
          var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule); // 497
          if (pkg && // 498
          mainFields.some(function (name) {
            // 499
            return isString(main = pkg[name]); // 500
          })) {
            // 501
            recordChild(parentModule, pkgJsonFile); // 502
            // 503
            // The "main" field of package.json does not have to begin with    // 504
            // ./ to be considered relative, so first we try simply            // 505
            // appending it to the directory path before falling back to a     // 506
            // full fileResolve, which might return a package from a           // 507
            // node_modules directory.                                         // 508
            file = fileAppendId(file, main, extensions) || // 509
            fileResolve(file, main, parentModule, seenDirFiles); // 510
            // 511
            if (file) {
              // 512
              // The fileAppendId call above may have returned a directory,    // 513
              // so continue the loop to make sure we resolve it to a          // 514
              // non-directory file.                                           // 515
              continue; // 516
            } // 517
          } // 518
        } // 519
        // 520
        // If we didn't find a `package.json` file, or it didn't have a        // 521
        // resolvable `.main` property, the only possibility left to           // 522
        // consider is that this directory contains an `index.js` module.      // 523
        // This assignment almost always terminates the while loop, because    // 524
        // there's very little chance `fileIsDirectory(file)` will be true     // 525
        // for the result of `fileAppendIdPart(file, "index.js")`. However,    // 526
        // in principle it is remotely possible that a file called             // 527
        // `index.js` could be a directory instead of a file.                  // 528
        file = fileAppendIdPart(file, "index.js"); // 529
      } // 530
      // 531
      if (file && isString(file.contents)) {
        // 532
        file = fileResolve(file, file.contents, parentModule, seenDirFiles); // 533
      } // 534
      // 535
      recordChild(parentModule, file); // 536
      // 537
      return file; // 538
    }; // 539
    // 540
    function nodeModulesLookup(file, id, extensions) {
      // 541
      if (isFunction(override)) {
        // 542
        id = override(id, file.module.id); // 543
      } // 544
      // 545
      if (isString(id)) {
        // 546
        for (var resolved; file && !resolved; file = file.parent) {
          // 547
          resolved = fileIsDirectory(file) && // 548
          fileAppendId(file, "node_modules/" + id, extensions); // 549
        } // 550
        // 551
        return resolved; // 552
      } // 553
    } // 554
    // 555
    return install; // 556
  }; // 557
  // 558
  if (typeof exports === "object") {
    // 559
    exports.makeInstaller = makeInstaller; // 560
  } // 561
  // 562
  ///////////////////////////////////////////////////////////////////////////////


  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/options.js                                       //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    makeInstallerOptions = {}; // 1
    // 2
    if (typeof Profile === "function" && // 3
    process.env.METEOR_PROFILE) {
      // 4
      makeInstallerOptions.wrapRequire = function (require) {
        // 5
        return Profile(function (id) {
          // 6
          return "require(" + JSON.stringify(id) + ")"; // 7
        }, require); // 8
      }; // 9
    } // 10
    // 11
    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/client.js                                        //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    // On the client, make package resolution prefer the "browser" field of      // 1
    // package.json files to the "main" field.                                   // 2
    makeInstallerOptions.browser = true; // 3
    // 4
    meteorInstall = makeInstaller(makeInstallerOptions); // 5
    // 6
    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['modules-runtime'] = {}, {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package['modules-runtime'].meteorInstall;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "modules": { "client.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/client.js                                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("./install-packages.js"); // 1
            _require("./stubs.js"); // 2
            _require("./process.js"); // 3
            _require("./reify.js"); // 4
            // 5
            _exports.addStyles = _require("./css").addStyles; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "css.js": function (_require3, _exports3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/css.js                                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var doc = document; // 1
            var head = doc.getElementsByTagName("head").item(0); // 2
            // 3
            _exports3.addStyles = function (css) {
              // 4
              var style = doc.createElement("style"); // 5
              // 6
              style.setAttribute("type", "text/css"); // 7
              // 8
              // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9
              var internetExplorerSheetObject = // 10
              style.sheet || // Edge/IE11.                                                                                       // 11
              style.styleSheet; // Older IEs.                                                                                    // 12
              // 13
              if (internetExplorerSheetObject) {
                // 14
                internetExplorerSheetObject.cssText = css; // 15
              } else {
                // 16
                style.appendChild(doc.createTextNode(css)); // 17
              } // 18
              // 19
              return head.appendChild(style); // 20
            }; // 21
            // 22
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "install-packages.js": function (_require4, _exports4, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/install-packages.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            function install(name, mainModule) {
              // 1
              var meteorDir = {}; // 2
              // 3
              // Given a package name <name>, install a stub module in the                                                         // 4
              // /node_modules/meteor directory called <name>.js, so that                                                          // 5
              // require.resolve("meteor/<name>") will always return                                                               // 6
              // /node_modules/meteor/<name>.js instead of something like                                                          // 7
              // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8
              // that the package contains a file called index.js (#6590).                                                         // 9
              // 10
              if (typeof mainModule === "string") {
                // 11
                // Set up an alias from /node_modules/meteor/<package>.js to the main                                              // 12
                // module, e.g. meteor/<package>/index.js.                                                                         // 13
                meteorDir[name + ".js"] = mainModule; // 14
              } else {
                // 15
                // back compat with old Meteor packages                                                                            // 16
                meteorDir[name + ".js"] = function (r, e, _module2) {
                  // 17
                  _module2.exports = Package[name]; // 18
                }; // 19
              } // 20
              // 21
              meteorInstall({ // 22
                node_modules: { // 23
                  meteor: meteorDir // 24
                  // 25
                } }); // 26
            } // 27
            // 28
            // This file will be modified during computeJsOutputFilesMap to include                                                // 29
            // install(<name>) calls for every Meteor package.                                                                     // 30
            // 31
            install("meteor"); // 32
            install("meteor-base"); // 33
            install("babel-compiler"); // 34
            install("ecmascript"); // 35
            install("underscore"); // 36
            install("modules-runtime"); // 37
            install("modules", "meteor/modules/client.js"); // 38
            install("ecmascript-runtime"); // 39
            install("promise", "meteor/promise/client.js"); // 40
            install("babel-runtime", "meteor/babel-runtime/babel-runtime.js"); // 41
            install("ecmascript-runtime-client", "meteor/ecmascript-runtime-client/runtime.js"); // 42
            install("webapp", "meteor/webapp/webapp_client.js"); // 43
            install("base64"); // 44
            install("ejson", "meteor/ejson/ejson.js"); // 45
            install("check", "meteor/check/match.js"); // 46
            install("random"); // 47
            install("tracker"); // 48
            install("retry"); // 49
            install("id-map"); // 50
            install("callback-hook"); // 51
            install("ddp-common"); // 52
            install("reload"); // 53
            install("diff-sequence"); // 54
            install("mongo-id"); // 55
            install("ddp-client", "meteor/ddp-client/namespace.js"); // 56
            install("ddp"); // 57
            install("ddp-server"); // 58
            install("livedata"); // 59
            install("dynamic-import", "meteor/dynamic-import/client.js"); // 60
            install("hot-code-push"); // 61
            install("geojson-utils", "meteor/geojson-utils/main.js"); // 62
            install("ordered-dict"); // 63
            install("minimongo", "meteor/minimongo/minimongo_client.js"); // 64
            install("allow-deny"); // 65
            install("mongo-dev-server"); // 66
            install("mongo"); // 67
            install("autoupdate"); // 68
            // 69
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "process.js": function (_require5, _exports5, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/process.js                                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            if (!global.process) {
              // 1
              try {
                // 2
                // The application can run `npm install process` to provide its own                                                // 3
                // process stub; otherwise this module will provide a partial stub.                                                // 4
                global.process = _require5("process"); // 5
              } catch (missing) {
                // 6
                global.process = {}; // 7
              } // 8
            } // 9
            // 10
            var proc = global.process; // 11
            // 12
            if (Meteor.isServer) {
              // 13
              // Make require("process") work on the server in all versions of Node.                                               // 14
              meteorInstall({ // 15
                node_modules: { // 16
                  "process.js": function (r, e, _module4) {
                    // 17
                    _module4.exports = proc; // 18
                  } // 19
                  // 20
                } }); // 21
            } else {
              // 22
              proc.platform = "browser"; // 23
              proc.nextTick = proc.nextTick || Meteor._setImmediate; // 24
            } // 25
            // 26
            if (typeof proc.env !== "object") {
              // 27
              proc.env = {}; // 28
            } // 29
            // 30
            var hasOwn = Object.prototype.hasOwnProperty; // 31
            for (var key in meteorEnv) {
              // 32
              if (hasOwn.call(meteorEnv, key)) {
                // 33
                proc.env[key] = meteorEnv[key]; // 34
              } // 35
            } // 36
            // 37
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reify.js": function (_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/reify.js                                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module5.constructor; // 1
            var Mp = Module.prototype; // 2
            _require6("reify/lib/runtime").enable(Mp); // 3
            Mp.importSync = Mp.importSync || Mp.import; // 4
            Mp.import = Mp.import || Mp.importSync; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stubs.js": function (_require7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/modules/stubs.js                                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var haveStubs = false; // 1
            try {
              // 2
              _require7.resolve("meteor-node-stubs"); // 3
              haveStubs = true; // 4
            } catch (noStubs) {} // 5
            // 6
            if (haveStubs) {
              // 7
              // When meteor-node-stubs is installed in the application's root                                                     // 8
              // node_modules directory, requiring it here installs aliases for stubs                                              // 9
              // for all Node built-in modules, such as fs, util, and http.                                                        // 10
              _require7("meteor-node-stubs"); // 11
            } // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "reify": { "lib": { "runtime": { "index.js": function (_require8, _exports7, _module6) {
                    // 1
                    // 2
                    // This module should be compatible with PhantomJS v1, just like the other files                                       // 3
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
                    // not acceptable here, and importing any npm packages should be contemplated                                          // 5
                    // with extreme skepticism.                                                                                            // 6
                    // 7
                    var utils = _require8("./utils.js"); // 8
                    var Entry = _require8("./entry.js"); // 9
                    // 10
                    // The exports.enable method can be used to enable the Reify runtime for                                               // 11
                    // specific module objects, or for Module.prototype (where implemented),                                               // 12
                    // to make the runtime available throughout the entire module system.                                                  // 13
                    _exports7.enable = function (mod) {
                      // 14
                      if (typeof mod.export !== "function" || // 15
                      typeof mod.importSync !== "function") {
                        // 16
                        mod.export = moduleExport; // 17
                        mod.exportDefault = moduleExportDefault; // 18
                        mod.runSetters = runSetters; // 19
                        mod.watch = moduleWatch; // 20
                        // 21
                        // Used for copying the properties of a namespace object to                                                        // 22
                        // mod.exports to implement `export * from "module"` syntax.                                                       // 23
                        mod.makeNsSetter = moduleMakeNsSetter; // 24
                        // 25
                        // To be deprecated:                                                                                               // 26
                        mod.runModuleSetters = runSetters; // 27
                        mod.importSync = importSync; // 28
                        // 29
                        return true; // 30
                      } // 31
                      // 32
                      return false; // 33
                    }; // 34
                    // 35
                    function moduleWatch(exported, setters, key) {
                      // 36
                      utils.setESModule(this.exports); // 37
                      Entry.getOrCreate(this.exports, this); // 38
                      // 39
                      if (utils.isObject(setters)) {
                        // 40
                        Entry.getOrCreate(exported).addSetters(this, setters, key); // 41
                      } // 42
                    } // 43
                    // 44
                    // If key is provided, it will be used to identify the given setters so                                                // 45
                    // that they can be replaced if module.importSync is called again with the                                             // 46
                    // same key. This avoids potential memory leaks from import declarations                                               // 47
                    // inside loops. The compiler generates these keys automatically (and                                                  // 48
                    // deterministically) when compiling nested import declarations.                                                       // 49
                    function importSync(id, setters, key) {
                      // 50
                      return this.watch(this.require(id), setters, key); // 51
                    } // 52
                    // 53
                    // Register getter functions for local variables in the scope of an export                                             // 54
                    // statement. Pass true as the second argument to indicate that the getter                                             // 55
                    // functions always return the same values.                                                                            // 56
                    function moduleExport(getters, constant) {
                      // 57
                      utils.setESModule(this.exports); // 58
                      var entry = Entry.getOrCreate(this.exports, this); // 59
                      entry.addGetters(getters, constant); // 60
                      if (this.loaded) {
                        // 61
                        // If the module has already been evaluated, then we need to trigger                                               // 62
                        // another round of entry.runSetters calls, which begins by calling                                                // 63
                        // entry.runModuleGetters(module).                                                                                 // 64
                        entry.runSetters(); // 65
                      } // 66
                    } // 67
                    // 68
                    // Register a getter function that always returns the given value.                                                     // 69
                    function moduleExportDefault(value) {
                      // 70
                      return this.export({ // 71
                        default: function () {
                          // 72
                          return value; // 73
                        } // 74
                      }, true); // 75
                    } // 76
                    // 77
                    // Platform-specific code should find a way to call this method whenever                                               // 78
                    // the module system is about to return module.exports from require. This                                              // 79
                    // might happen more than once per module, in case of dependency cycles,                                               // 80
                    // so we want Module.prototype.runSetters to run each time.                                                            // 81
                    function runSetters(valueToPassThrough) {
                      // 82
                      var entry = Entry.get(this.exports); // 83
                      if (entry !== null) {
                        // 84
                        entry.runSetters(); // 85
                      } // 86
                      // 87
                      if (this.loaded) {
                        // 88
                        // If this module has finished loading, then we must create an Entry                                               // 89
                        // object here, so that we can add this module to entry.ownerModules                                               // 90
                        // by passing it as the second argument to Entry.getOrCreate.                                                      // 91
                        Entry.getOrCreate(this.exports, this); // 92
                      } // 93
                      // 94
                      // Assignments to exported local variables get wrapped with calls to                                                 // 95
                      // module.runSetters, so module.runSetters returns the                                                               // 96
                      // valueToPassThrough parameter to allow the value of the original                                                   // 97
                      // expression to pass through. For example,                                                                          // 98
                      //                                                                                                                   // 99
                      //   export var a = 1;                                                                                               // 100
                      //   console.log(a += 3);                                                                                            // 101
                      //                                                                                                                   // 102
                      // becomes                                                                                                           // 103
                      //                                                                                                                   // 104
                      //   module.export("a", () => a);                                                                                    // 105
                      //   var a = 1;                                                                                                      // 106
                      //   console.log(module.runSetters(a += 3));                                                                         // 107
                      //                                                                                                                   // 108
                      // This ensures module.runSetters runs immediately after the assignment,                                             // 109
                      // and does not interfere with the larger computation.                                                               // 110
                      return valueToPassThrough; // 111
                    } // 112
                    // 113
                    // Returns a function that takes a namespace object and copies the                                                     // 114
                    // properties of the namespace to module.exports, excluding any "default"                                              // 115
                    // property, which is useful for implementing `export * from "module"`.                                                // 116
                    function moduleMakeNsSetter() {
                      // 117
                      var _module7 = this; // 118
                      // Discussion of why the "default" property is skipped:                                                              // 119
                      // https://github.com/tc39/ecma262/issues/948                                                                        // 120
                      return function (namespace) {
                        // 121
                        Object.keys(namespace).forEach(function (key) {
                          // 122
                          if (key !== "default") {
                            // 123
                            utils.copyKey(key, _module7.exports, namespace); // 124
                          } // 125
                        }); // 126
                      }; // 127
                    } // 128
                    // 129
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "utils.js": function (_require9, _exports8, _module8) {
                    // 1
                    // 2
                    // This module should be compatible with PhantomJS v1, just like the other files                                       // 3
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
                    // not acceptable here, and importing any npm packages should be contemplated                                          // 5
                    // with extreme skepticism.                                                                                            // 6
                    // 7
                    var useSetPrototypeOf = typeof Object.setPrototypeOf === "function"; // 8
                    var useSymbol = typeof Symbol === "function"; // 9
                    // 10
                    var esStrKey = "__esModule"; // 11
                    var esSymKey = useSymbol ? Symbol.for(esStrKey) : null; // 12
                    var useToStringTag = useSymbol && typeof Symbol.toStringTag === "symbol"; // 13
                    var useGetOwnPropDesc = // 14
                    typeof Object.getOwnPropertyDescriptor === "function"; // 15
                    var hasOwn = Object.prototype.hasOwnProperty; // 16
                    // 17
                    function copyKey(key, target, source) {
                      // 18
                      if (useGetOwnPropDesc) {
                        // 19
                        var desc = Object.getOwnPropertyDescriptor(source, key); // 20
                        desc.configurable = true; // Allow redefinition.                                                                   // 21
                        Object.defineProperty(target, key, desc); // 22
                      } else {
                        // 23
                        target[key] = source[key]; // 24
                      } // 25
                    } // 26
                    // 27
                    _exports8.copyKey = copyKey; // 28
                    // 29
                    // Returns obj[key] unless that property is defined by a getter function,                                              // 30
                    // in which case the getter function is returned.                                                                      // 31
                    _exports8.valueOrGetter = function (obj, key) {
                      // 32
                      if (useGetOwnPropDesc && hasOwn.call(obj, key)) {
                        // 33
                        var desc = Object.getOwnPropertyDescriptor(obj, key); // 34
                        if (typeof desc.get === "function") {
                          // 35
                          return desc.get; // 36
                        } // 37
                      } // 38
                      // 39
                      return obj[key]; // 40
                    }; // 41
                    // 42
                    function getESModule(exported) {
                      // 43
                      if (isObjectLike(exported)) {
                        // 44
                        if (useSymbol && hasOwn.call(exported, esSymKey)) {
                          // 45
                          return !!exported[esSymKey]; // 46
                        } // 47
                        // 48
                        if (hasOwn.call(exported, esStrKey)) {
                          // 49
                          return !!exported[esStrKey]; // 50
                        } // 51
                      } // 52
                      // 53
                      return false; // 54
                    } // 55
                    // 56
                    _exports8.getESModule = getESModule; // 57
                    // 58
                    function setESModule(exported) {
                      // 59
                      if (isObjectLike(exported)) {
                        // 60
                        if (useSymbol) {
                          // 61
                          exported[esSymKey] = true; // 62
                        } else if (!exported[esStrKey]) {
                          // 63
                          // Other module runtime systems may set exported.__esModule such                                                 // 64
                          // that it can't be redefined, so we call Object.defineProperty only                                             // 65
                          // when exported.__esModule is not already true.                                                                 // 66
                          Object.defineProperty(exported, esStrKey, { // 67
                            configurable: true, // 68
                            enumerable: false, // 69
                            value: true, // 70
                            writable: false // 71
                          }); // 72
                        } // 73
                      } // 74
                    } // 75
                    // 76
                    _exports8.setESModule = setESModule; // 77
                    // 78
                    function isObject(value) {
                      // 79
                      return typeof value === "object" && value !== null; // 80
                    } // 81
                    // 82
                    _exports8.isObject = isObject; // 83
                    // 84
                    function isObjectLike(value) {
                      // 85
                      var type = typeof value; // 86
                      return type === "function" || type === "object" && value !== null; // 87
                    } // 88
                    // 89
                    _exports8.isObjectLike = isObjectLike; // 90
                    // 91
                    function createNamespace() {
                      // 92
                      var namespace = Object.create(null); // 93
                      // 94
                      if (useToStringTag) {
                        // 95
                        Object.defineProperty(namespace, Symbol.toStringTag, { // 96
                          value: "Module", // 97
                          configurable: false, // 98
                          enumerable: false, // 99
                          writable: false // 100
                        }); // 101
                      } // 102
                      // 103
                      setESModule(namespace); // 104
                      // 105
                      return namespace; // 106
                    } // 107
                    // 108
                    _exports8.createNamespace = createNamespace; // 109
                    // 110
                    function setPrototypeOf(object, proto) {
                      // 111
                      if (useSetPrototypeOf) {
                        // 112
                        Object.setPrototypeOf(object, proto); // 113
                      } else {
                        // 114
                        object.__proto__ = proto; // 115
                      } // 116
                      return object; // 117
                    } // 118
                    // 119
                    _exports8.setPrototypeOf = setPrototypeOf; // 120
                    // 121
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "entry.js": function (_require10, _exports9, _module9) {
                    // 1
                    // 2
                    // This module should be compatible with PhantomJS v1, just like the other files                                       // 3
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
                    // not acceptable here, and importing any npm packages should be contemplated                                          // 5
                    // with extreme skepticism.                                                                                            // 6
                    // 7
                    var utils = _require10("./utils.js"); // 8
                    // 9
                    var GETTER_ERROR = {}; // 10
                    var NAN = {}; // 11
                    var UNDEFINED = {}; // 12
                    var hasOwn = Object.prototype.hasOwnProperty; // 13
                    var keySalt = 0; // 14
                    // 15
                    function Entry(exported) {
                      // 16
                      // The module.exports of the module this Entry is managing.                                                          // 17
                      this.exports = exported; // 18
                      // Getters for local variables exported from the managed module.                                                     // 19
                      this.getters = Object.create(null); // 20
                      // Setters for assigning to local variables in parent modules.                                                       // 21
                      this.setters = Object.create(null); // 22
                      // The normalized namespace object that importers receive when they use                                              // 23
                      // `import * as namespace from "..."` syntax.                                                                        // 24
                      this.namespace = utils.createNamespace(); // 25
                      // Map from module.id string to module object for each module this Entry                                             // 26
                      // is managing.                                                                                                      // 27
                      this.ownerModules = Object.create(null); // 28
                      // Boolean indicating whether all the modules this Entry is managing                                                 // 29
                      // have finished loading yet. Call entry.hasLoaded() to compute.                                                     // 30
                      this._loaded = false; // 31
                    } // 32
                    // 33
                    var Ep = utils.setPrototypeOf(Entry.prototype, null); // 34
                    // 35
                    var weakEntryMap = typeof WeakMap === "function" // 36
                    ? new WeakMap() // 37
                    : new function FakeWeakMap() {
                      // 38
                      // A barely functional WeakMap polyfill, just in case. This                                                        // 39
                      // implementation needs to be logically correct only in the specific                                               // 40
                      // ways that the Entry class uses it. It isn't even "weak" in the                                                  // 41
                      // garbage-collection sense of the word, but that's fine.                                                          // 42
                      var keys = []; // 43
                      var values = []; // 44
                      // 45
                      this.get = function (obj) {
                        // 46
                        var index = keys.indexOf(obj); // 47
                        if (index >= 0) {
                          // 48
                          return values[index]; // 49
                        } // 50
                      }; // 51
                      // 52
                      this.set = function (obj, value) {
                        // 53
                        var index = keys.indexOf(obj); // 54
                        if (index >= 0) {
                          // 55
                          values[index] = value; // 56
                        } else {
                          // 57
                          keys.push(obj); // 58
                          values.push(value); // 59
                        } // 60
                      }; // 61
                    }(); // 62
                    // 63
                    Entry.get = function (exported) {
                      // 64
                      if (utils.isObjectLike(exported)) {
                        // 65
                        var entry = weakEntryMap.get(exported); // 66
                        if (entry !== void 0) {
                          // 67
                          return entry; // 68
                        } // 69
                      } // 70
                      return null; // 71
                    }; // 72
                    // 73
                    Entry.getOrCreate = function (exported, mod) {
                      // 74
                      var entry = getOrCreate(exported); // 75
                      // 76
                      if (utils.isObject(mod)) {
                        // 77
                        entry.ownerModules[mod.id] = mod; // 78
                      } // 79
                      // 80
                      return entry; // 81
                    }; // 82
                    // 83
                    function getOrCreate(exported) {
                      // 84
                      if (!utils.isObjectLike(exported)) {
                        // 85
                        // In case the child module modified module.exports, create a temporary                                            // 86
                        // Entry object so that we can call the entry.addSetters method once,                                              // 87
                        // which will trigger entry.runSetters(names), so that module.importSync                                           // 88
                        // behaves as expected.                                                                                            // 89
                        return new Entry(exported); // 90
                      } // 91
                      // 92
                      var entry = weakEntryMap.get(exported); // 93
                      if (entry !== void 0) {
                        // 94
                        return entry; // 95
                      } // 96
                      // 97
                      var entry = new Entry(exported); // 98
                      weakEntryMap.set(exported, entry); // 99
                      return entry; // 100
                    }; // 101
                    // 102
                    function safeKeys(obj) {
                      // 103
                      var keys = Object.keys(obj); // 104
                      var esModuleIndex = keys.indexOf("__esModule"); // 105
                      if (esModuleIndex >= 0) {
                        // 106
                        keys.splice(esModuleIndex, 1); // 107
                      } // 108
                      return keys; // 109
                    } // 110
                    // 111
                    Ep.addGetters = function (getters, constant) {
                      // 112
                      var names = safeKeys(getters); // 113
                      var nameCount = names.length; // 114
                      constant = !!constant; // 115
                      // 116
                      for (var i = 0; i < nameCount; ++i) {
                        // 117
                        var name = names[i]; // 118
                        var getter = getters[name]; // 119
                        // 120
                        if (typeof getter === "function" && // 121
                        // Should this throw if this.getters[name] exists?                                                             // 122
                        !(name in this.getters)) {
                          // 123
                          this.getters[name] = getter; // 124
                          getter.constant = constant; // 125
                          getter.runCount = 0; // 126
                        } // 127
                      } // 128
                    }; // 129
                    // 130
                    Ep.addSetters = function (parent, setters, key) {
                      // 131
                      var names = safeKeys(setters); // 132
                      var nameCount = names.length; // 133
                      // 134
                      if (!nameCount) {
                        // 135
                        return; // 136
                      } // 137
                      // 138
                      // If no key is provided, make a unique key. Otherwise, make sure the key is                                         // 139
                      // distinct from keys provided by other parent modules.                                                              // 140
                      key = key === void 0 // 141
                      ? makeUniqueKey() // 142
                      : parent.id + ":" + key; // 143
                      // 144
                      for (var i = 0; i < nameCount; ++i) {
                        // 145
                        var name = names[i]; // 146
                        var setter = setters[name]; // 147
                        // 148
                        if (typeof setter === "function") {
                          // 149
                          setter.parent = parent; // 150
                          if (!(name in this.setters)) {
                            // 151
                            this.setters[name] = Object.create(null); // 152
                          } // 153
                          this.setters[name][key] = setter; // 154
                        } // 155
                      } // 156
                      // 157
                      this.runSetters(names); // 158
                    }; // 159
                    // 160
                    Ep.runGetters = function (names) {
                      // 161
                      // Before running getters, copy anything added to the exports object                                                 // 162
                      // over to the namespace. Values returned by getters take precedence                                                 // 163
                      // over these values, but we don't want to miss anything.                                                            // 164
                      syncExportsToNamespace(this, names); // 165
                      // 166
                      if (names === void 0 || // 167
                      names.indexOf("*") >= 0) {
                        // 168
                        names = Object.keys(this.getters); // 169
                      } // 170
                      // 171
                      var nameCount = names.length; // 172
                      // 173
                      for (var i = 0; i < nameCount; ++i) {
                        // 174
                        var name = names[i]; // 175
                        var value = runGetter(this, name); // 176
                        // 177
                        // If the getter is run without error, update both entry.namespace and                                             // 178
                        // module.exports with the current value so that CommonJS require                                                  // 179
                        // calls remain consistent with module.watch.                                                                      // 180
                        if (value !== GETTER_ERROR) {
                          // 181
                          this.namespace[name] = value; // 182
                          this.exports[name] = value; // 183
                        } // 184
                      } // 185
                    }; // 186
                    // 187
                    function syncExportsToNamespace(entry, names) {
                      // 188
                      var setDefault = false; // 189
                      // 190
                      if (!utils.getESModule(entry.exports)) {
                        // 191
                        // If the module entry is managing overrides module.exports, that                                                  // 192
                        // value should be exposed as the .default property of the namespace,                                              // 193
                        // unless module.exports is marked as an ECMASCript module.                                                        // 194
                        entry.namespace.default = entry.exports; // 195
                        setDefault = true; // 196
                      } // 197
                      // 198
                      if (!utils.isObjectLike(entry.exports)) {
                        // 199
                        return; // 200
                      } // 201
                      // 202
                      if (names === void 0 || // 203
                      names.indexOf("*") >= 0) {
                        // 204
                        names = Object.keys(entry.exports); // 205
                      } // 206
                      // 207
                      names.forEach(function (key) {
                        // 208
                        // Don't set any properties for which a getter function exists in                                                  // 209
                        // entry.getters, don't accidentally override entry.namespace.default,                                             // 210
                        // and only copy own properties from entry.exports.                                                                // 211
                        if (!hasOwn.call(entry.getters, key) && // 212
                        !(setDefault && key === "default") && // 213
                        hasOwn.call(entry.exports, key)) {
                          // 214
                          utils.copyKey(key, entry.namespace, entry.exports); // 215
                        } // 216
                      }); // 217
                    } // 218
                    // 219
                    // Called by module.runSetters once the module this Entry is managing has                                              // 220
                    // finished loading.                                                                                                   // 221
                    Ep.hasLoaded = function () {
                      // 222
                      if (this._loaded) {
                        // 223
                        return true; // 224
                      } // 225
                      // 226
                      var ids = Object.keys(this.ownerModules); // 227
                      var idCount = ids.length; // 228
                      // 229
                      for (var i = 0; i < idCount; ++i) {
                        // 230
                        var owner = this.ownerModules[ids[i]]; // 231
                        if (!owner.loaded && owner.exports === this.exports) {
                          // 232
                          // At least one owner module whose exports are still ===                                                         // 233
                          // this.exports has not finished loading, so this this Entry cannot                                              // 234
                          // be marked as loaded yet.                                                                                      // 235
                          return false; // 236
                        } // 237
                      } // 238
                      // 239
                      // Set entry._loaded = true only if all the modules in                                                               // 240
                      // entry.ownerModules that are still associated with entry.exports have                                              // 241
                      // finished loading.                                                                                                 // 242
                      return this._loaded = true; // 243
                    }; // 244
                    // 245
                    // Called whenever module.exports might have changed, to trigger any                                                   // 246
                    // setters associated with the newly exported values. The names parameter                                              // 247
                    // is optional; without it, all getters and setters will run.                                                          // 248
                    Ep.runSetters = function (names) {
                      // 249
                      // Make sure entry.namespace and module.exports are up to date before we                                             // 250
                      // call getExportByName(entry, name).                                                                                // 251
                      this.runGetters(names); // 252
                      // 253
                      // Lazily-initialized object mapping parent module identifiers to parent                                             // 254
                      // module objects whose setters we might need to run.                                                                // 255
                      var parents; // 256
                      // 257
                      forEachSetter(this, names, function (setter, name, value) {
                        // 258
                        if (parents === void 0) {
                          // 259
                          parents = Object.create(null); // 260
                        } // 261
                        parents[setter.parent.id] = setter.parent; // 262
                        // 263
                        // The param order for setters is `value` then `name` because the `name`                                           // 264
                        // param is only used by namespace exports.                                                                        // 265
                        setter(value, name); // 266
                      }); // 267
                      // 268
                      if (!parents) {
                        // 269
                        return; // 270
                      } // 271
                      // 272
                      // If any of the setters updated the module.exports of a parent module,                                              // 273
                      // or updated local variables that are exported by that parent module,                                               // 274
                      // then we must re-run any setters registered by that parent module.                                                 // 275
                      var parentIDs = Object.keys(parents); // 276
                      var parentIDCount = parentIDs.length; // 277
                      // 278
                      for (var i = 0; i < parentIDCount; ++i) {
                        // 279
                        // What happens if parents[parentIDs[id]] === module, or if                                                        // 280
                        // longer cycles exist in the parent chain? Thanks to our setter.last                                              // 281
                        // bookkeeping above, the runSetters broadcast will only proceed                                                   // 282
                        // as far as there are any actual changes to report.                                                               // 283
                        var parent = parents[parentIDs[i]]; // 284
                        var parentEntry = Entry.get(parent.exports); // 285
                        if (parentEntry) {
                          // 286
                          parentEntry.runSetters(); // 287
                        } // 288
                      } // 289
                    }; // 290
                    // 291
                    function callSetterIfNecessary(setter, name, value, callback) {
                      // 292
                      if (name === "__esModule") {
                        // 293
                        // Ignore setters asking for module.exports.__esModule.                                                            // 294
                        return; // 295
                      } // 296
                      // 297
                      var shouldCall = false; // 298
                      // 299
                      if (setter.last === void 0) {
                        // 300
                        setter.last = Object.create(null); // 301
                        // Always call the setter if it has never been called before.                                                      // 302
                        shouldCall = true; // 303
                      } // 304
                      // 305
                      function changed(name, value) {
                        // 306
                        var valueToCompare = value; // 307
                        if (valueToCompare !== valueToCompare) {
                          // 308
                          valueToCompare = NAN; // 309
                        } else if (valueToCompare === void 0) {
                          // 310
                          valueToCompare = UNDEFINED; // 311
                        } // 312
                        // 313
                        if (setter.last[name] === valueToCompare) {
                          // 314
                          return false; // 315
                        } // 316
                        // 317
                        setter.last[name] = valueToCompare; // 318
                        return true; // 319
                      } // 320
                      // 321
                      if (name === "*") {
                        // 322
                        var keys = safeKeys(value); // 323
                        var keyCount = keys.length; // 324
                        for (var i = 0; i < keyCount; ++i) {
                          // 325
                          var key = keys[i]; // 326
                          // Evaluating value[key] is risky because the property might be                                                  // 327
                          // defined by a getter function that logs a deprecation warning (or                                              // 328
                          // worse) when evaluated. For example, Node uses this trick to                                                   // 329
                          // display a deprecation warning whenever crypto.createCredentials                                               // 330
                          // is accessed. Fortunately, when value[key] is defined by a getter                                              // 331
                          // function, it's enough to check whether the getter function itself                                             // 332
                          // has changed, since we are careful elsewhere to preserve getters                                               // 333
                          // rather than prematurely evaluating them.                                                                      // 334
                          if (changed(key, utils.valueOrGetter(value, key))) {
                            // 335
                            shouldCall = true; // 336
                          } // 337
                        } // 338
                      } else if (changed(name, value)) {
                        // 339
                        shouldCall = true; // 340
                      } // 341
                      // 342
                      if (shouldCall) {
                        // 343
                        // Only invoke the callback if we have not called this setter                                                      // 344
                        // (with a value of this name) before, or the current value is                                                     // 345
                        // different from the last value we passed to this setter.                                                         // 346
                        return callback(setter, name, value); // 347
                      } // 348
                    } // 349
                    // 350
                    // Invoke the given callback once for every (setter, name, value) that needs to                                        // 351
                    // be called. Note that forEachSetter does not call any setters itself, only the                                       // 352
                    // given callback.                                                                                                     // 353
                    function forEachSetter(entry, names, callback) {
                      // 354
                      var needToCheckNames = true; // 355
                      // 356
                      if (names === void 0) {
                        // 357
                        names = Object.keys(entry.setters); // 358
                        needToCheckNames = false; // 359
                      } // 360
                      // 361
                      var nameCount = names.length; // 362
                      // 363
                      for (var i = 0; i < nameCount; ++i) {
                        // 364
                        var name = names[i]; // 365
                        // 366
                        if (needToCheckNames && // 367
                        !hasOwn.call(entry.setters, name)) {
                          // 368
                          continue; // 369
                        } // 370
                        // 371
                        var setters = entry.setters[name]; // 372
                        var keys = Object.keys(setters); // 373
                        var keyCount = keys.length; // 374
                        // 375
                        for (var j = 0; j < keyCount; ++j) {
                          // 376
                          var key = keys[j]; // 377
                          var value = getExportByName(entry, name); // 378
                          // 379
                          callSetterIfNecessary(setters[key], name, value, callback); // 380
                          // 381
                          var getter = entry.getters[name]; // 382
                          if (typeof getter === "function" && // 383
                          // Sometimes a getter function will throw because it's called                                                // 384
                          // before the variable it's supposed to return has been                                                      // 385
                          // initialized, so we need to know that the getter function has                                              // 386
                          // run to completion at least once.                                                                          // 387
                          getter.runCount > 0 && // 388
                          getter.constant) {
                            // 389
                            // If we happen to know that this getter function has run                                                      // 390
                            // successfully, and will never return a different value, then we                                              // 391
                            // can forget the corresponding setter, because we've already                                                  // 392
                            // reported that constant value. Note that we can't forget the                                                 // 393
                            // getter, because we need to remember the original value in case                                              // 394
                            // anyone tampers with entry.exports[name].                                                                    // 395
                            delete setters[key]; // 396
                          } // 397
                        } // 398
                      } // 399
                    } // 400
                    // 401
                    function getExportByName(entry, name) {
                      // 402
                      if (name === "*") {
                        // 403
                        return entry.namespace; // 404
                      } // 405
                      // 406
                      if (hasOwn.call(entry.namespace, name)) {
                        // 407
                        return entry.namespace[name]; // 408
                      } // 409
                      // 410
                      var exported = entry.exports; // 411
                      // 412
                      if (name === "default" && // 413
                      !(utils.getESModule(exported) && // 414
                      "default" in exported)) {
                        // 415
                        return exported; // 416
                      } // 417
                      // 418
                      if (exported == null) {
                        // 419
                        return; // 420
                      } // 421
                      // 422
                      return exported[name]; // 423
                    } // 424
                    // 425
                    function makeUniqueKey() {
                      // 426
                      return Math.random() // 427
                      .toString(36) // 428
                      // Add an incrementing salt to help track key ordering and also                                                    // 429
                      // absolutely guarantee we never return the same key twice.                                                        // 430
                      .replace("0.", ++keySalt + "$"); // 431
                    } // 432
                    // 433
                    function runGetter(entry, name) {
                      // 434
                      var getter = entry.getters[name]; // 435
                      try {
                        // 436
                        var result = getter(); // 437
                        ++getter.runCount; // 438
                        return result; // 439
                      } catch (e) {} // 440
                      return GETTER_ERROR; // 441
                    } // 442
                    // 443
                    _module9.exports = Entry; // 444
                    // 445
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  } } } } } } }, "meteor-node-stubs": { "package.json": function (_require11, _exports10) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/package.json                                                                         //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _exports10.name = "meteor-node-stubs"; // 1
          _exports10.version = "0.2.11"; // 2
          _exports10.main = "index.js"; // 3
          // 4
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function (_require12, _exports11, _module10) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/index.js                                                                             //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          var map = _require12("./map.json"); // 1
          var meteorAliases = {}; // 2
          // 3
          Object.keys(map).forEach(function (id) {
            // 4
            if (typeof map[id] === "string") {
              // 5
              var aliasParts = _module10.id.split("/"); // 6
              aliasParts.pop(); // 7
              aliasParts.push("node_modules", map[id]); // 8
              _exports11[id] = meteorAliases[id + ".js"] = // 9
              aliasParts.join("/"); // 10
            } else {
              // 11
              _exports11[id] = map[id]; // 12
              meteorAliases[id + ".js"] = function () {}; // 13
            } // 14
          }); // 15
          // 16
          if (typeof meteorInstall === "function") {
            // 17
            meteorInstall({ // 18
              // Install the aliases into a node_modules directory one level up from                                             // 19
              // the root directory, so that they do not clutter the namespace                                                   // 20
              // available to apps and packages.                                                                                 // 21
              "..": { // 22
                node_modules: meteorAliases // 23
                // 24
              } }); // 25
          } // 26
          // 27
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "map.json": function (_require13, _exports12, _module11) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/meteor-node-stubs/map.json                                                                             //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module11.exports = { // 1
            "assert": "assert/", // 2
            "buffer": "buffer/", // 3
            "child_process": null, // 4
            "cluster": null, // 5
            "console": "console-browserify", // 6
            "constants": "constants-browserify", // 7
            "crypto": "../wrappers/crypto.js", // 8
            "dgram": null, // 9
            "dns": null, // 10
            "domain": "domain-browser", // 11
            "events": "events/", // 12
            "fs": null, // 13
            "http": "http-browserify", // 14
            "https": "https-browserify", // 15
            "module": "../wrappers/module.js", // 16
            "net": null, // 17
            "os": "os-browserify/browser.js", // 18
            "path": "path-browserify", // 19
            "process": "process/browser.js", // 20
            "punycode": "punycode/", // 21
            "querystring": "querystring-es3/", // 22
            "readline": null, // 23
            "repl": null, // 24
            "stream": "stream-browserify", // 25
            "_stream_duplex": "readable-stream/duplex.js", // 26
            "_stream_passthrough": "readable-stream/passthrough.js", // 27
            "_stream_readable": "readable-stream/readable.js", // 28
            "_stream_transform": "readable-stream/transform.js", // 29
            "_stream_writable": "readable-stream/writable.js", // 30
            "string_decoder": "string_decoder/", // 31
            "sys": "util/util.js", // 32
            "timers": "timers-browserify", // 33
            "tls": null, // 34
            "tty": "tty-browserify", // 35
            "url": "url/", // 36
            "util": "util/util.js", // 37
            "vm": "vm-browserify", // 38
            "zlib": "browserify-zlib" // 39
          }; // 40
          // 41
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "deps": { "process.js": function (_require14) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/meteor-node-stubs/deps/process.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require14("process/browser.js"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "domain.js": function (_require15) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/meteor-node-stubs/deps/domain.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require15("domain-browser"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "node_modules": { "process": { "browser.js": function (_require16, _exports13, _module12) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // shim for using process in browser                                                                                   // 1
              var process = _module12.exports = {}; // 2
              // 3
              // cached from whatever global is present so that test runners that stub it                                            // 4
              // don't break things.  But we need to wrap it in a try catch in case it is                                            // 5
              // wrapped in strict mode code which doesn't define any globals.  It's inside a                                        // 6
              // function because try/catches deoptimize in certain engines.                                                         // 7
              // 8
              var cachedSetTimeout; // 9
              var cachedClearTimeout; // 10
              // 11
              function defaultSetTimout() {
                // 12
                throw new Error('setTimeout has not been defined'); // 13
              } // 14
              function defaultClearTimeout() {
                // 15
                throw new Error('clearTimeout has not been defined'); // 16
              } // 17
              (function () {
                // 18
                try {
                  // 19
                  if (typeof setTimeout === 'function') {
                    // 20
                    cachedSetTimeout = setTimeout; // 21
                  } else {
                    // 22
                    cachedSetTimeout = defaultSetTimout; // 23
                  } // 24
                } catch (e) {
                  // 25
                  cachedSetTimeout = defaultSetTimout; // 26
                } // 27
                try {
                  // 28
                  if (typeof clearTimeout === 'function') {
                    // 29
                    cachedClearTimeout = clearTimeout; // 30
                  } else {
                    // 31
                    cachedClearTimeout = defaultClearTimeout; // 32
                  } // 33
                } catch (e) {
                  // 34
                  cachedClearTimeout = defaultClearTimeout; // 35
                } // 36
              })(); // 37
              function runTimeout(fun) {
                // 38
                if (cachedSetTimeout === setTimeout) {
                  // 39
                  //normal enviroments in sane situations                                                                        // 40
                  return setTimeout(fun, 0); // 41
                } // 42
                // if setTimeout wasn't available but was latter defined                                                           // 43
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                  // 44
                  cachedSetTimeout = setTimeout; // 45
                  return setTimeout(fun, 0); // 46
                } // 47
                try {
                  // 48
                  // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 49
                  return cachedSetTimeout(fun, 0); // 50
                } catch (e) {
                  // 51
                  try {
                    // 52
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0); // 54
                  } catch (e) {
                    // 55
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0); // 57
                  } // 58
                } // 59
                // 60
                // 61
              } // 62
              function runClearTimeout(marker) {
                // 63
                if (cachedClearTimeout === clearTimeout) {
                  // 64
                  //normal enviroments in sane situations                                                                        // 65
                  return clearTimeout(marker); // 66
                } // 67
                // if clearTimeout wasn't available but was latter defined                                                         // 68
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                  // 69
                  cachedClearTimeout = clearTimeout; // 70
                  return clearTimeout(marker); // 71
                } // 72
                try {
                  // 73
                  // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 74
                  return cachedClearTimeout(marker); // 75
                } catch (e) {
                  // 76
                  try {
                    // 77
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker); // 79
                  } catch (e) {
                    // 80
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout                               // 82
                    return cachedClearTimeout.call(this, marker); // 83
                  } // 84
                } // 85
                // 86
                // 87
                // 88
              } // 89
              var queue = []; // 90
              var draining = false; // 91
              var currentQueue; // 92
              var queueIndex = -1; // 93
              // 94
              function cleanUpNextTick() {
                // 95
                if (!draining || !currentQueue) {
                  // 96
                  return; // 97
                } // 98
                draining = false; // 99
                if (currentQueue.length) {
                  // 100
                  queue = currentQueue.concat(queue); // 101
                } else {
                  // 102
                  queueIndex = -1; // 103
                } // 104
                if (queue.length) {
                  // 105
                  drainQueue(); // 106
                } // 107
              } // 108
              // 109
              function drainQueue() {
                // 110
                if (draining) {
                  // 111
                  return; // 112
                } // 113
                var timeout = runTimeout(cleanUpNextTick); // 114
                draining = true; // 115
                // 116
                var len = queue.length; // 117
                while (len) {
                  // 118
                  currentQueue = queue; // 119
                  queue = []; // 120
                  while (++queueIndex < len) {
                    // 121
                    if (currentQueue) {
                      // 122
                      currentQueue[queueIndex].run(); // 123
                    } // 124
                  } // 125
                  queueIndex = -1; // 126
                  len = queue.length; // 127
                } // 128
                currentQueue = null; // 129
                draining = false; // 130
                runClearTimeout(timeout); // 131
              } // 132
              // 133
              process.nextTick = function (fun) {
                // 134
                var args = new Array(arguments.length - 1); // 135
                if (arguments.length > 1) {
                  // 136
                  for (var i = 1; i < arguments.length; i++) {
                    // 137
                    args[i - 1] = arguments[i]; // 138
                  } // 139
                } // 140
                queue.push(new Item(fun, args)); // 141
                if (queue.length === 1 && !draining) {
                  // 142
                  runTimeout(drainQueue); // 143
                } // 144
              }; // 145
              // 146
              // v8 likes predictible objects                                                                                        // 147
              function Item(fun, array) {
                // 148
                this.fun = fun; // 149
                this.array = array; // 150
              } // 151
              Item.prototype.run = function () {
                // 152
                this.fun.apply(null, this.array); // 153
              }; // 154
              process.title = 'browser'; // 155
              process.browser = true; // 156
              process.env = {}; // 157
              process.argv = []; // 158
              process.version = ''; // empty string to avoid regexp issues                                                           // 159
              process.versions = {}; // 160
              // 161
              function noop() {} // 162
              // 163
              process.on = noop; // 164
              process.addListener = noop; // 165
              process.once = noop; // 166
              process.off = noop; // 167
              process.removeListener = noop; // 168
              process.removeAllListeners = noop; // 169
              process.emit = noop; // 170
              // 171
              process.binding = function (name) {
                // 172
                throw new Error('process.binding is not supported'); // 173
              }; // 174
              // 175
              process.cwd = function () {
                return '/';
              }; // 176
              process.chdir = function (dir) {
                // 177
                throw new Error('process.chdir is not supported'); // 178
              }; // 179
              process.umask = function () {
                return 0;
              }; // 180
              // 181
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "domain-browser": { "package.json": function (_require17, _exports14) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports14.name = "domain-browser"; // 1
              _exports14.version = "1.1.7"; // 2
              _exports14.main = "./index.js"; // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "index.js": function (_require18, _exports15, _module13) {
              // 3
              _module13.exports = function () {
                // 4
                // Import Events                                                                                                      // 5
                var events = _require18('events'); // 6
                // 7
                // Export Domain                                                                                                      // 8
                var domain = {}; // 9
                domain.createDomain = domain.create = function () {
                  // 10
                  var d = new events.EventEmitter(); // 11
                  // 12
                  function emitError(e) {
                    // 13
                    d.emit('error', e); // 14
                  } // 15
                  // 16
                  d.add = function (emitter) {
                    // 17
                    emitter.on('error', emitError); // 18
                  }; // 19
                  d.remove = function (emitter) {
                    // 20
                    emitter.removeListener('error', emitError); // 21
                  }; // 22
                  d.bind = function (fn) {
                    // 23
                    return function () {
                      // 24
                      var args = Array.prototype.slice.call(arguments); // 25
                      try {
                        // 26
                        fn.apply(null, args); // 27
                      } // 28
                      catch (err) {
                        // 29
                        emitError(err); // 30
                      } // 31
                    }; // 32
                  }; // 33
                  d.intercept = function (fn) {
                    // 34
                    return function (err) {
                      // 35
                      if (err) {
                        // 36
                        emitError(err); // 37
                      } // 38
                      else {
                          // 39
                          var args = Array.prototype.slice.call(arguments, 1); // 40
                          try {
                            // 41
                            fn.apply(null, args); // 42
                          } // 43
                          catch (err) {
                            // 44
                            emitError(err); // 45
                          } // 46
                        } // 47
                    }; // 48
                  }; // 49
                  d.run = function (fn) {
                    // 50
                    try {
                      // 51
                      fn(); // 52
                    } // 53
                    catch (err) {
                      // 54
                      emitError(err); // 55
                    } // 56
                    return this; // 57
                  }; // 58
                  d.dispose = function () {
                    // 59
                    this.removeAllListeners(); // 60
                    return this; // 61
                  }; // 62
                  d.enter = d.exit = function () {
                    // 63
                    return this; // 64
                  }; // 65
                  return d; // 66
                }; // 67
                return domain; // 68
              }.call(this); // 69
              // 70
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "events": { "package.json": function (_require19, _exports16) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports16.name = "events"; // 1
              _exports16.version = "1.1.1"; // 2
              _exports16.main = "./events.js"; // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "events.js": function (_require20, _exports17, _module14) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
              //                                                                                                                     // 2
              // Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
              // copy of this software and associated documentation files (the                                                       // 4
              // "Software"), to deal in the Software without restriction, including                                                 // 5
              // without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
              // distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
              // persons to whom the Software is furnished to do so, subject to the                                                  // 8
              // following conditions:                                                                                               // 9
              //                                                                                                                     // 10
              // The above copyright notice and this permission notice shall be included                                             // 11
              // in all copies or substantial portions of the Software.                                                              // 12
              //                                                                                                                     // 13
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
              // USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
              // 21
              function EventEmitter() {
                // 22
                this._events = this._events || {}; // 23
                this._maxListeners = this._maxListeners || undefined; // 24
              } // 25
              _module14.exports = EventEmitter; // 26
              // 27
              // Backwards-compat with node 0.10.x                                                                                   // 28
              EventEmitter.EventEmitter = EventEmitter; // 29
              // 30
              EventEmitter.prototype._events = undefined; // 31
              EventEmitter.prototype._maxListeners = undefined; // 32
              // 33
              // By default EventEmitters will print a warning if more than 10 listeners are                                         // 34
              // added to it. This is a useful default which helps finding memory leaks.                                             // 35
              EventEmitter.defaultMaxListeners = 10; // 36
              // 37
              // Obviously not all Emitters should be limited to 10. This function allows                                            // 38
              // that to be increased. Set to zero for unlimited.                                                                    // 39
              EventEmitter.prototype.setMaxListeners = function (n) {
                // 40
                if (!isNumber(n) || n < 0 || isNaN(n)) // 41
                  throw TypeError('n must be a positive number'); // 42
                this._maxListeners = n; // 43
                return this; // 44
              }; // 45
              // 46
              EventEmitter.prototype.emit = function (type) {
                // 47
                var er, handler, len, args, i, listeners; // 48
                // 49
                if (!this._events) // 50
                  this._events = {}; // 51
                // 52
                // If there is no 'error' event listener then throw.                                                                 // 53
                if (type === 'error') {
                  // 54
                  if (!this._events.error || // 55
                  isObject(this._events.error) && !this._events.error.length) {
                    // 56
                    er = arguments[1]; // 57
                    if (er instanceof Error) {
                      // 58
                      throw er; // Unhandled 'error' event                                                                           // 59
                    } else {
                      // 60
                      // At least give some kind of context to the user                                                              // 61
                      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')'); // 62
                      err.context = er; // 63
                      throw err; // 64
                    } // 65
                  } // 66
                } // 67
                // 68
                handler = this._events[type]; // 69
                // 70
                if (isUndefined(handler)) // 71
                  return false; // 72
                // 73
                if (isFunction(handler)) {
                  // 74
                  switch (arguments.length) {// 75
                    // fast cases                                                                                                    // 76
                    case 1:
                      // 77
                      handler.call(this); // 78
                      break; // 79
                    case 2:
                      // 80
                      handler.call(this, arguments[1]); // 81
                      break; // 82
                    case 3:
                      // 83
                      handler.call(this, arguments[1], arguments[2]); // 84
                      break; // 85
                    // slower                                                                                                        // 86
                    default:
                      // 87
                      args = Array.prototype.slice.call(arguments, 1); // 88
                      handler.apply(this, args); // 89
                  } // 90
                } else if (isObject(handler)) {
                  // 91
                  args = Array.prototype.slice.call(arguments, 1); // 92
                  listeners = handler.slice(); // 93
                  len = listeners.length; // 94
                  for (i = 0; i < len; i++) // 95
                  listeners[i].apply(this, args); // 96
                } // 97
                // 98
                return true; // 99
              }; // 100
              // 101
              EventEmitter.prototype.addListener = function (type, listener) {
                // 102
                var m; // 103
                // 104
                if (!isFunction(listener)) // 105
                  throw TypeError('listener must be a function'); // 106
                // 107
                if (!this._events) // 108
                  this._events = {}; // 109
                // 110
                // To avoid recursion in the case that type === "newListener"! Before                                                // 111
                // adding it to the listeners, first emit "newListener".                                                             // 112
                if (this._events.newListener) // 113
                  this.emit('newListener', type, // 114
                  isFunction(listener.listener) ? // 115
                  listener.listener : listener); // 116
                // 117
                if (!this._events[type]) // 118
                  // Optimize the case of one listener. Don't need the extra array object.                                           // 119
                  this._events[type] = listener; // 120
                else if (isObject(this._events[type])) // 121
                    // If we've already got an array, just append.                                                                     // 122
                    this._events[type].push(listener); // 123
                  else // 124
                    // Adding the second element, need to change to array.                                                             // 125
                    this._events[type] = [this._events[type], listener]; // 126
                // 127
                // Check for listener leak                                                                                           // 128
                if (isObject(this._events[type]) && !this._events[type].warned) {
                  // 129
                  if (!isUndefined(this._maxListeners)) {
                    // 130
                    m = this._maxListeners; // 131
                  } else {
                    // 132
                    m = EventEmitter.defaultMaxListeners; // 133
                  } // 134
                  // 135
                  if (m && m > 0 && this._events[type].length > m) {
                    // 136
                    this._events[type].warned = true; // 137
                    console.error('(node) warning: possible EventEmitter memory ' + // 138
                    'leak detected. %d listeners added. ' + // 139
                    'Use emitter.setMaxListeners() to increase limit.', // 140
                    this._events[type].length); // 141
                    if (typeof console.trace === 'function') {
                      // 142
                      // not supported in IE 10                                                                                      // 143
                      console.trace(); // 144
                    } // 145
                  } // 146
                } // 147
                // 148
                return this; // 149
              }; // 150
              // 151
              EventEmitter.prototype.on = EventEmitter.prototype.addListener; // 152
              // 153
              EventEmitter.prototype.once = function (type, listener) {
                // 154
                if (!isFunction(listener)) // 155
                  throw TypeError('listener must be a function'); // 156
                // 157
                var fired = false; // 158
                // 159
                function g() {
                  // 160
                  this.removeListener(type, g); // 161
                  // 162
                  if (!fired) {
                    // 163
                    fired = true; // 164
                    listener.apply(this, arguments); // 165
                  } // 166
                } // 167
                // 168
                g.listener = listener; // 169
                this.on(type, g); // 170
                // 171
                return this; // 172
              }; // 173
              // 174
              // emits a 'removeListener' event iff the listener was removed                                                         // 175
              EventEmitter.prototype.removeListener = function (type, listener) {
                // 176
                var list, position, length, i; // 177
                // 178
                if (!isFunction(listener)) // 179
                  throw TypeError('listener must be a function'); // 180
                // 181
                if (!this._events || !this._events[type]) // 182
                  return this; // 183
                // 184
                list = this._events[type]; // 185
                length = list.length; // 186
                position = -1; // 187
                // 188
                if (list === listener || // 189
                isFunction(list.listener) && list.listener === listener) {
                  // 190
                  delete this._events[type]; // 191
                  if (this._events.removeListener) // 192
                    this.emit('removeListener', type, listener); // 193
                  // 194
                } else if (isObject(list)) {
                  // 195
                  for (i = length; i-- > 0;) {
                    // 196
                    if (list[i] === listener || // 197
                    list[i].listener && list[i].listener === listener) {
                      // 198
                      position = i; // 199
                      break; // 200
                    } // 201
                  } // 202
                  // 203
                  if (position < 0) // 204
                    return this; // 205
                  // 206
                  if (list.length === 1) {
                    // 207
                    list.length = 0; // 208
                    delete this._events[type]; // 209
                  } else {
                    // 210
                    list.splice(position, 1); // 211
                  } // 212
                  // 213
                  if (this._events.removeListener) // 214
                    this.emit('removeListener', type, listener); // 215
                } // 216
                // 217
                return this; // 218
              }; // 219
              // 220
              EventEmitter.prototype.removeAllListeners = function (type) {
                // 221
                var key, listeners; // 222
                // 223
                if (!this._events) // 224
                  return this; // 225
                // 226
                // not listening for removeListener, no need to emit                                                                 // 227
                if (!this._events.removeListener) {
                  // 228
                  if (arguments.length === 0) // 229
                    this._events = {}; // 230
                  else if (this._events[type]) // 231
                      delete this._events[type]; // 232
                  return this; // 233
                } // 234
                // 235
                // emit removeListener for all listeners on all events                                                               // 236
                if (arguments.length === 0) {
                  // 237
                  for (key in this._events) {
                    // 238
                    if (key === 'removeListener') continue; // 239
                    this.removeAllListeners(key); // 240
                  } // 241
                  this.removeAllListeners('removeListener'); // 242
                  this._events = {}; // 243
                  return this; // 244
                } // 245
                // 246
                listeners = this._events[type]; // 247
                // 248
                if (isFunction(listeners)) {
                  // 249
                  this.removeListener(type, listeners); // 250
                } else if (listeners) {
                  // 251
                  // LIFO order                                                                                                      // 252
                  while (listeners.length) // 253
                  this.removeListener(type, listeners[listeners.length - 1]); // 254
                } // 255
                delete this._events[type]; // 256
                // 257
                return this; // 258
              }; // 259
              // 260
              EventEmitter.prototype.listeners = function (type) {
                // 261
                var ret; // 262
                if (!this._events || !this._events[type]) // 263
                  ret = []; // 264
                else if (isFunction(this._events[type])) // 265
                    ret = [this._events[type]]; // 266
                  else // 267
                    ret = this._events[type].slice(); // 268
                return ret; // 269
              }; // 270
              // 271
              EventEmitter.prototype.listenerCount = function (type) {
                // 272
                if (this._events) {
                  // 273
                  var evlistener = this._events[type]; // 274
                  // 275
                  if (isFunction(evlistener)) // 276
                    return 1; // 277
                  else if (evlistener) // 278
                      return evlistener.length; // 279
                } // 280
                return 0; // 281
              }; // 282
              // 283
              EventEmitter.listenerCount = function (emitter, type) {
                // 284
                return emitter.listenerCount(type); // 285
              }; // 286
              // 287
              function isFunction(arg) {
                // 288
                return typeof arg === 'function'; // 289
              } // 290
              // 291
              function isNumber(arg) {
                // 292
                return typeof arg === 'number'; // 293
              } // 294
              // 295
              function isObject(arg) {
                // 296
                return typeof arg === 'object' && arg !== null; // 297
              } // 298
              // 299
              function isUndefined(arg) {
                // 300
                return arg === void 0; // 301
              } // 302
              // 303
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } }, "babel-runtime": { "regenerator": { "index.js": function (_require21, _exports18, _module15) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/regenerator/index.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module15.exports = _require21("regenerator-runtime"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "helpers": { "typeof.js": function (_require22, _exports19) {
            // 1
            // 2
            _exports19.__esModule = true; // 3
            // 4
            var _iterator = _require22("../core-js/symbol/iterator"); // 5
            // 6
            var _iterator2 = _interopRequireDefault(_iterator); // 7
            // 8
            var _symbol = _require22("../core-js/symbol"); // 9
            // 10
            var _symbol2 = _interopRequireDefault(_symbol); // 11
            // 12
            var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
              return typeof obj;
            } : function (obj) {
              return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
            };
            // 14
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 15
            // 16
            _exports19.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
              return typeof obj === "undefined" ? "undefined" : _typeof(obj); // 18
            } : function (obj) {
              // 19
              return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
            }; // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "classCallCheck.js": function (_require23, _exports20) {
            // 1
            // 2
            _exports20.__esModule = true; // 3
            // 4
            _exports20.default = function (instance, Constructor) {
              // 5
              if (!(instance instanceof Constructor)) {
                // 6
                throw new TypeError("Cannot call a class as a function"); // 7
              } // 8
            }; // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "possibleConstructorReturn.js": function (_require24, _exports21) {
            // 1
            // 2
            _exports21.__esModule = true; // 3
            // 4
            var _typeof2 = _require24("../helpers/typeof"); // 5
            // 6
            var _typeof3 = _interopRequireDefault(_typeof2); // 7
            // 8
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 9
            // 10
            _exports21.default = function (self, call) {
              // 11
              if (!self) {
                // 12
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); // 13
              } // 14
              // 15
              return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
            }; // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "inherits.js": function (_require25, _exports22) {
            // 1
            // 2
            _exports22.__esModule = true; // 3
            // 4
            var _setPrototypeOf = _require25("../core-js/object/set-prototype-of"); // 5
            // 6
            var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf); // 7
            // 8
            var _create = _require25("../core-js/object/create"); // 9
            // 10
            var _create2 = _interopRequireDefault(_create); // 11
            // 12
            var _typeof2 = _require25("../helpers/typeof"); // 13
            // 14
            var _typeof3 = _interopRequireDefault(_typeof2); // 15
            // 16
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 17
            // 18
            _exports22.default = function (subClass, superClass) {
              // 19
              if (typeof superClass !== "function" && superClass !== null) {
                // 20
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
              } // 22
              // 23
              subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, { // 24
                constructor: { // 25
                  value: subClass, // 26
                  enumerable: false, // 27
                  writable: true, // 28
                  configurable: true // 29
                  // 30
                } }); // 31
              if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
            }; // 33
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "toConsumableArray.js": function (_require26, _exports23) {
            // 1
            // 2
            _exports23.__esModule = true; // 3
            // 4
            var _from = _require26("../core-js/array/from"); // 5
            // 6
            var _from2 = _interopRequireDefault(_from); // 7
            // 8
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            } // 9
            // 10
            _exports23.default = function (arr) {
              // 11
              if (Array.isArray(arr)) {
                // 12
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  // 13
                  arr2[i] = arr[i]; // 14
                } // 15
                // 16
                return arr2; // 17
              } else {
                // 18
                return (0, _from2.default)(arr); // 19
              } // 20
            }; // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "core-js": { "symbol": { "iterator.js": function (_require27, _exports24, _module16) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module16.exports = { "default": _require27("core-js/library/fn/symbol/iterator"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "symbol.js": function (_require28, _exports25, _module17) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/babel-runtime/core-js/symbol.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module17.exports = { "default": _require28("core-js/library/fn/symbol"), __esModule: true }; // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "object": { "set-prototype-of.js": function (_require29, _exports26, _module18) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module18.exports = { "default": _require29("core-js/library/fn/object/set-prototype-of"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "create.js": function (_require30, _exports27, _module19) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/object/create.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module19.exports = { "default": _require30("core-js/library/fn/object/create"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "array": { "from.js": function (_require31, _exports28, _module20) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/babel-runtime/core-js/array/from.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module20.exports = { "default": _require31("core-js/library/fn/array/from"), __esModule: true }; // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } }, "regenerator-runtime": { "package.json": function (_require32, _exports29, _module21) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/regenerator-runtime/package.json                                                                       //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _exports29.name = "regenerator-runtime"; // 1
          _exports29.version = "0.11.0"; // 2
          _exports29.main = "runtime-module.js"; // 3
          // 4
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "runtime-module.js": function (_require33, _exports30, _module22) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/regenerator-runtime/runtime-module.js                                                                  //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          // This method of obtaining a reference to the global object needs to be                                               // 1
          // kept identical to the way it is obtained in runtime.js                                                              // 2
          var g = function () {
            return this;
          }() || Function("return this")(); // 3
          // 4
          // Use `getOwnPropertyNames` because not all browsers support calling                                                  // 5
          // `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 6
          var hadRuntime = g.regeneratorRuntime && // 7
          Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0; // 8
          // 9
          // Save the old regeneratorRuntime in case it needs to be restored later.                                              // 10
          var oldRuntime = hadRuntime && g.regeneratorRuntime; // 11
          // 12
          // Force reevalutation of runtime.js.                                                                                  // 13
          g.regeneratorRuntime = undefined; // 14
          // 15
          _module22.exports = _require33("./runtime"); // 16
          // 17
          if (hadRuntime) {
            // 18
            // Restore the original runtime.                                                                                     // 19
            g.regeneratorRuntime = oldRuntime; // 20
          } else {
            // 21
            // Remove the global property added by runtime.js.                                                                   // 22
            try {
              // 23
              delete g.regeneratorRuntime; // 24
            } catch (e) {
              // 25
              g.regeneratorRuntime = undefined; // 26
            } // 27
          } // 28
          // 29
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }, "runtime.js": function (_require34, _exports31, _module23) {

          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                                     //
          // node_modules/regenerator-runtime/runtime.js                                                                         //
          //                                                                                                                     //
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          //
          /**                                                                                                                    // 1
           * Copyright (c) 2014, Facebook, Inc.                                                                                  // 2
           * All rights reserved.                                                                                                // 3
           *                                                                                                                     // 4
           * This source code is licensed under the BSD-style license found in the                                               // 5
           * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                                 // 6
           * additional grant of patent rights can be found in the PATENTS file in                                               // 7
           * the same directory.                                                                                                 // 8
           */ // 9
          // 10
          !function (global) {
            // 12
            // 13
            var Op = Object.prototype; // 14
            var hasOwn = Op.hasOwnProperty; // 15
            var undefined; // More compressible than void 0.                                                                     // 16
            var $Symbol = typeof Symbol === "function" ? Symbol : {}; // 17
            var iteratorSymbol = $Symbol.iterator || "@@iterator"; // 18
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator"; // 19
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; // 20
            // 21
            var inModule = typeof _module23 === "object"; // 22
            var runtime = global.regeneratorRuntime; // 23
            if (runtime) {
              // 24
              if (inModule) {
                // 25
                // If regeneratorRuntime is defined globally and we're in a module,                                              // 26
                // make the exports object identical to regeneratorRuntime.                                                      // 27
                _module23.exports = runtime; // 28
              } // 29
              // Don't bother evaluating the rest of this file if the runtime was                                                // 30
              // already defined globally.                                                                                       // 31
              return; // 32
            } // 33
            // 34
            // Define the runtime globally (as expected by generated code) as either                                             // 35
            // module.exports (if we're in a module) or a new, empty object.                                                     // 36
            runtime = global.regeneratorRuntime = inModule ? _module23.exports : {}; // 37
            // 38
            function wrap(innerFn, outerFn, self, tryLocsList) {
              // 39
              // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 40
              var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator; // 41
              var generator = Object.create(protoGenerator.prototype); // 42
              var context = new Context(tryLocsList || []); // 43
              // 44
              // The ._invoke method unifies the implementations of the .next,                                                   // 45
              // .throw, and .return methods.                                                                                    // 46
              generator._invoke = makeInvokeMethod(innerFn, self, context); // 47
              // 48
              return generator; // 49
            } // 50
            runtime.wrap = wrap; // 51
            // 52
            // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 53
            // record like context.tryEntries[i].completion. This interface could                                                // 54
            // have been (and was previously) designed to take a closure to be                                                   // 55
            // invoked without arguments, but in all the cases we care about we                                                  // 56
            // already have an existing method we want to call, so there's no need                                               // 57
            // to create a new function object. We can even get away with assuming                                               // 58
            // the method takes exactly one argument, since that happens to be true                                              // 59
            // in every case, so we don't have to touch the arguments object. The                                                // 60
            // only additional allocation required is the completion record, which                                               // 61
            // has a stable shape and so hopefully should be cheap to allocate.                                                  // 62
            function tryCatch(fn, obj, arg) {
              // 63
              try {
                // 64
                return { type: "normal", arg: fn.call(obj, arg) }; // 65
              } catch (err) {
                // 66
                return { type: "throw", arg: err }; // 67
              } // 68
            } // 69
            // 70
            var GenStateSuspendedStart = "suspendedStart"; // 71
            var GenStateSuspendedYield = "suspendedYield"; // 72
            var GenStateExecuting = "executing"; // 73
            var GenStateCompleted = "completed"; // 74
            // 75
            // Returning this object from the innerFn has the same effect as                                                     // 76
            // breaking out of the dispatch switch statement.                                                                    // 77
            var ContinueSentinel = {}; // 78
            // 79
            // Dummy constructor functions that we use as the .constructor and                                                   // 80
            // .constructor.prototype properties for functions that return Generator                                             // 81
            // objects. For full spec compliance, you may wish to configure your                                                 // 82
            // minifier not to mangle the names of these two functions.                                                          // 83
            function Generator() {} // 84
            function GeneratorFunction() {} // 85
            function GeneratorFunctionPrototype() {} // 86
            // 87
            // This is a polyfill for %IteratorPrototype% for environments that                                                  // 88
            // don't natively support it.                                                                                        // 89
            var IteratorPrototype = {}; // 90
            IteratorPrototype[iteratorSymbol] = function () {
              // 91
              return this; // 92
            }; // 93
            // 94
            var getProto = Object.getPrototypeOf; // 95
            var NativeIteratorPrototype = getProto && getProto(getProto(values([]))); // 96
            if (NativeIteratorPrototype && // 97
            NativeIteratorPrototype !== Op && // 98
            hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
              // 99
              // This environment has a native %IteratorPrototype%; use it instead                                               // 100
              // of the polyfill.                                                                                                // 101
              IteratorPrototype = NativeIteratorPrototype; // 102
            } // 103
            // 104
            var Gp = GeneratorFunctionPrototype.prototype = // 105
            Generator.prototype = Object.create(IteratorPrototype); // 106
            GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype; // 107
            GeneratorFunctionPrototype.constructor = GeneratorFunction; // 108
            GeneratorFunctionPrototype[toStringTagSymbol] = // 109
            GeneratorFunction.displayName = "GeneratorFunction"; // 110
            // 111
            // Helper for defining the .next, .throw, and .return methods of the                                                 // 112
            // Iterator interface in terms of a single ._invoke method.                                                          // 113
            function defineIteratorMethods(prototype) {
              // 114
              ["next", "throw", "return"].forEach(function (method) {
                // 115
                prototype[method] = function (arg) {
                  // 116
                  return this._invoke(method, arg); // 117
                }; // 118
              }); // 119
            } // 120
            // 121
            runtime.isGeneratorFunction = function (genFun) {
              // 122
              var ctor = typeof genFun === "function" && genFun.constructor; // 123
              return ctor // 124
              ? ctor === GeneratorFunction || // 125
              // For the native GeneratorFunction constructor, the best we can                                               // 126
              // do is to check its .name property.                                                                          // 127
              (ctor.displayName || ctor.name) === "GeneratorFunction" // 128
              : false; // 129
            }; // 130
            // 131
            runtime.mark = function (genFun) {
              // 132
              if (Object.setPrototypeOf) {
                // 133
                Object.setPrototypeOf(genFun, GeneratorFunctionPrototype); // 134
              } else {
                // 135
                genFun.__proto__ = GeneratorFunctionPrototype; // 136
                if (!(toStringTagSymbol in genFun)) {
                  // 137
                  genFun[toStringTagSymbol] = "GeneratorFunction"; // 138
                } // 139
              } // 140
              genFun.prototype = Object.create(Gp); // 141
              return genFun; // 142
            }; // 143
            // 144
            // Within the body of any async function, `await x` is transformed to                                                // 145
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 146
            // `hasOwn.call(value, "__await")` to determine if the yielded value is                                              // 147
            // meant to be awaited.                                                                                              // 148
            runtime.awrap = function (arg) {
              // 149
              return { __await: arg }; // 150
            }; // 151
            // 152
            function AsyncIterator(generator) {
              // 153
              function invoke(method, arg, resolve, reject) {
                // 154
                var record = tryCatch(generator[method], generator, arg); // 155
                if (record.type === "throw") {
                  // 156
                  reject(record.arg); // 157
                } else {
                  // 158
                  var result = record.arg; // 159
                  var value = result.value; // 160
                  if (value && // 161
                  typeof value === "object" && // 162
                  hasOwn.call(value, "__await")) {
                    // 163
                    return Promise.resolve(value.__await).then(function (value) {
                      // 164
                      invoke("next", value, resolve, reject); // 165
                    }, function (err) {
                      // 166
                      invoke("throw", err, resolve, reject); // 167
                    }); // 168
                  } // 169
                  // 170
                  return Promise.resolve(value).then(function (unwrapped) {
                    // 171
                    // When a yielded Promise is resolved, its final value becomes                                               // 172
                    // the .value of the Promise<{value,done}> result for the                                                    // 173
                    // current iteration. If the Promise is rejected, however, the                                               // 174
                    // result for this iteration will be rejected with the same                                                  // 175
                    // reason. Note that rejections of yielded Promises are not                                                  // 176
                    // thrown back into the generator function, as is the case                                                   // 177
                    // when an awaited Promise is rejected. This difference in                                                   // 178
                    // behavior between yield and await is important, because it                                                 // 179
                    // allows the consumer to decide what to do with the yielded                                                 // 180
                    // rejection (swallow it and continue, manually .throw it back                                               // 181
                    // into the generator, abandon iteration, whatever). With                                                    // 182
                    // await, by contrast, there is no opportunity to examine the                                                // 183
                    // rejection reason outside the generator function, so the                                                   // 184
                    // only option is to throw it from the await expression, and                                                 // 185
                    // let the generator function handle the exception.                                                          // 186
                    result.value = unwrapped; // 187
                    resolve(result); // 188
                  }, reject); // 189
                } // 190
              } // 191
              // 192
              var previousPromise; // 193
              // 194
              function enqueue(method, arg) {
                // 195
                function callInvokeWithMethodAndArg() {
                  // 196
                  return new Promise(function (resolve, reject) {
                    // 197
                    invoke(method, arg, resolve, reject); // 198
                  }); // 199
                } // 200
                // 201
                return previousPromise = // 202
                // If enqueue has been called before, then we want to wait until                                               // 203
                // all previous Promises have been resolved before calling invoke,                                             // 204
                // so that results are always delivered in the correct order. If                                               // 205
                // enqueue has not been called before, then it is important to                                                 // 206
                // call invoke immediately, without waiting on a callback to fire,                                             // 207
                // so that the async generator function has the opportunity to do                                              // 208
                // any necessary setup in a predictable way. This predictability                                               // 209
                // is why the Promise constructor synchronously invokes its                                                    // 210
                // executor callback, and why async functions synchronously                                                    // 211
                // execute code before the first await. Since we implement simple                                              // 212
                // async functions in terms of async generators, it is especially                                              // 213
                // important to get this right, even though it requires care.                                                  // 214
                previousPromise ? previousPromise.then( // 215
                callInvokeWithMethodAndArg, // 216
                // Avoid propagating failures to Promises returned by later                                                  // 217
                // invocations of the iterator.                                                                              // 218
                callInvokeWithMethodAndArg // 219
                ) : callInvokeWithMethodAndArg(); // 220
              } // 221
              // 222
              // Define the unified helper method that is used to implement .next,                                               // 223
              // .throw, and .return (see defineIteratorMethods).                                                                // 224
              this._invoke = enqueue; // 225
            } // 226
            // 227
            defineIteratorMethods(AsyncIterator.prototype); // 228
            AsyncIterator.prototype[asyncIteratorSymbol] = function () {
              // 229
              return this; // 230
            }; // 231
            runtime.AsyncIterator = AsyncIterator; // 232
            // 233
            // Note that simple async functions are implemented on top of                                                        // 234
            // AsyncIterator objects; they just return a Promise for the value of                                                // 235
            // the final result produced by the iterator.                                                                        // 236
            runtime.async = function (innerFn, outerFn, self, tryLocsList) {
              // 237
              var iter = new AsyncIterator( // 238
              wrap(innerFn, outerFn, self, tryLocsList) // 239
              ); // 240
              // 241
              return runtime.isGeneratorFunction(outerFn) // 242
              ? iter // If outerFn is a generator, return the full iterator.                                                   // 243
              : iter.next().then(function (result) {
                // 244
                return result.done ? result.value : iter.next(); // 245
              }); // 246
            }; // 247
            // 248
            function makeInvokeMethod(innerFn, self, context) {
              // 249
              var state = GenStateSuspendedStart; // 250
              // 251
              return function invoke(method, arg) {
                // 252
                if (state === GenStateExecuting) {
                  // 253
                  throw new Error("Generator is already running"); // 254
                } // 255
                // 256
                if (state === GenStateCompleted) {
                  // 257
                  if (method === "throw") {
                    // 258
                    throw arg; // 259
                  } // 260
                  // 261
                  // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 262
                  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 263
                  return doneResult(); // 264
                } // 265
                // 266
                context.method = method; // 267
                context.arg = arg; // 268
                // 269
                while (true) {
                  // 270
                  var delegate = context.delegate; // 271
                  if (delegate) {
                    // 272
                    var delegateResult = maybeInvokeDelegate(delegate, context); // 273
                    if (delegateResult) {
                      // 274
                      if (delegateResult === ContinueSentinel) continue; // 275
                      return delegateResult; // 276
                    } // 277
                  } // 278
                  // 279
                  if (context.method === "next") {
                    // 280
                    // Setting context._sent for legacy support of Babel's                                                       // 281
                    // function.sent implementation.                                                                             // 282
                    context.sent = context._sent = context.arg; // 283
                    // 284
                  } else if (context.method === "throw") {
                    // 285
                    if (state === GenStateSuspendedStart) {
                      // 286
                      state = GenStateCompleted; // 287
                      throw context.arg; // 288
                    } // 289
                    // 290
                    context.dispatchException(context.arg); // 291
                    // 292
                  } else if (context.method === "return") {
                    // 293
                    context.abrupt("return", context.arg); // 294
                  } // 295
                  // 296
                  state = GenStateExecuting; // 297
                  // 298
                  var record = tryCatch(innerFn, self, context); // 299
                  if (record.type === "normal") {
                    // 300
                    // If an exception is thrown from innerFn, we leave state ===                                                // 301
                    // GenStateExecuting and loop back for another invocation.                                                   // 302
                    state = context.done // 303
                    ? GenStateCompleted // 304
                    : GenStateSuspendedYield; // 305
                    // 306
                    if (record.arg === ContinueSentinel) {
                      // 307
                      continue; // 308
                    } // 309
                    // 310
                    return { // 311
                      value: record.arg, // 312
                      done: context.done // 313
                    }; // 314
                    // 315
                  } else if (record.type === "throw") {
                    // 316
                    state = GenStateCompleted; // 317
                    // Dispatch the exception by looping back around to the                                                      // 318
                    // context.dispatchException(context.arg) call above.                                                        // 319
                    context.method = "throw"; // 320
                    context.arg = record.arg; // 321
                  } // 322
                } // 323
              }; // 324
            } // 325
            // 326
            // Call delegate.iterator[context.method](context.arg) and handle the                                                // 327
            // result, either by returning a { value, done } result from the                                                     // 328
            // delegate iterator, or by modifying context.method and context.arg,                                                // 329
            // setting context.delegate to null, and returning the ContinueSentinel.                                             // 330
            function maybeInvokeDelegate(delegate, context) {
              // 331
              var method = delegate.iterator[context.method]; // 332
              if (method === undefined) {
                // 333
                // A .throw or .return when the delegate iterator has no .throw                                                  // 334
                // method always terminates the yield* loop.                                                                     // 335
                context.delegate = null; // 336
                // 337
                if (context.method === "throw") {
                  // 338
                  if (delegate.iterator.return) {
                    // 339
                    // If the delegate iterator has a return method, give it a                                                   // 340
                    // chance to clean up.                                                                                       // 341
                    context.method = "return"; // 342
                    context.arg = undefined; // 343
                    maybeInvokeDelegate(delegate, context); // 344
                    // 345
                    if (context.method === "throw") {
                      // 346
                      // If maybeInvokeDelegate(context) changed context.method from                                             // 347
                      // "return" to "throw", let that override the TypeError below.                                             // 348
                      return ContinueSentinel; // 349
                    } // 350
                  } // 351
                  // 352
                  context.method = "throw"; // 353
                  context.arg = new TypeError( // 354
                  "The iterator does not provide a 'throw' method"); // 355
                } // 356
                // 357
                return ContinueSentinel; // 358
              } // 359
              // 360
              var record = tryCatch(method, delegate.iterator, context.arg); // 361
              // 362
              if (record.type === "throw") {
                // 363
                context.method = "throw"; // 364
                context.arg = record.arg; // 365
                context.delegate = null; // 366
                return ContinueSentinel; // 367
              } // 368
              // 369
              var info = record.arg; // 370
              // 371
              if (!info) {
                // 372
                context.method = "throw"; // 373
                context.arg = new TypeError("iterator result is not an object"); // 374
                context.delegate = null; // 375
                return ContinueSentinel; // 376
              } // 377
              // 378
              if (info.done) {
                // 379
                // Assign the result of the finished delegate to the temporary                                                   // 380
                // variable specified by delegate.resultName (see delegateYield).                                                // 381
                context[delegate.resultName] = info.value; // 382
                // 383
                // Resume execution at the desired location (see delegateYield).                                                 // 384
                context.next = delegate.nextLoc; // 385
                // 386
                // If context.method was "throw" but the delegate handled the                                                    // 387
                // exception, let the outer generator proceed normally. If                                                       // 388
                // context.method was "next", forget context.arg since it has been                                               // 389
                // "consumed" by the delegate iterator. If context.method was                                                    // 390
                // "return", allow the original .return call to continue in the                                                  // 391
                // outer generator.                                                                                              // 392
                if (context.method !== "return") {
                  // 393
                  context.method = "next"; // 394
                  context.arg = undefined; // 395
                } // 396
                // 397
              } else {
                // 398
                // Re-yield the result returned by the delegate method.                                                          // 399
                return info; // 400
              } // 401
              // 402
              // The delegate iterator is finished, so forget it and continue with                                               // 403
              // the outer generator.                                                                                            // 404
              context.delegate = null; // 405
              return ContinueSentinel; // 406
            } // 407
            // 408
            // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 409
            // unified ._invoke helper method.                                                                                   // 410
            defineIteratorMethods(Gp); // 411
            // 412
            Gp[toStringTagSymbol] = "Generator"; // 413
            // 414
            // A Generator should always return itself as the iterator object when the                                           // 415
            // @@iterator function is called on it. Some browsers' implementations of the                                        // 416
            // iterator prototype chain incorrectly implement this, causing the Generator                                        // 417
            // object to not be returned from this call. This ensures that doesn't happen.                                       // 418
            // See https://github.com/facebook/regenerator/issues/274 for more details.                                          // 419
            Gp[iteratorSymbol] = function () {
              // 420
              return this; // 421
            }; // 422
            // 423
            Gp.toString = function () {
              // 424
              return "[object Generator]"; // 425
            }; // 426
            // 427
            function pushTryEntry(locs) {
              // 428
              var entry = { tryLoc: locs[0] }; // 429
              // 430
              if (1 in locs) {
                // 431
                entry.catchLoc = locs[1]; // 432
              } // 433
              // 434
              if (2 in locs) {
                // 435
                entry.finallyLoc = locs[2]; // 436
                entry.afterLoc = locs[3]; // 437
              } // 438
              // 439
              this.tryEntries.push(entry); // 440
            } // 441
            // 442
            function resetTryEntry(entry) {
              // 443
              var record = entry.completion || {}; // 444
              record.type = "normal"; // 445
              delete record.arg; // 446
              entry.completion = record; // 447
            } // 448
            // 449
            function Context(tryLocsList) {
              // 450
              // The root entry object (effectively a try statement without a catch                                              // 451
              // or a finally block) gives us a place to store values thrown from                                                // 452
              // locations where there is no enclosing try statement.                                                            // 453
              this.tryEntries = [{ tryLoc: "root" }]; // 454
              tryLocsList.forEach(pushTryEntry, this); // 455
              this.reset(true); // 456
            } // 457
            // 458
            runtime.keys = function (object) {
              // 459
              var keys = []; // 460
              for (var key in object) {
                // 461
                keys.push(key); // 462
              } // 463
              keys.reverse(); // 464
              // 465
              // Rather than returning an object with a next method, we keep                                                     // 466
              // things simple and return the next function itself.                                                              // 467
              return function next() {
                // 468
                while (keys.length) {
                  // 469
                  var key = keys.pop(); // 470
                  if (key in object) {
                    // 471
                    next.value = key; // 472
                    next.done = false; // 473
                    return next; // 474
                  } // 475
                } // 476
                // 477
                // To avoid creating an additional object, we just hang the .value                                               // 478
                // and .done properties off the next function object itself. This                                                // 479
                // also ensures that the minifier will not anonymize the function.                                               // 480
                next.done = true; // 481
                return next; // 482
              }; // 483
            }; // 484
            // 485
            function values(iterable) {
              // 486
              if (iterable) {
                // 487
                var iteratorMethod = iterable[iteratorSymbol]; // 488
                if (iteratorMethod) {
                  // 489
                  return iteratorMethod.call(iterable); // 490
                } // 491
                // 492
                if (typeof iterable.next === "function") {
                  // 493
                  return iterable; // 494
                } // 495
                // 496
                if (!isNaN(iterable.length)) {
                  // 497
                  var i = -1,
                      next = function next() {
                    // 498
                    while (++i < iterable.length) {
                      // 499
                      if (hasOwn.call(iterable, i)) {
                        // 500
                        next.value = iterable[i]; // 501
                        next.done = false; // 502
                        return next; // 503
                      } // 504
                    } // 505
                    // 506
                    next.value = undefined; // 507
                    next.done = true; // 508
                    // 509
                    return next; // 510
                  }; // 511
                  // 512
                  return next.next = next; // 513
                } // 514
              } // 515
              // 516
              // Return an iterator with no values.                                                                              // 517
              return { next: doneResult }; // 518
            } // 519
            runtime.values = values; // 520
            // 521
            function doneResult() {
              // 522
              return { value: undefined, done: true }; // 523
            } // 524
            // 525
            Context.prototype = { // 526
              constructor: Context, // 527
              // 528
              reset: function (skipTempReset) {
                // 529
                this.prev = 0; // 530
                this.next = 0; // 531
                // Resetting context._sent for legacy support of Babel's                                                         // 532
                // function.sent implementation.                                                                                 // 533
                this.sent = this._sent = undefined; // 534
                this.done = false; // 535
                this.delegate = null; // 536
                // 537
                this.method = "next"; // 538
                this.arg = undefined; // 539
                // 540
                this.tryEntries.forEach(resetTryEntry); // 541
                // 542
                if (!skipTempReset) {
                  // 543
                  for (var name in this) {
                    // 544
                    // Not sure about the optimal order of these conditions:                                                     // 545
                    if (name.charAt(0) === "t" && // 546
                    hasOwn.call(this, name) && // 547
                    !isNaN(+name.slice(1))) {
                      // 548
                      this[name] = undefined; // 549
                    } // 550
                  } // 551
                } // 552
              }, // 553
              // 554
              stop: function () {
                // 555
                this.done = true; // 556
                // 557
                var rootEntry = this.tryEntries[0]; // 558
                var rootRecord = rootEntry.completion; // 559
                if (rootRecord.type === "throw") {
                  // 560
                  throw rootRecord.arg; // 561
                } // 562
                // 563
                return this.rval; // 564
              }, // 565
              // 566
              dispatchException: function (exception) {
                // 567
                if (this.done) {
                  // 568
                  throw exception; // 569
                } // 570
                // 571
                var context = this; // 572
                function handle(loc, caught) {
                  // 573
                  record.type = "throw"; // 574
                  record.arg = exception; // 575
                  context.next = loc; // 576
                  // 577
                  if (caught) {
                    // 578
                    // If the dispatched exception was caught by a catch block,                                                  // 579
                    // then let that catch block handle the exception normally.                                                  // 580
                    context.method = "next"; // 581
                    context.arg = undefined; // 582
                  } // 583
                  // 584
                  return !!caught; // 585
                } // 586
                // 587
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 588
                  var entry = this.tryEntries[i]; // 589
                  var record = entry.completion; // 590
                  // 591
                  if (entry.tryLoc === "root") {
                    // 592
                    // Exception thrown outside of any try block that could handle                                               // 593
                    // it, so set the completion value of the entire function to                                                 // 594
                    // throw the exception.                                                                                      // 595
                    return handle("end"); // 596
                  } // 597
                  // 598
                  if (entry.tryLoc <= this.prev) {
                    // 599
                    var hasCatch = hasOwn.call(entry, "catchLoc"); // 600
                    var hasFinally = hasOwn.call(entry, "finallyLoc"); // 601
                    // 602
                    if (hasCatch && hasFinally) {
                      // 603
                      if (this.prev < entry.catchLoc) {
                        // 604
                        return handle(entry.catchLoc, true); // 605
                      } else if (this.prev < entry.finallyLoc) {
                        // 606
                        return handle(entry.finallyLoc); // 607
                      } // 608
                      // 609
                    } else if (hasCatch) {
                      // 610
                      if (this.prev < entry.catchLoc) {
                        // 611
                        return handle(entry.catchLoc, true); // 612
                      } // 613
                      // 614
                    } else if (hasFinally) {
                      // 615
                      if (this.prev < entry.finallyLoc) {
                        // 616
                        return handle(entry.finallyLoc); // 617
                      } // 618
                      // 619
                    } else {
                      // 620
                      throw new Error("try statement without catch or finally"); // 621
                    } // 622
                  } // 623
                } // 624
              }, // 625
              // 626
              abrupt: function (type, arg) {
                // 627
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 628
                  var entry = this.tryEntries[i]; // 629
                  if (entry.tryLoc <= this.prev && // 630
                  hasOwn.call(entry, "finallyLoc") && // 631
                  this.prev < entry.finallyLoc) {
                    // 632
                    var finallyEntry = entry; // 633
                    break; // 634
                  } // 635
                } // 636
                // 637
                if (finallyEntry && ( // 638
                type === "break" || // 639
                type === "continue") && // 640
                finallyEntry.tryLoc <= arg && // 641
                arg <= finallyEntry.finallyLoc) {
                  // 642
                  // Ignore the finally entry if control is not jumping to a                                                     // 643
                  // location outside the try/catch block.                                                                       // 644
                  finallyEntry = null; // 645
                } // 646
                // 647
                var record = finallyEntry ? finallyEntry.completion : {}; // 648
                record.type = type; // 649
                record.arg = arg; // 650
                // 651
                if (finallyEntry) {
                  // 652
                  this.method = "next"; // 653
                  this.next = finallyEntry.finallyLoc; // 654
                  return ContinueSentinel; // 655
                } // 656
                // 657
                return this.complete(record); // 658
              }, // 659
              // 660
              complete: function (record, afterLoc) {
                // 661
                if (record.type === "throw") {
                  // 662
                  throw record.arg; // 663
                } // 664
                // 665
                if (record.type === "break" || // 666
                record.type === "continue") {
                  // 667
                  this.next = record.arg; // 668
                } else if (record.type === "return") {
                  // 669
                  this.rval = this.arg = record.arg; // 670
                  this.method = "return"; // 671
                  this.next = "end"; // 672
                } else if (record.type === "normal" && afterLoc) {
                  // 673
                  this.next = afterLoc; // 674
                } // 675
                // 676
                return ContinueSentinel; // 677
              }, // 678
              // 679
              finish: function (finallyLoc) {
                // 680
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 681
                  var entry = this.tryEntries[i]; // 682
                  if (entry.finallyLoc === finallyLoc) {
                    // 683
                    this.complete(entry.completion, entry.afterLoc); // 684
                    resetTryEntry(entry); // 685
                    return ContinueSentinel; // 686
                  } // 687
                } // 688
              }, // 689
              // 690
              "catch": function (tryLoc) {
                // 691
                for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                  // 692
                  var entry = this.tryEntries[i]; // 693
                  if (entry.tryLoc === tryLoc) {
                    // 694
                    var record = entry.completion; // 695
                    if (record.type === "throw") {
                      // 696
                      var thrown = record.arg; // 697
                      resetTryEntry(entry); // 698
                    } // 699
                    return thrown; // 700
                  } // 701
                } // 702
                // 703
                // The context.catch method must only be called with a location                                                  // 704
                // argument that corresponds to a known catch block.                                                             // 705
                throw new Error("illegal catch attempt"); // 706
              }, // 707
              // 708
              delegateYield: function (iterable, resultName, nextLoc) {
                // 709
                this.delegate = { // 710
                  iterator: values(iterable), // 711
                  resultName: resultName, // 712
                  nextLoc: nextLoc // 713
                }; // 714
                // 715
                if (this.method === "next") {
                  // 716
                  // Deliberately forget the last sent value so that we don't                                                    // 717
                  // accidentally pass it on to the delegate.                                                                    // 718
                  this.arg = undefined; // 719
                } // 720
                // 721
                return ContinueSentinel; // 722
              } // 723
            }; // 724
          }( // 725
          // In sloppy mode, unbound `this` refers to the global object, fallback to                                           // 726
          // Function constructor if we're in global strict mode. That is sadly a form                                         // 727
          // of indirect eval which violates Content Security Policy.                                                          // 728
          function () {
            return this;
          }() || Function("return this")() // 729
          ); // 730
          // 731
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        } }, "core-js": { "modules": { "es6.symbol.js": function (_require35) {
            // 1
            // ECMAScript 6 symbols shim                                                                                           // 2
            var global = _require35('./_global'); // 3
            var has = _require35('./_has'); // 4
            var DESCRIPTORS = _require35('./_descriptors'); // 5
            var $export = _require35('./_export'); // 6
            var redefine = _require35('./_redefine'); // 7
            var META = _require35('./_meta').KEY; // 8
            var $fails = _require35('./_fails'); // 9
            var shared = _require35('./_shared'); // 10
            var setToStringTag = _require35('./_set-to-string-tag'); // 11
            var uid = _require35('./_uid'); // 12
            var wks = _require35('./_wks'); // 13
            var wksExt = _require35('./_wks-ext'); // 14
            var wksDefine = _require35('./_wks-define'); // 15
            var enumKeys = _require35('./_enum-keys'); // 16
            var isArray = _require35('./_is-array'); // 17
            var anObject = _require35('./_an-object'); // 18
            var toIObject = _require35('./_to-iobject'); // 19
            var toPrimitive = _require35('./_to-primitive'); // 20
            var createDesc = _require35('./_property-desc'); // 21
            var _create = _require35('./_object-create'); // 22
            var gOPNExt = _require35('./_object-gopn-ext'); // 23
            var $GOPD = _require35('./_object-gopd'); // 24
            var $DP = _require35('./_object-dp'); // 25
            var $keys = _require35('./_object-keys'); // 26
            var gOPD = $GOPD.f; // 27
            var dP = $DP.f; // 28
            var gOPN = gOPNExt.f; // 29
            var $Symbol = global.Symbol; // 30
            var $JSON = global.JSON; // 31
            var _stringify = $JSON && $JSON.stringify; // 32
            var PROTOTYPE = 'prototype'; // 33
            var HIDDEN = wks('_hidden'); // 34
            var TO_PRIMITIVE = wks('toPrimitive'); // 35
            var isEnum = {}.propertyIsEnumerable; // 36
            var SymbolRegistry = shared('symbol-registry'); // 37
            var AllSymbols = shared('symbols'); // 38
            var OPSymbols = shared('op-symbols'); // 39
            var ObjectProto = Object[PROTOTYPE]; // 40
            var USE_NATIVE = typeof $Symbol == 'function'; // 41
            var QObject = global.QObject; // 42
            // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 43
            var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // 44
            // 45
            // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 46
            var setSymbolDesc = DESCRIPTORS && $fails(function () {
              // 47
              return _create(dP({}, 'a', { // 48
                get: function () {
                  return dP(this, 'a', { value: 7 }).a;
                } // 49
              })).a != 7; // 50
            }) ? function (it, key, D) {
              // 51
              var protoDesc = gOPD(ObjectProto, key); // 52
              if (protoDesc) delete ObjectProto[key]; // 53
              dP(it, key, D); // 54
              if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc); // 55
            } : dP; // 56
            // 57
            var wrap = function (tag) {
              // 58
              var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]); // 59
              sym._k = tag; // 60
              return sym; // 61
            }; // 62
            // 63
            var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
              // 64
              return typeof it == 'symbol'; // 65
            } : function (it) {
              // 66
              return it instanceof $Symbol; // 67
            }; // 68
            // 69
            var $defineProperty = function defineProperty(it, key, D) {
              // 70
              if (it === ObjectProto) $defineProperty(OPSymbols, key, D); // 71
              anObject(it); // 72
              key = toPrimitive(key, true); // 73
              anObject(D); // 74
              if (has(AllSymbols, key)) {
                // 75
                if (!D.enumerable) {
                  // 76
                  if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {})); // 77
                  it[HIDDEN][key] = true; // 78
                } else {
                  // 79
                  if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false; // 80
                  D = _create(D, { enumerable: createDesc(0, false) }); // 81
                }return setSymbolDesc(it, key, D); // 82
              }return dP(it, key, D); // 83
            }; // 84
            var $defineProperties = function defineProperties(it, P) {
              // 85
              anObject(it); // 86
              var keys = enumKeys(P = toIObject(P)); // 87
              var i = 0; // 88
              var l = keys.length; // 89
              var key; // 90
              while (l > i) $defineProperty(it, key = keys[i++], P[key]); // 91
              return it; // 92
            }; // 93
            var $create = function create(it, P) {
              // 94
              return P === undefined ? _create(it) : $defineProperties(_create(it), P); // 95
            }; // 96
            var $propertyIsEnumerable = function propertyIsEnumerable(key) {
              // 97
              var E = isEnum.call(this, key = toPrimitive(key, true)); // 98
              if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false; // 99
              return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true; // 100
            }; // 101
            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
              // 102
              it = toIObject(it); // 103
              key = toPrimitive(key, true); // 104
              if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return; // 105
              var D = gOPD(it, key); // 106
              if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true; // 107
              return D; // 108
            }; // 109
            var $getOwnPropertyNames = function getOwnPropertyNames(it) {
              // 110
              var names = gOPN(toIObject(it)); // 111
              var result = []; // 112
              var i = 0; // 113
              var key; // 114
              while (names.length > i) {
                // 115
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key); // 116
              }return result; // 117
            }; // 118
            var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
              // 119
              var IS_OP = it === ObjectProto; // 120
              var names = gOPN(IS_OP ? OPSymbols : toIObject(it)); // 121
              var result = []; // 122
              var i = 0; // 123
              var key; // 124
              while (names.length > i) {
                // 125
                if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]); // 126
              }return result; // 127
            }; // 128
            // 129
            // 19.4.1.1 Symbol([description])                                                                                      // 130
            if (!USE_NATIVE) {
              // 131
              $Symbol = function Symbol() {
                // 132
                if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!'); // 133
                var tag = uid(arguments.length > 0 ? arguments[0] : undefined); // 134
                var $set = function (value) {
                  // 135
                  if (this === ObjectProto) $set.call(OPSymbols, value); // 136
                  if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false; // 137
                  setSymbolDesc(this, tag, createDesc(1, value)); // 138
                }; // 139
                if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set }); // 140
                return wrap(tag); // 141
              }; // 142
              redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                // 143
                return this._k; // 144
              }); // 145
              // 146
              $GOPD.f = $getOwnPropertyDescriptor; // 147
              $DP.f = $defineProperty; // 148
              _require35('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames; // 149
              _require35('./_object-pie').f = $propertyIsEnumerable; // 150
              _require35('./_object-gops').f = $getOwnPropertySymbols; // 151
              // 152
              if (DESCRIPTORS && !_require35('./_library')) {
                // 153
                redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true); // 154
              } // 155
              // 156
              wksExt.f = function (name) {
                // 157
                return wrap(wks(name)); // 158
              }; // 159
            } // 160
            // 161
            $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol }); // 162
            // 163
            for (var es6Symbols = // 164
            // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
            'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables' // 166
            .split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]); // 167
            // 168
            for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]); // 169
            // 170
            $export($export.S + $export.F * !USE_NATIVE, 'Symbol', { // 171
              // 19.4.2.1 Symbol.for(key)                                                                                          // 172
              'for': function (key) {
                // 173
                return has(SymbolRegistry, key += '') // 174
                ? SymbolRegistry[key] // 175
                : SymbolRegistry[key] = $Symbol(key); // 176
              }, // 177
              // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 178
              keyFor: function keyFor(sym) {
                // 179
                if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!'); // 180
                for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key; // 181
              }, // 182
              useSetter: function () {
                setter = true;
              }, // 183
              useSimple: function () {
                setter = false;
              } // 184
            }); // 185
            // 186
            $export($export.S + $export.F * !USE_NATIVE, 'Object', { // 187
              // 19.1.2.2 Object.create(O [, Properties])                                                                          // 188
              create: $create, // 189
              // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 190
              defineProperty: $defineProperty, // 191
              // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 192
              defineProperties: $defineProperties, // 193
              // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 194
              getOwnPropertyDescriptor: $getOwnPropertyDescriptor, // 195
              // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 196
              getOwnPropertyNames: $getOwnPropertyNames, // 197
              // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 198
              getOwnPropertySymbols: $getOwnPropertySymbols // 199
            }); // 200
            // 201
            // 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 202
            $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
              // 203
              var S = $Symbol(); // 204
              // MS Edge converts symbol values to JSON as {}                                                                      // 205
              // WebKit converts symbol values to JSON as null                                                                     // 206
              // V8 throws on boxed symbols                                                                                        // 207
              return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}'; // 208
            })), 'JSON', { // 209
              stringify: function stringify(it) {
                // 210
                if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined                                   // 211
                var args = [it]; // 212
                var i = 1; // 213
                var replacer, $replacer; // 214
                while (arguments.length > i) args.push(arguments[i++]); // 215
                replacer = args[1]; // 216
                if (typeof replacer == 'function') $replacer = replacer; // 217
                if ($replacer || !isArray(replacer)) replacer = function (key, value) {
                  // 218
                  if ($replacer) value = $replacer.call(this, key, value); // 219
                  if (!isSymbol(value)) return value; // 220
                }; // 221
                args[1] = replacer; // 222
                return _stringify.apply($JSON, args); // 223
              } // 224
            }); // 225
            // 226
            // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 227
            $Symbol[PROTOTYPE][TO_PRIMITIVE] || _require35('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 228
            // 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 229
            setToStringTag($Symbol, 'Symbol'); // 230
            // 20.2.1.9 Math[@@toStringTag]                                                                                        // 231
            setToStringTag(Math, 'Math', true); // 232
            // 24.3.3 JSON[@@toStringTag]                                                                                          // 233
            setToStringTag(global.JSON, 'JSON', true); // 234
            // 235
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_global.js": function (_require36, _exports32, _module24) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_global.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
            var global = _module24.exports = typeof window != 'undefined' && window.Math == Math // 2
            ? window : typeof self != 'undefined' && self.Math == Math ? self // 3
            // eslint-disable-next-line no-new-func                                                                              // 4
            : Function('return this')(); // 5
            if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef                                              // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_has.js": function (_require37, _exports33, _module25) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_has.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var hasOwnProperty = {}.hasOwnProperty; // 1
            _module25.exports = function (it, key) {
              // 2
              return hasOwnProperty.call(it, key); // 3
            }; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_descriptors.js": function (_require38, _exports34, _module26) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_descriptors.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Thank's IE8 for his funny defineProperty                                                                            // 1
            _module26.exports = !_require38('./_fails')(function () {
              // 2
              return Object.defineProperty({}, 'a', { get: function () {
                  return 7;
                } }).a != 7; // 3
            }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_fails.js": function (_require39, _exports35, _module27) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_fails.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module27.exports = function (exec) {
              // 1
              try {
                // 2
                return !!exec(); // 3
              } catch (e) {
                // 4
                return true; // 5
              } // 6
            }; // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_export.js": function (_require40, _exports37, _module28) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_export.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require40('./_global'); // 1
            var core = _require40('./_core'); // 2
            var hide = _require40('./_hide'); // 3
            var redefine = _require40('./_redefine'); // 4
            var ctx = _require40('./_ctx'); // 5
            var PROTOTYPE = 'prototype'; // 6
            // 7
            var $export = function (type, name, source) {
              // 8
              var IS_FORCED = type & $export.F; // 9
              var IS_GLOBAL = type & $export.G; // 10
              var IS_STATIC = type & $export.S; // 11
              var IS_PROTO = type & $export.P; // 12
              var IS_BIND = type & $export.B; // 13
              var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
              var _exports36 = IS_GLOBAL ? core : core[name] || (core[name] = {}); // 15
              var expProto = _exports36[PROTOTYPE] || (_exports36[PROTOTYPE] = {}); // 16
              var key, own, out, exp; // 17
              if (IS_GLOBAL) source = name; // 18
              for (key in source) {
                // 19
                // contains in native                                                                                              // 20
                own = !IS_FORCED && target && target[key] !== undefined; // 21
                // export native or passed                                                                                         // 22
                out = (own ? target : source)[key]; // 23
                // bind timers to global for call from export context                                                              // 24
                exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // 25
                // extend global                                                                                                   // 26
                if (target) redefine(target, key, out, type & $export.U); // 27
                // export                                                                                                          // 28
                if (_exports36[key] != out) hide(_exports36, key, exp); // 29
                if (IS_PROTO && expProto[key] != out) expProto[key] = out; // 30
              } // 31
            }; // 32
            global.core = core; // 33
            // type bitmap                                                                                                         // 34
            $export.F = 1; // forced                                                                                             // 35
            $export.G = 2; // global                                                                                             // 36
            $export.S = 4; // static                                                                                             // 37
            $export.P = 8; // proto                                                                                              // 38
            $export.B = 16; // bind                                                                                               // 39
            $export.W = 32; // wrap                                                                                               // 40
            $export.U = 64; // safe                                                                                               // 41
            $export.R = 128; // real proto method for `library`                                                                    // 42
            _module28.exports = $export; // 43
            // 44
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_core.js": function (_require41, _exports38, _module29) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_core.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var core = _module29.exports = { version: '2.5.1' }; // 1
            if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef                                                // 2
            // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_hide.js": function (_require42, _exports39, _module30) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_hide.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var dP = _require42('./_object-dp'); // 1
            var createDesc = _require42('./_property-desc'); // 2
            _module30.exports = _require42('./_descriptors') ? function (object, key, value) {
              // 3
              return dP.f(object, key, createDesc(1, value)); // 4
            } : function (object, key, value) {
              // 5
              object[key] = value; // 6
              return object; // 7
            }; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-dp.js": function (_require43, _exports40) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-dp.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var anObject = _require43('./_an-object'); // 1
            var IE8_DOM_DEFINE = _require43('./_ie8-dom-define'); // 2
            var toPrimitive = _require43('./_to-primitive'); // 3
            var dP = Object.defineProperty; // 4
            // 5
            _exports40.f = _require43('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
              // 6
              anObject(O); // 7
              P = toPrimitive(P, true); // 8
              anObject(Attributes); // 9
              if (IE8_DOM_DEFINE) try {
                // 10
                return dP(O, P, Attributes); // 11
              } catch (e) {} /* empty */ // 12
              if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!'); // 13
              if ('value' in Attributes) O[P] = Attributes.value; // 14
              return O; // 15
            }; // 16
            // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_an-object.js": function (_require44, _exports41, _module31) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_an-object.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require44('./_is-object'); // 1
            _module31.exports = function (it) {
              // 2
              if (!isObject(it)) throw TypeError(it + ' is not an object!'); // 3
              return it; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-object.js": function (_require45, _exports42, _module32) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-object.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module32.exports = function (it) {
              // 1
              return typeof it === 'object' ? it !== null : typeof it === 'function'; // 2
            }; // 3
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_ie8-dom-define.js": function (_require46, _exports43, _module33) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_ie8-dom-define.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module33.exports = !_require46('./_descriptors') && !_require46('./_fails')(function () {
              // 1
              return Object.defineProperty(_require46('./_dom-create')('div'), 'a', { get: function () {
                  return 7;
                } }).a != 7; // 2
            }); // 3
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_dom-create.js": function (_require47, _exports44, _module34) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_dom-create.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require47('./_is-object'); // 1
            var document = _require47('./_global').document; // 2
            // typeof document.createElement is 'object' in old IE                                                                 // 3
            var is = isObject(document) && isObject(document.createElement); // 4
            _module34.exports = function (it) {
              // 5
              return is ? document.createElement(it) : {}; // 6
            }; // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-primitive.js": function (_require48, _exports45, _module35) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-primitive.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
            var isObject = _require48('./_is-object'); // 2
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
            // and the second argument - flag - preferred type is a string                                                         // 4
            _module35.exports = function (it, S) {
              // 5
              if (!isObject(it)) return it; // 6
              var fn, val; // 7
              if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 8
              if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val; // 9
              if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 10
              throw TypeError("Can't convert object to primitive value"); // 11
            }; // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_property-desc.js": function (_require49, _exports46, _module36) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_property-desc.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module36.exports = function (bitmap, value) {
              // 1
              return { // 2
                enumerable: !(bitmap & 1), // 3
                configurable: !(bitmap & 2), // 4
                writable: !(bitmap & 4), // 5
                value: value // 6
              }; // 7
            }; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_redefine.js": function (_require50, _exports47, _module37) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_redefine.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require50('./_global'); // 1
            var hide = _require50('./_hide'); // 2
            var has = _require50('./_has'); // 3
            var SRC = _require50('./_uid')('src'); // 4
            var TO_STRING = 'toString'; // 5
            var $toString = Function[TO_STRING]; // 6
            var TPL = ('' + $toString).split(TO_STRING); // 7
            // 8
            _require50('./_core').inspectSource = function (it) {
              // 9
              return $toString.call(it); // 10
            }; // 11
            // 12
            (_module37.exports = function (O, key, val, safe) {
              // 13
              var isFunction = typeof val == 'function'; // 14
              if (isFunction) has(val, 'name') || hide(val, 'name', key); // 15
              if (O[key] === val) return; // 16
              if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); // 17
              if (O === global) {
                // 18
                O[key] = val; // 19
              } else if (!safe) {
                // 20
                delete O[key]; // 21
                hide(O, key, val); // 22
              } else if (O[key]) {
                // 23
                O[key] = val; // 24
              } else {
                // 25
                hide(O, key, val); // 26
              } // 27
              // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative        // 28
            })(Function.prototype, TO_STRING, function toString() {
              // 29
              return typeof this == 'function' && this[SRC] || $toString.call(this); // 30
            }); // 31
            // 32
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_uid.js": function (_require51, _exports48, _module38) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_uid.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var id = 0; // 1
            var px = Math.random(); // 2
            _module38.exports = function (key) {
              // 3
              return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36)); // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_ctx.js": function (_require52, _exports49, _module39) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_ctx.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // optional / simple context binding                                                                                   // 1
            var aFunction = _require52('./_a-function'); // 2
            _module39.exports = function (fn, that, length) {
              // 3
              aFunction(fn); // 4
              if (that === undefined) return fn; // 5
              switch (length) {// 6
                case 1:
                  return function (a) {
                    // 7
                    return fn.call(that, a); // 8
                  }; // 9
                case 2:
                  return function (a, b) {
                    // 10
                    return fn.call(that, a, b); // 11
                  }; // 12
                case 3:
                  return function (a, b, c) {
                    // 13
                    return fn.call(that, a, b, c); // 14
                  }; // 15
              } // 16
              return function () /* ...args */{
                // 17
                return fn.apply(that, arguments); // 18
              }; // 19
            }; // 20
            // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_a-function.js": function (_require53, _exports50, _module40) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_a-function.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module40.exports = function (it) {
              // 1
              if (typeof it != 'function') throw TypeError(it + ' is not a function!'); // 2
              return it; // 3
            }; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_meta.js": function (_require54, _exports51, _module41) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_meta.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var META = _require54('./_uid')('meta'); // 1
            var isObject = _require54('./_is-object'); // 2
            var has = _require54('./_has'); // 3
            var setDesc = _require54('./_object-dp').f; // 4
            var id = 0; // 5
            var isExtensible = Object.isExtensible || function () {
              // 6
              return true; // 7
            }; // 8
            var FREEZE = !_require54('./_fails')(function () {
              // 9
              return isExtensible(Object.preventExtensions({})); // 10
            }); // 11
            var setMeta = function (it) {
              // 12
              setDesc(it, META, { value: { // 13
                  i: 'O' + ++id, // object ID                                                                                        // 14
                  w: {} // weak collections IDs                                                                             // 15
                } }); // 16
            }; // 17
            var fastKey = function (it, create) {
              // 18
              // return primitive with prefix                                                                                      // 19
              if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it; // 20
              if (!has(it, META)) {
                // 21
                // can't set metadata to uncaught frozen object                                                                    // 22
                if (!isExtensible(it)) return 'F'; // 23
                // not necessary to add metadata                                                                                   // 24
                if (!create) return 'E'; // 25
                // add missing metadata                                                                                            // 26
                setMeta(it); // 27
                // return object ID                                                                                                  // 28
              }return it[META].i; // 29
            }; // 30
            var getWeak = function (it, create) {
              // 31
              if (!has(it, META)) {
                // 32
                // can't set metadata to uncaught frozen object                                                                    // 33
                if (!isExtensible(it)) return true; // 34
                // not necessary to add metadata                                                                                   // 35
                if (!create) return false; // 36
                // add missing metadata                                                                                            // 37
                setMeta(it); // 38
                // return hash weak collections IDs                                                                                  // 39
              }return it[META].w; // 40
            }; // 41
            // add metadata on freeze-family methods calling                                                                       // 42
            var onFreeze = function (it) {
              // 43
              if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it); // 44
              return it; // 45
            }; // 46
            var meta = _module41.exports = { // 47
              KEY: META, // 48
              NEED: false, // 49
              fastKey: fastKey, // 50
              getWeak: getWeak, // 51
              onFreeze: onFreeze // 52
            }; // 53
            // 54
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_shared.js": function (_require55, _exports52, _module42) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_shared.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require55('./_global'); // 1
            var SHARED = '__core-js_shared__'; // 2
            var store = global[SHARED] || (global[SHARED] = {}); // 3
            _module42.exports = function (key) {
              // 4
              return store[key] || (store[key] = {}); // 5
            }; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_set-to-string-tag.js": function (_require56, _exports53, _module43) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_set-to-string-tag.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var def = _require56('./_object-dp').f; // 1
            var has = _require56('./_has'); // 2
            var TAG = _require56('./_wks')('toStringTag'); // 3
            // 4
            _module43.exports = function (it, tag, stat) {
              // 5
              if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag }); // 6
            }; // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_wks.js": function (_require57, _exports54, _module44) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_wks.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var store = _require57('./_shared')('wks'); // 1
            var uid = _require57('./_uid'); // 2
            var Symbol = _require57('./_global').Symbol; // 3
            var USE_SYMBOL = typeof Symbol == 'function'; // 4
            // 5
            var $exports = _module44.exports = function (name) {
              // 6
              return store[name] || (store[name] = // 7
              USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name)); // 8
            }; // 9
            // 10
            $exports.store = store; // 11
            // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_wks-ext.js": function (_require58, _exports55) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_wks-ext.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports55.f = _require58('./_wks'); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_wks-define.js": function (_require59, _exports56, _module45) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_wks-define.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require59('./_global'); // 1
            var core = _require59('./_core'); // 2
            var LIBRARY = _require59('./_library'); // 3
            var wksExt = _require59('./_wks-ext'); // 4
            var defineProperty = _require59('./_object-dp').f; // 5
            _module45.exports = function (name) {
              // 6
              var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {}); // 7
              if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) }); // 8
            }; // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_library.js": function (_require60, _exports57, _module46) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_library.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module46.exports = false; // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_enum-keys.js": function (_require61, _exports58, _module47) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_enum-keys.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // all enumerable object keys, includes symbols                                                                        // 1
            var getKeys = _require61('./_object-keys'); // 2
            var gOPS = _require61('./_object-gops'); // 3
            var pIE = _require61('./_object-pie'); // 4
            _module47.exports = function (it) {
              // 5
              var result = getKeys(it); // 6
              var getSymbols = gOPS.f; // 7
              if (getSymbols) {
                // 8
                var symbols = getSymbols(it); // 9
                var isEnum = pIE.f; // 10
                var i = 0; // 11
                var key; // 12
                while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key); // 13
              }return result; // 14
            }; // 15
            // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-keys.js": function (_require62, _exports59, _module48) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-keys.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
            var $keys = _require62('./_object-keys-internal'); // 2
            var enumBugKeys = _require62('./_enum-bug-keys'); // 3
            // 4
            _module48.exports = Object.keys || function keys(O) {
              // 5
              return $keys(O, enumBugKeys); // 6
            }; // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-keys-internal.js": function (_require63, _exports60, _module49) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-keys-internal.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var has = _require63('./_has'); // 1
            var toIObject = _require63('./_to-iobject'); // 2
            var arrayIndexOf = _require63('./_array-includes')(false); // 3
            var IE_PROTO = _require63('./_shared-key')('IE_PROTO'); // 4
            // 5
            _module49.exports = function (object, names) {
              // 6
              var O = toIObject(object); // 7
              var i = 0; // 8
              var result = []; // 9
              var key; // 10
              for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key); // 11
              // Don't enum bug & hidden keys                                                                                      // 12
              while (names.length > i) if (has(O, key = names[i++])) {
                // 13
                ~arrayIndexOf(result, key) || result.push(key); // 14
              } // 15
              return result; // 16
            }; // 17
            // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-iobject.js": function (_require64, _exports61, _module50) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-iobject.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
            var IObject = _require64('./_iobject'); // 2
            var defined = _require64('./_defined'); // 3
            _module50.exports = function (it) {
              // 4
              return IObject(defined(it)); // 5
            }; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iobject.js": function (_require65, _exports62, _module51) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iobject.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
            var cof = _require65('./_cof'); // 2
            // eslint-disable-next-line no-prototype-builtins                                                                      // 3
            _module51.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
              // 4
              return cof(it) == 'String' ? it.split('') : Object(it); // 5
            }; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_cof.js": function (_require66, _exports63, _module52) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_cof.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var toString = {}.toString; // 1
            // 2
            _module52.exports = function (it) {
              // 3
              return toString.call(it).slice(8, -1); // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_defined.js": function (_require67, _exports64, _module53) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_defined.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
            _module53.exports = function (it) {
              // 2
              if (it == undefined) throw TypeError("Can't call method on  " + it); // 3
              return it; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-includes.js": function (_require68, _exports65, _module54) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-includes.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // false -> Array#indexOf                                                                                              // 1
            // true  -> Array#includes                                                                                             // 2
            var toIObject = _require68('./_to-iobject'); // 3
            var toLength = _require68('./_to-length'); // 4
            var toAbsoluteIndex = _require68('./_to-absolute-index'); // 5
            _module54.exports = function (IS_INCLUDES) {
              // 6
              return function ($this, el, fromIndex) {
                // 7
                var O = toIObject($this); // 8
                var length = toLength(O.length); // 9
                var index = toAbsoluteIndex(fromIndex, length); // 10
                var value; // 11
                // Array#includes uses SameValueZero equality algorithm                                                            // 12
                // eslint-disable-next-line no-self-compare                                                                        // 13
                if (IS_INCLUDES && el != el) while (length > index) {
                  // 14
                  value = O[index++]; // 15
                  // eslint-disable-next-line no-self-compare                                                                      // 16
                  if (value != value) return true; // 17
                  // Array#indexOf ignores holes, Array#includes - not                                                               // 18
                } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                  // 19
                  if (O[index] === el) return IS_INCLUDES || index || 0; // 20
                }return !IS_INCLUDES && -1; // 21
              }; // 22
            }; // 23
            // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-length.js": function (_require69, _exports66, _module55) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-length.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.15 ToLength                                                                                                     // 1
            var toInteger = _require69('./_to-integer'); // 2
            var min = Math.min; // 3
            _module55.exports = function (it) {
              // 4
              return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
            }; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-integer.js": function (_require70, _exports67, _module56) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-integer.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.4 ToInteger                                                                                                     // 1
            var ceil = Math.ceil; // 2
            var floor = Math.floor; // 3
            _module56.exports = function (it) {
              // 4
              return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it); // 5
            }; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-absolute-index.js": function (_require71, _exports68, _module57) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-absolute-index.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var toInteger = _require71('./_to-integer'); // 1
            var max = Math.max; // 2
            var min = Math.min; // 3
            _module57.exports = function (index, length) {
              // 4
              index = toInteger(index); // 5
              return index < 0 ? max(index + length, 0) : min(index, length); // 6
            }; // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_shared-key.js": function (_require72, _exports69, _module58) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_shared-key.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var shared = _require72('./_shared')('keys'); // 1
            var uid = _require72('./_uid'); // 2
            _module58.exports = function (key) {
              // 3
              return shared[key] || (shared[key] = uid(key)); // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_enum-bug-keys.js": function (_require73, _exports70, _module59) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_enum-bug-keys.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // IE 8- don't enum bug keys                                                                                           // 1
            _module59.exports = // 2
            'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf' // 3
            .split(','); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gops.js": function (_require74, _exports71) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gops.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports71.f = Object.getOwnPropertySymbols; // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-pie.js": function (_require75, _exports72) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-pie.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports72.f = {}.propertyIsEnumerable; // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-array.js": function (_require76, _exports73, _module60) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-array.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.2 IsArray(argument)                                                                                             // 1
            var cof = _require76('./_cof'); // 2
            _module60.exports = Array.isArray || function isArray(arg) {
              // 3
              return cof(arg) == 'Array'; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-create.js": function (_require77, _exports74, _module61) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-create.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
            var anObject = _require77('./_an-object'); // 2
            var dPs = _require77('./_object-dps'); // 3
            var enumBugKeys = _require77('./_enum-bug-keys'); // 4
            var IE_PROTO = _require77('./_shared-key')('IE_PROTO'); // 5
            var Empty = function () {/* empty */}; // 6
            var PROTOTYPE = 'prototype'; // 7
            // 8
            // Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
            var createDict = function () {
              // 10
              // Thrash, waste and sodomy: IE GC bug                                                                               // 11
              var iframe = _require77('./_dom-create')('iframe'); // 12
              var i = enumBugKeys.length; // 13
              var lt = '<'; // 14
              var gt = '>'; // 15
              var iframeDocument; // 16
              iframe.style.display = 'none'; // 17
              _require77('./_html').appendChild(iframe); // 18
              iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
              // createDict = iframe.contentWindow.Object;                                                                         // 20
              // html.removeChild(iframe);                                                                                         // 21
              iframeDocument = iframe.contentWindow.document; // 22
              iframeDocument.open(); // 23
              iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt); // 24
              iframeDocument.close(); // 25
              createDict = iframeDocument.F; // 26
              while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]]; // 27
              return createDict(); // 28
            }; // 29
            // 30
            _module61.exports = Object.create || function create(O, Properties) {
              // 31
              var result; // 32
              if (O !== null) {
                // 33
                Empty[PROTOTYPE] = anObject(O); // 34
                result = new Empty(); // 35
                Empty[PROTOTYPE] = null; // 36
                // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
                result[IE_PROTO] = O; // 38
              } else result = createDict(); // 39
              return Properties === undefined ? result : dPs(result, Properties); // 40
            }; // 41
            // 42
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-dps.js": function (_require78, _exports75, _module62) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-dps.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var dP = _require78('./_object-dp'); // 1
            var anObject = _require78('./_an-object'); // 2
            var getKeys = _require78('./_object-keys'); // 3
            // 4
            _module62.exports = _require78('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
              // 5
              anObject(O); // 6
              var keys = getKeys(Properties); // 7
              var length = keys.length; // 8
              var i = 0; // 9
              var P; // 10
              while (length > i) dP.f(O, P = keys[i++], Properties[P]); // 11
              return O; // 12
            }; // 13
            // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_html.js": function (_require79, _exports76, _module63) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_html.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var document = _require79('./_global').document; // 1
            _module63.exports = document && document.documentElement; // 2
            // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gopn-ext.js": function (_require80, _exports77, _module64) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gopn-ext.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
            var toIObject = _require80('./_to-iobject'); // 2
            var gOPN = _require80('./_object-gopn').f; // 3
            var toString = {}.toString; // 4
            // 5
            var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames // 6
            ? Object.getOwnPropertyNames(window) : []; // 7
            // 8
            var getWindowNames = function (it) {
              // 9
              try {
                // 10
                return gOPN(it); // 11
              } catch (e) {
                // 12
                return windowNames.slice(); // 13
              } // 14
            }; // 15
            // 16
            _module64.exports.f = function getOwnPropertyNames(it) {
              // 17
              return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it)); // 18
            }; // 19
            // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gopn.js": function (_require81, _exports78) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gopn.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
            var $keys = _require81('./_object-keys-internal'); // 2
            var hiddenKeys = _require81('./_enum-bug-keys').concat('length', 'prototype'); // 3
            // 4
            _exports78.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
              // 5
              return $keys(O, hiddenKeys); // 6
            }; // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gopd.js": function (_require82, _exports79) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gopd.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var pIE = _require82('./_object-pie'); // 1
            var createDesc = _require82('./_property-desc'); // 2
            var toIObject = _require82('./_to-iobject'); // 3
            var toPrimitive = _require82('./_to-primitive'); // 4
            var has = _require82('./_has'); // 5
            var IE8_DOM_DEFINE = _require82('./_ie8-dom-define'); // 6
            var gOPD = Object.getOwnPropertyDescriptor; // 7
            // 8
            _exports79.f = _require82('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
              // 9
              O = toIObject(O); // 10
              P = toPrimitive(P, true); // 11
              if (IE8_DOM_DEFINE) try {
                // 12
                return gOPD(O, P); // 13
              } catch (e) {} /* empty */ // 14
              if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]); // 15
            }; // 16
            // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.map.js": function (_require83, _exports80, _module65) {
            // 1
            var strong = _require83('./_collection-strong'); // 2
            var validate = _require83('./_validate-collection'); // 3
            var MAP = 'Map'; // 4
            // 5
            // 23.1 Map Objects                                                                                                    // 6
            _module65.exports = _require83('./_collection')(MAP, function (get) {
              // 7
              return function Map() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              }; // 8
            }, { // 9
              // 23.1.3.6 Map.prototype.get(key)                                                                                   // 10
              get: function get(key) {
                // 11
                var entry = strong.getEntry(validate(this, MAP), key); // 12
                return entry && entry.v; // 13
              }, // 14
              // 23.1.3.9 Map.prototype.set(key, value)                                                                            // 15
              set: function set(key, value) {
                // 16
                return strong.def(validate(this, MAP), key === 0 ? 0 : key, value); // 17
              } // 18
            }, strong, true); // 19
            // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_collection-strong.js": function (_require84, _exports81, _module66) {
            // 1
            var dP = _require84('./_object-dp').f; // 2
            var create = _require84('./_object-create'); // 3
            var redefineAll = _require84('./_redefine-all'); // 4
            var ctx = _require84('./_ctx'); // 5
            var anInstance = _require84('./_an-instance'); // 6
            var forOf = _require84('./_for-of'); // 7
            var $iterDefine = _require84('./_iter-define'); // 8
            var step = _require84('./_iter-step'); // 9
            var setSpecies = _require84('./_set-species'); // 10
            var DESCRIPTORS = _require84('./_descriptors'); // 11
            var fastKey = _require84('./_meta').fastKey; // 12
            var validate = _require84('./_validate-collection'); // 13
            var SIZE = DESCRIPTORS ? '_s' : 'size'; // 14
            // 15
            var getEntry = function (that, key) {
              // 16
              // fast case                                                                                                         // 17
              var index = fastKey(key); // 18
              var entry; // 19
              if (index !== 'F') return that._i[index]; // 20
              // frozen object case                                                                                                // 21
              for (entry = that._f; entry; entry = entry.n) {
                // 22
                if (entry.k == key) return entry; // 23
              } // 24
            }; // 25
            // 26
            _module66.exports = { // 27
              getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                // 28
                var C = wrapper(function (that, iterable) {
                  // 29
                  anInstance(that, C, NAME, '_i'); // 30
                  that._t = NAME; // collection type                                                                       // 31
                  that._i = create(null); // index                                                                                 // 32
                  that._f = undefined; // first entry                                                                           // 33
                  that._l = undefined; // last entry                                                                            // 34
                  that[SIZE] = 0; // size                                                                                  // 35
                  if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that); // 36
                }); // 37
                redefineAll(C.prototype, { // 38
                  // 23.1.3.1 Map.prototype.clear()                                                                                // 39
                  // 23.2.3.2 Set.prototype.clear()                                                                                // 40
                  clear: function clear() {
                    // 41
                    for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                      // 42
                      entry.r = true; // 43
                      if (entry.p) entry.p = entry.p.n = undefined; // 44
                      delete data[entry.i]; // 45
                    } // 46
                    that._f = that._l = undefined; // 47
                    that[SIZE] = 0; // 48
                  }, // 49
                  // 23.1.3.3 Map.prototype.delete(key)                                                                            // 50
                  // 23.2.3.4 Set.prototype.delete(value)                                                                          // 51
                  'delete': function (key) {
                    // 52
                    var that = validate(this, NAME); // 53
                    var entry = getEntry(that, key); // 54
                    if (entry) {
                      // 55
                      var next = entry.n; // 56
                      var prev = entry.p; // 57
                      delete that._i[entry.i]; // 58
                      entry.r = true; // 59
                      if (prev) prev.n = next; // 60
                      if (next) next.p = prev; // 61
                      if (that._f == entry) that._f = next; // 62
                      if (that._l == entry) that._l = prev; // 63
                      that[SIZE]--; // 64
                    }return !!entry; // 65
                  }, // 66
                  // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)                                               // 67
                  // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)                                               // 68
                  forEach: function forEach(callbackfn /* , that = undefined */) {
                    // 69
                    validate(this, NAME); // 70
                    var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3); // 71
                    var entry; // 72
                    while (entry = entry ? entry.n : this._f) {
                      // 73
                      f(entry.v, entry.k, this); // 74
                      // revert to the last existing entry                                                                         // 75
                      while (entry && entry.r) entry = entry.p; // 76
                    } // 77
                  }, // 78
                  // 23.1.3.7 Map.prototype.has(key)                                                                               // 79
                  // 23.2.3.7 Set.prototype.has(value)                                                                             // 80
                  has: function has(key) {
                    // 81
                    return !!getEntry(validate(this, NAME), key); // 82
                  } // 83
                }); // 84
                if (DESCRIPTORS) dP(C.prototype, 'size', { // 85
                  get: function () {
                    // 86
                    return validate(this, NAME)[SIZE]; // 87
                  } // 88
                }); // 89
                return C; // 90
              }, // 91
              def: function (that, key, value) {
                // 92
                var entry = getEntry(that, key); // 93
                var prev, index; // 94
                // change existing entry                                                                                           // 95
                if (entry) {
                  // 96
                  entry.v = value; // 97
                  // create new entry                                                                                                // 98
                } else {
                  // 99
                  that._l = entry = { // 100
                    i: index = fastKey(key, true), // <- index                                                                     // 101
                    k: key, // <- key                                                                       // 102
                    v: value, // <- value                                                                     // 103
                    p: prev = that._l, // <- previous entry                                                            // 104
                    n: undefined, // <- next entry                                                                // 105
                    r: false // <- removed                                                                   // 106
                  }; // 107
                  if (!that._f) that._f = entry; // 108
                  if (prev) prev.n = entry; // 109
                  that[SIZE]++; // 110
                  // add to index                                                                                                  // 111
                  if (index !== 'F') that._i[index] = entry; // 112
                }return that; // 113
              }, // 114
              getEntry: getEntry, // 115
              setStrong: function (C, NAME, IS_MAP) {
                // 116
                // add .keys, .values, .entries, [@@iterator]                                                                      // 117
                // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11                              // 118
                $iterDefine(C, NAME, function (iterated, kind) {
                  // 119
                  this._t = validate(iterated, NAME); // target                                                                    // 120
                  this._k = kind; // kind                                                                      // 121
                  this._l = undefined; // previous                                                                  // 122
                }, function () {
                  // 123
                  var that = this; // 124
                  var kind = that._k; // 125
                  var entry = that._l; // 126
                  // revert to the last existing entry                                                                             // 127
                  while (entry && entry.r) entry = entry.p; // 128
                  // get next entry                                                                                                // 129
                  if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                    // 130
                    // or finish the iteration                                                                                     // 131
                    that._t = undefined; // 132
                    return step(1); // 133
                  } // 134
                  // return step by kind                                                                                           // 135
                  if (kind == 'keys') return step(0, entry.k); // 136
                  if (kind == 'values') return step(0, entry.v); // 137
                  return step(0, [entry.k, entry.v]); // 138
                }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // 139
                // 140
                // add [@@species], 23.1.2.2, 23.2.2.2                                                                             // 141
                setSpecies(NAME); // 142
              } // 143
            }; // 144
            // 145
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_redefine-all.js": function (_require85, _exports82, _module67) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_redefine-all.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var redefine = _require85('./_redefine'); // 1
            _module67.exports = function (target, src, safe) {
              // 2
              for (var key in src) redefine(target, key, src[key], safe); // 3
              return target; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_an-instance.js": function (_require86, _exports83, _module68) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_an-instance.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module68.exports = function (it, Constructor, name, forbiddenField) {
              // 1
              if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
                // 2
                throw TypeError(name + ': incorrect invocation!'); // 3
              }return it; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_for-of.js": function (_require87, exports, _module69) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_for-of.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var ctx = _require87('./_ctx'); // 1
            var call = _require87('./_iter-call'); // 2
            var isArrayIter = _require87('./_is-array-iter'); // 3
            var anObject = _require87('./_an-object'); // 4
            var toLength = _require87('./_to-length'); // 5
            var getIterFn = _require87('./core.get-iterator-method'); // 6
            var BREAK = {}; // 7
            var RETURN = {}; // 8
            var _exports84 = _module69.exports = function (iterable, entries, fn, that, ITERATOR) {
              // 9
              var iterFn = ITERATOR ? function () {
                return iterable;
              } : getIterFn(iterable); // 10
              var f = ctx(fn, that, entries ? 2 : 1); // 11
              var index = 0; // 12
              var length, step, iterator, result; // 13
              if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // 14
              // fast case for arrays with default iterator                                                                        // 15
              if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
                // 16
                result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]); // 17
                if (result === BREAK || result === RETURN) return result; // 18
              } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                // 19
                result = call(iterator, f, step.value, entries); // 20
                if (result === BREAK || result === RETURN) return result; // 21
              } // 22
            }; // 23
            _exports84.BREAK = BREAK; // 24
            _exports84.RETURN = RETURN; // 25
            // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-call.js": function (_require88, _exports85, _module70) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-call.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // call something on iterator step with safe closing on error                                                          // 1
            var anObject = _require88('./_an-object'); // 2
            _module70.exports = function (iterator, fn, value, entries) {
              // 3
              try {
                // 4
                return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 5
                // 7.4.6 IteratorClose(iterator, completion)                                                                         // 6
              } catch (e) {
                // 7
                var ret = iterator['return']; // 8
                if (ret !== undefined) anObject(ret.call(iterator)); // 9
                throw e; // 10
              } // 11
            }; // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-array-iter.js": function (_require89, _exports86, _module71) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-array-iter.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // check on default Array iterator                                                                                     // 1
            var Iterators = _require89('./_iterators'); // 2
            var ITERATOR = _require89('./_wks')('iterator'); // 3
            var ArrayProto = Array.prototype; // 4
            // 5
            _module71.exports = function (it) {
              // 6
              return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it); // 7
            }; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iterators.js": function (_require90, _exports87, _module72) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iterators.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module72.exports = {}; // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "core.get-iterator-method.js": function (_require91, _exports88, _module73) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/core.get-iterator-method.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var classof = _require91('./_classof'); // 1
            var ITERATOR = _require91('./_wks')('iterator'); // 2
            var Iterators = _require91('./_iterators'); // 3
            _module73.exports = _require91('./_core').getIteratorMethod = function (it) {
              // 4
              if (it != undefined) return it[ITERATOR] // 5
              || it['@@iterator'] // 6
              || Iterators[classof(it)]; // 7
            }; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_classof.js": function (_require92, _exports89, _module74) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_classof.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1
            var cof = _require92('./_cof'); // 2
            var TAG = _require92('./_wks')('toStringTag'); // 3
            // ES3 wrong here                                                                                                      // 4
            var ARG = cof(function () {
              return arguments;
            }()) == 'Arguments'; // 5
            // 6
            // fallback for IE11 Script Access Denied error                                                                        // 7
            var tryGet = function (it, key) {
              // 8
              try {
                // 9
                return it[key]; // 10
              } catch (e) {} /* empty */ // 11
            }; // 12
            // 13
            _module74.exports = function (it) {
              // 14
              var O, T, B; // 15
              return it === undefined ? 'Undefined' : it === null ? 'Null' // 16
              // @@toStringTag case                                                                                              // 17
              : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // 18
              // builtinTag case                                                                                                 // 19
              : ARG ? cof(O) // 20
              // ES3 arguments fallback                                                                                          // 21
              : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B; // 22
            }; // 23
            // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-define.js": function (_require93, _exports90, _module75) {
            // 1
            var LIBRARY = _require93('./_library'); // 2
            var $export = _require93('./_export'); // 3
            var redefine = _require93('./_redefine'); // 4
            var hide = _require93('./_hide'); // 5
            var has = _require93('./_has'); // 6
            var Iterators = _require93('./_iterators'); // 7
            var $iterCreate = _require93('./_iter-create'); // 8
            var setToStringTag = _require93('./_set-to-string-tag'); // 9
            var getPrototypeOf = _require93('./_object-gpo'); // 10
            var ITERATOR = _require93('./_wks')('iterator'); // 11
            var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`                                // 12
            var FF_ITERATOR = '@@iterator'; // 13
            var KEYS = 'keys'; // 14
            var VALUES = 'values'; // 15
            // 16
            var returnThis = function () {
              return this;
            }; // 17
            // 18
            _module75.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
              // 19
              $iterCreate(Constructor, NAME, next); // 20
              var getMethod = function (kind) {
                // 21
                if (!BUGGY && kind in proto) return proto[kind]; // 22
                switch (kind) {// 23
                  case KEYS:
                    return function keys() {
                      return new Constructor(this, kind);
                    }; // 24
                  case VALUES:
                    return function values() {
                      return new Constructor(this, kind);
                    }; // 25
                }return function entries() {
                  return new Constructor(this, kind);
                }; // 26
              }; // 27
              var TAG = NAME + ' Iterator'; // 28
              var DEF_VALUES = DEFAULT == VALUES; // 29
              var VALUES_BUG = false; // 30
              var proto = Base.prototype; // 31
              var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]; // 32
              var $default = $native || getMethod(DEFAULT); // 33
              var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined; // 34
              var $anyNative = NAME == 'Array' ? proto.entries || $native : $native; // 35
              var methods, key, IteratorPrototype; // 36
              // Fix native                                                                                                        // 37
              if ($anyNative) {
                // 38
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base())); // 39
                if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                  // 40
                  // Set @@toStringTag to native iterators                                                                         // 41
                  setToStringTag(IteratorPrototype, TAG, true); // 42
                  // fix for some old engines                                                                                      // 43
                  if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis); // 44
                } // 45
              } // 46
              // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
              if (DEF_VALUES && $native && $native.name !== VALUES) {
                // 48
                VALUES_BUG = true; // 49
                $default = function values() {
                  return $native.call(this);
                }; // 50
              } // 51
              // Define iterator                                                                                                   // 52
              if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                // 53
                hide(proto, ITERATOR, $default); // 54
              } // 55
              // Plug for library                                                                                                  // 56
              Iterators[NAME] = $default; // 57
              Iterators[TAG] = returnThis; // 58
              if (DEFAULT) {
                // 59
                methods = { // 60
                  values: DEF_VALUES ? $default : getMethod(VALUES), // 61
                  keys: IS_SET ? $default : getMethod(KEYS), // 62
                  entries: $entries // 63
                }; // 64
                if (FORCED) for (key in methods) {
                  // 65
                  if (!(key in proto)) redefine(proto, key, methods[key]); // 66
                } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods); // 67
              } // 68
              return methods; // 69
            }; // 70
            // 71
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-create.js": function (_require94, _exports91, _module76) {
            // 1
            var create = _require94('./_object-create'); // 2
            var descriptor = _require94('./_property-desc'); // 3
            var setToStringTag = _require94('./_set-to-string-tag'); // 4
            var IteratorPrototype = {}; // 5
            // 6
            // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
            _require94('./_hide')(IteratorPrototype, _require94('./_wks')('iterator'), function () {
              return this;
            }); // 8
            // 9
            _module76.exports = function (Constructor, NAME, next) {
              // 10
              Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) }); // 11
              setToStringTag(Constructor, NAME + ' Iterator'); // 12
            }; // 13
            // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-gpo.js": function (_require95, _exports92, _module77) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-gpo.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
            var has = _require95('./_has'); // 2
            var toObject = _require95('./_to-object'); // 3
            var IE_PROTO = _require95('./_shared-key')('IE_PROTO'); // 4
            var ObjectProto = Object.prototype; // 5
            // 6
            _module77.exports = Object.getPrototypeOf || function (O) {
              // 7
              O = toObject(O); // 8
              if (has(O, IE_PROTO)) return O[IE_PROTO]; // 9
              if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                // 10
                return O.constructor.prototype; // 11
              }return O instanceof Object ? ObjectProto : null; // 12
            }; // 13
            // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-object.js": function (_require96, _exports93, _module78) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-object.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.1.13 ToObject(argument)                                                                                           // 1
            var defined = _require96('./_defined'); // 2
            _module78.exports = function (it) {
              // 3
              return Object(defined(it)); // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-step.js": function (_require97, _exports94, _module79) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-step.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module79.exports = function (done, value) {
              // 1
              return { value: value, done: !!done }; // 2
            }; // 3
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_set-species.js": function (_require98, _exports95, _module80) {
            // 1
            var global = _require98('./_global'); // 2
            var dP = _require98('./_object-dp'); // 3
            var DESCRIPTORS = _require98('./_descriptors'); // 4
            var SPECIES = _require98('./_wks')('species'); // 5
            // 6
            _module80.exports = function (KEY) {
              // 7
              var C = global[KEY]; // 8
              if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, { // 9
                configurable: true, // 10
                get: function () {
                  return this;
                } // 11
              }); // 12
            }; // 13
            // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_validate-collection.js": function (_require99, _exports96, _module81) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_validate-collection.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require99('./_is-object'); // 1
            _module81.exports = function (it, TYPE) {
              // 2
              if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!'); // 3
              return it; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_collection.js": function (_require100, _exports97, _module82) {
            // 1
            var global = _require100('./_global'); // 2
            var $export = _require100('./_export'); // 3
            var redefine = _require100('./_redefine'); // 4
            var redefineAll = _require100('./_redefine-all'); // 5
            var meta = _require100('./_meta'); // 6
            var forOf = _require100('./_for-of'); // 7
            var anInstance = _require100('./_an-instance'); // 8
            var isObject = _require100('./_is-object'); // 9
            var fails = _require100('./_fails'); // 10
            var $iterDetect = _require100('./_iter-detect'); // 11
            var setToStringTag = _require100('./_set-to-string-tag'); // 12
            var inheritIfRequired = _require100('./_inherit-if-required'); // 13
            // 14
            _module82.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
              // 15
              var Base = global[NAME]; // 16
              var C = Base; // 17
              var ADDER = IS_MAP ? 'set' : 'add'; // 18
              var proto = C && C.prototype; // 19
              var O = {}; // 20
              var fixMethod = function (KEY) {
                // 21
                var fn = proto[KEY]; // 22
                redefine(proto, KEY, // 23
                KEY == 'delete' ? function (a) {
                  // 24
                  return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a); // 25
                } : KEY == 'has' ? function has(a) {
                  // 26
                  return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a); // 27
                } : KEY == 'get' ? function get(a) {
                  // 28
                  return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a); // 29
                } : KEY == 'add' ? function add(a) {
                  fn.call(this, a === 0 ? 0 : a);return this;
                } // 30
                : function set(a, b) {
                  fn.call(this, a === 0 ? 0 : a, b);return this;
                } // 31
                ); // 32
              }; // 33
              if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
                // 34
                new C().entries().next(); // 35
              }))) {
                // 36
                // create collection constructor                                                                                   // 37
                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER); // 38
                redefineAll(C.prototype, methods); // 39
                meta.NEED = true; // 40
              } else {
                // 41
                var instance = new C(); // 42
                // early implementations not supports chaining                                                                     // 43
                var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // 44
                // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false                               // 45
                var THROWS_ON_PRIMITIVES = fails(function () {
                  instance.has(1);
                }); // 46
                // most early implementations doesn't supports iterables, most modern - not close it correctly                     // 47
                var ACCEPT_ITERABLES = $iterDetect(function (iter) {
                  new C(iter);
                }); // eslint-disable-line no-new                // 48
                // for early implementations -0 and +0 not the same                                                                // 49
                var BUGGY_ZERO = !IS_WEAK && fails(function () {
                  // 50
                  // V8 ~ Chromium 42- fails only with 5+ elements                                                                 // 51
                  var $instance = new C(); // 52
                  var index = 5; // 53
                  while (index--) $instance[ADDER](index, index); // 54
                  return !$instance.has(-0); // 55
                }); // 56
                if (!ACCEPT_ITERABLES) {
                  // 57
                  C = wrapper(function (target, iterable) {
                    // 58
                    anInstance(target, C, NAME); // 59
                    var that = inheritIfRequired(new Base(), target, C); // 60
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that); // 61
                    return that; // 62
                  }); // 63
                  C.prototype = proto; // 64
                  proto.constructor = C; // 65
                } // 66
                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                  // 67
                  fixMethod('delete'); // 68
                  fixMethod('has'); // 69
                  IS_MAP && fixMethod('get'); // 70
                } // 71
                if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // 72
                // weak collections should not contains .clear method                                                              // 73
                if (IS_WEAK && proto.clear) delete proto.clear; // 74
              } // 75
              // 76
              setToStringTag(C, NAME); // 77
              // 78
              O[NAME] = C; // 79
              $export($export.G + $export.W + $export.F * (C != Base), O); // 80
              // 81
              if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP); // 82
              // 83
              return C; // 84
            }; // 85
            // 86
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_iter-detect.js": function (_require101, _exports98, _module83) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_iter-detect.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var ITERATOR = _require101('./_wks')('iterator'); // 1
            var SAFE_CLOSING = false; // 2
            // 3
            try {
              // 4
              var riter = [7][ITERATOR](); // 5
              riter['return'] = function () {
                SAFE_CLOSING = true;
              }; // 6
              // eslint-disable-next-line no-throw-literal                                                                         // 7
              Array.from(riter, function () {
                throw 2;
              }); // 8
            } catch (e) {} /* empty */ // 9
            // 10
            _module83.exports = function (exec, skipClosing) {
              // 11
              if (!skipClosing && !SAFE_CLOSING) return false; // 12
              var safe = false; // 13
              try {
                // 14
                var arr = [7]; // 15
                var iter = arr[ITERATOR](); // 16
                iter.next = function () {
                  return { done: safe = true };
                }; // 17
                arr[ITERATOR] = function () {
                  return iter;
                }; // 18
                exec(arr); // 19
              } catch (e) {} /* empty */ // 20
              return safe; // 21
            }; // 22
            // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_inherit-if-required.js": function (_require102, _exports99, _module84) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_inherit-if-required.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require102('./_is-object'); // 1
            var setPrototypeOf = _require102('./_set-proto').set; // 2
            _module84.exports = function (that, target, C) {
              // 3
              var S = target.constructor; // 4
              var P; // 5
              if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                // 6
                setPrototypeOf(that, P); // 7
              }return that; // 8
            }; // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_set-proto.js": function (_require103, _exports100, _module85) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_set-proto.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
            /* eslint-disable no-proto */ // 2
            var isObject = _require103('./_is-object'); // 3
            var anObject = _require103('./_an-object'); // 4
            var check = function (O, proto) {
              // 5
              anObject(O); // 6
              if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!"); // 7
            }; // 8
            _module85.exports = { // 9
              set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
              function (test, buggy, set) {
                // 11
                try {
                  // 12
                  set = _require103('./_ctx')(Function.call, _require103('./_object-gopd').f(Object.prototype, '__proto__').set, 2); // 13
                  set(test, []); // 14
                  buggy = !(test instanceof Array); // 15
                } catch (e) {
                  buggy = true;
                } // 16
                return function setPrototypeOf(O, proto) {
                  // 17
                  check(O, proto); // 18
                  if (buggy) O.__proto__ = proto; // 19
                  else set(O, proto); // 20
                  return O; // 21
                }; // 22
              }({}, false) : undefined), // 23
              check: check // 24
            }; // 25
            // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.set.js": function (_require104, _exports101, _module86) {
            // 1
            var strong = _require104('./_collection-strong'); // 2
            var validate = _require104('./_validate-collection'); // 3
            var SET = 'Set'; // 4
            // 5
            // 23.2 Set Objects                                                                                                    // 6
            _module86.exports = _require104('./_collection')(SET, function (get) {
              // 7
              return function Set() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              }; // 8
            }, { // 9
              // 23.2.3.1 Set.prototype.add(value)                                                                                 // 10
              add: function add(value) {
                // 11
                return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value); // 12
              } // 13
            }, strong); // 14
            // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.iterator.js": function (_require105) {
            // 1
            var $at = _require105('./_string-at')(true); // 2
            // 3
            // 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
            _require105('./_iter-define')(String, 'String', function (iterated) {
              // 5
              this._t = String(iterated); // target                                                                                // 6
              this._i = 0; // next index                                                                            // 7
              // 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
            }, function () {
              // 9
              var O = this._t; // 10
              var index = this._i; // 11
              var point; // 12
              if (index >= O.length) return { value: undefined, done: true }; // 13
              point = $at(O, index); // 14
              this._i += point.length; // 15
              return { value: point, done: false }; // 16
            }); // 17
            // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-at.js": function (_require106, _exports102, _module87) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-at.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var toInteger = _require106('./_to-integer'); // 1
            var defined = _require106('./_defined'); // 2
            // true  -> String#at                                                                                                  // 3
            // false -> String#codePointAt                                                                                         // 4
            _module87.exports = function (TO_STRING) {
              // 5
              return function (that, pos) {
                // 6
                var s = String(defined(that)); // 7
                var i = toInteger(pos); // 8
                var l = s.length; // 9
                var a, b; // 10
                if (i < 0 || i >= l) return TO_STRING ? '' : undefined; // 11
                a = s.charCodeAt(i); // 12
                return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff // 13
                ? TO_STRING ? s.charAt(i) : a // 14
                : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000; // 15
              }; // 16
            }; // 17
            // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.is-array.js": function (_require107) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.is-array.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)                                                                              // 1
            var $export = _require107('./_export'); // 2
            // 3
            $export($export.S, 'Array', { isArray: _require107('./_is-array') }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.from.js": function (_require108) {
            // 1
            var ctx = _require108('./_ctx'); // 2
            var $export = _require108('./_export'); // 3
            var toObject = _require108('./_to-object'); // 4
            var call = _require108('./_iter-call'); // 5
            var isArrayIter = _require108('./_is-array-iter'); // 6
            var toLength = _require108('./_to-length'); // 7
            var createProperty = _require108('./_create-property'); // 8
            var getIterFn = _require108('./core.get-iterator-method'); // 9
            // 10
            $export($export.S + $export.F * !_require108('./_iter-detect')(function (iter) {
              Array.from(iter);
            }), 'Array', { // 11
              // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                            // 12
              from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
                // 13
                var O = toObject(arrayLike); // 14
                var C = typeof this == 'function' ? this : Array; // 15
                var aLen = arguments.length; // 16
                var mapfn = aLen > 1 ? arguments[1] : undefined; // 17
                var mapping = mapfn !== undefined; // 18
                var index = 0; // 19
                var iterFn = getIterFn(O); // 20
                var length, result, step, iterator; // 21
                if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // 22
                // if object isn't iterable or it's array with default iterator - use simple case                                  // 23
                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                  // 24
                  for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                    // 25
                    createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value); // 26
                  } // 27
                } else {
                  // 28
                  length = toLength(O.length); // 29
                  for (result = new C(length); length > index; index++) {
                    // 30
                    createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]); // 31
                  } // 32
                } // 33
                result.length = index; // 34
                return result; // 35
              } // 36
            }); // 37
            // 38
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_create-property.js": function (_require109, _exports103, _module88) {
            // 1
            var $defineProperty = _require109('./_object-dp'); // 2
            var createDesc = _require109('./_property-desc'); // 3
            // 4
            _module88.exports = function (object, index, value) {
              // 5
              if (index in object) $defineProperty.f(object, index, createDesc(0, value)); // 6
              else object[index] = value; // 7
            }; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.of.js": function (_require110) {
            // 1
            var $export = _require110('./_export'); // 2
            var createProperty = _require110('./_create-property'); // 3
            // 4
            // WebKit Array.of isn't generic                                                                                       // 5
            $export($export.S + $export.F * _require110('./_fails')(function () {
              // 6
              function F() {} /* empty */ // 7
              return !(Array.of.call(F) instanceof F); // 8
            }), 'Array', { // 9
              // 22.1.2.3 Array.of( ...items)                                                                                      // 10
              of: function of() /* ...args */{
                // 11
                var index = 0; // 12
                var aLen = arguments.length; // 13
                var result = new (typeof this == 'function' ? this : Array)(aLen); // 14
                while (aLen > index) createProperty(result, index, arguments[index++]); // 15
                result.length = aLen; // 16
                return result; // 17
              } // 18
            }); // 19
            // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.join.js": function (_require111) {
            // 1
            // 22.1.3.13 Array.prototype.join(separator)                                                                           // 2
            var $export = _require111('./_export'); // 3
            var toIObject = _require111('./_to-iobject'); // 4
            var arrayJoin = [].join; // 5
            // 6
            // fallback for not array-like strings                                                                                 // 7
            $export($export.P + $export.F * (_require111('./_iobject') != Object || !_require111('./_strict-method')(arrayJoin)), 'Array', {
              join: function join(separator) {
                // 9
                return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator); // 10
              } // 11
            }); // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_strict-method.js": function (_require112, _exports104, _module89) {
            // 1
            var fails = _require112('./_fails'); // 2
            // 3
            _module89.exports = function (method, arg) {
              // 4
              return !!method && fails(function () {
                // 5
                // eslint-disable-next-line no-useless-call                                                                        // 6
                arg ? method.call(null, function () {/* empty */}, 1) : method.call(null); // 7
              }); // 8
            }; // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.slice.js": function (_require113) {
            // 1
            var $export = _require113('./_export'); // 2
            var html = _require113('./_html'); // 3
            var cof = _require113('./_cof'); // 4
            var toAbsoluteIndex = _require113('./_to-absolute-index'); // 5
            var toLength = _require113('./_to-length'); // 6
            var arraySlice = [].slice; // 7
            // 8
            // fallback for not array-like ES3 strings and DOM objects                                                             // 9
            $export($export.P + $export.F * _require113('./_fails')(function () {
              // 10
              if (html) arraySlice.call(html); // 11
            }), 'Array', { // 12
              slice: function slice(begin, end) {
                // 13
                var len = toLength(this.length); // 14
                var klass = cof(this); // 15
                end = end === undefined ? len : end; // 16
                if (klass == 'Array') return arraySlice.call(this, begin, end); // 17
                var start = toAbsoluteIndex(begin, len); // 18
                var upTo = toAbsoluteIndex(end, len); // 19
                var size = toLength(upTo - start); // 20
                var cloned = Array(size); // 21
                var i = 0; // 22
                for (; i < size; i++) cloned[i] = klass == 'String' // 23
                ? this.charAt(start + i) // 24
                : this[start + i]; // 25
                return cloned; // 26
              } // 27
            }); // 28
            // 29
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.sort.js": function (_require114) {
            // 1
            var $export = _require114('./_export'); // 2
            var aFunction = _require114('./_a-function'); // 3
            var toObject = _require114('./_to-object'); // 4
            var fails = _require114('./_fails'); // 5
            var $sort = [].sort; // 6
            var test = [1, 2, 3]; // 7
            // 8
            $export($export.P + $export.F * (fails(function () {
              // 9
              // IE8-                                                                                                              // 10
              test.sort(undefined); // 11
            }) || !fails(function () {
              // 12
              // V8 bug                                                                                                            // 13
              test.sort(null); // 14
              // Old WebKit                                                                                                        // 15
            }) || !_require114('./_strict-method')($sort)), 'Array', { // 16
              // 22.1.3.25 Array.prototype.sort(comparefn)                                                                         // 17
              sort: function sort(comparefn) {
                // 18
                return comparefn === undefined // 19
                ? $sort.call(toObject(this)) // 20
                : $sort.call(toObject(this), aFunction(comparefn)); // 21
              } // 22
            }); // 23
            // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.for-each.js": function (_require115) {
            // 1
            var $export = _require115('./_export'); // 2
            var $forEach = _require115('./_array-methods')(0); // 3
            var STRICT = _require115('./_strict-method')([].forEach, true); // 4
            // 5
            $export($export.P + $export.F * !STRICT, 'Array', { // 6
              // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])                                             // 7
              forEach: function forEach(callbackfn /* , thisArg */) {
                // 8
                return $forEach(this, callbackfn, arguments[1]); // 9
              } // 10
            }); // 11
            // 12
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-methods.js": function (_require116, _exports105, _module90) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-methods.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 0 -> Array#forEach                                                                                                  // 1
            // 1 -> Array#map                                                                                                      // 2
            // 2 -> Array#filter                                                                                                   // 3
            // 3 -> Array#some                                                                                                     // 4
            // 4 -> Array#every                                                                                                    // 5
            // 5 -> Array#find                                                                                                     // 6
            // 6 -> Array#findIndex                                                                                                // 7
            var ctx = _require116('./_ctx'); // 8
            var IObject = _require116('./_iobject'); // 9
            var toObject = _require116('./_to-object'); // 10
            var toLength = _require116('./_to-length'); // 11
            var asc = _require116('./_array-species-create'); // 12
            _module90.exports = function (TYPE, $create) {
              // 13
              var IS_MAP = TYPE == 1; // 14
              var IS_FILTER = TYPE == 2; // 15
              var IS_SOME = TYPE == 3; // 16
              var IS_EVERY = TYPE == 4; // 17
              var IS_FIND_INDEX = TYPE == 6; // 18
              var NO_HOLES = TYPE == 5 || IS_FIND_INDEX; // 19
              var create = $create || asc; // 20
              return function ($this, callbackfn, that) {
                // 21
                var O = toObject($this); // 22
                var self = IObject(O); // 23
                var f = ctx(callbackfn, that, 3); // 24
                var length = toLength(self.length); // 25
                var index = 0; // 26
                var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined; // 27
                var val, res; // 28
                for (; length > index; index++) if (NO_HOLES || index in self) {
                  // 29
                  val = self[index]; // 30
                  res = f(val, index, O); // 31
                  if (TYPE) {
                    // 32
                    if (IS_MAP) result[index] = res; // map                                                                      // 33
                    else if (res) switch (TYPE) {// 34
                        case 3:
                          return true; // some                                                                     // 35
                        case 5:
                          return val; // find                                                                     // 36
                        case 6:
                          return index; // findIndex                                                                // 37
                        case 2:
                          result.push(val); // filter                                                                   // 38
                      } else if (IS_EVERY) return false; // every                                                                    // 39
                  } // 40
                } // 41
                return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result; // 42
              }; // 43
            }; // 44
            // 45
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-species-create.js": function (_require117, _exports106, _module91) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-species-create.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 9.4.2.3 ArraySpeciesCreate(originalArray, length)                                                                   // 1
            var speciesConstructor = _require117('./_array-species-constructor'); // 2
            // 3
            _module91.exports = function (original, length) {
              // 4
              return new (speciesConstructor(original))(length); // 5
            }; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-species-constructor.js": function (_require118, _exports107, _module92) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-species-constructor.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var isObject = _require118('./_is-object'); // 1
            var isArray = _require118('./_is-array'); // 2
            var SPECIES = _require118('./_wks')('species'); // 3
            // 4
            _module92.exports = function (original) {
              // 5
              var C; // 6
              if (isArray(original)) {
                // 7
                C = original.constructor; // 8
                // cross-realm fallback                                                                                            // 9
                if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined; // 10
                if (isObject(C)) {
                  // 11
                  C = C[SPECIES]; // 12
                  if (C === null) C = undefined; // 13
                } // 14
              }return C === undefined ? Array : C; // 15
            }; // 16
            // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.map.js": function (_require119) {
            // 1
            var $export = _require119('./_export'); // 2
            var $map = _require119('./_array-methods')(1); // 3
            // 4
            $export($export.P + $export.F * !_require119('./_strict-method')([].map, true), 'Array', { // 5
              // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])                                                 // 6
              map: function map(callbackfn /* , thisArg */) {
                // 7
                return $map(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.filter.js": function (_require120) {
            // 1
            var $export = _require120('./_export'); // 2
            var $filter = _require120('./_array-methods')(2); // 3
            // 4
            $export($export.P + $export.F * !_require120('./_strict-method')([].filter, true), 'Array', { // 5
              // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])                                               // 6
              filter: function filter(callbackfn /* , thisArg */) {
                // 7
                return $filter(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.some.js": function (_require121) {
            // 1
            var $export = _require121('./_export'); // 2
            var $some = _require121('./_array-methods')(3); // 3
            // 4
            $export($export.P + $export.F * !_require121('./_strict-method')([].some, true), 'Array', { // 5
              // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])                                                // 6
              some: function some(callbackfn /* , thisArg */) {
                // 7
                return $some(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.every.js": function (_require122) {
            // 1
            var $export = _require122('./_export'); // 2
            var $every = _require122('./_array-methods')(4); // 3
            // 4
            $export($export.P + $export.F * !_require122('./_strict-method')([].every, true), 'Array', { // 5
              // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])                                                // 6
              every: function every(callbackfn /* , thisArg */) {
                // 7
                return $every(this, callbackfn, arguments[1]); // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.reduce.js": function (_require123) {
            // 1
            var $export = _require123('./_export'); // 2
            var $reduce = _require123('./_array-reduce'); // 3
            // 4
            $export($export.P + $export.F * !_require123('./_strict-method')([].reduce, true), 'Array', { // 5
              // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])                                         // 6
              reduce: function reduce(callbackfn /* , initialValue */) {
                // 7
                return $reduce(this, callbackfn, arguments.length, arguments[1], false); // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-reduce.js": function (_require124, _exports108, _module93) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_array-reduce.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var aFunction = _require124('./_a-function'); // 1
            var toObject = _require124('./_to-object'); // 2
            var IObject = _require124('./_iobject'); // 3
            var toLength = _require124('./_to-length'); // 4
            // 5
            _module93.exports = function (that, callbackfn, aLen, memo, isRight) {
              // 6
              aFunction(callbackfn); // 7
              var O = toObject(that); // 8
              var self = IObject(O); // 9
              var length = toLength(O.length); // 10
              var index = isRight ? length - 1 : 0; // 11
              var i = isRight ? -1 : 1; // 12
              if (aLen < 2) for (;;) {
                // 13
                if (index in self) {
                  // 14
                  memo = self[index]; // 15
                  index += i; // 16
                  break; // 17
                } // 18
                index += i; // 19
                if (isRight ? index < 0 : length <= index) {
                  // 20
                  throw TypeError('Reduce of empty array with no initial value'); // 21
                } // 22
              } // 23
              for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
                // 24
                memo = callbackfn(memo, self[index], index, O); // 25
              } // 26
              return memo; // 27
            }; // 28
            // 29
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.reduce-right.js": function (_require125) {
            // 1
            var $export = _require125('./_export'); // 2
            var $reduce = _require125('./_array-reduce'); // 3
            // 4
            $export($export.P + $export.F * !_require125('./_strict-method')([].reduceRight, true), 'Array', { // 5
              // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])                                    // 6
              reduceRight: function reduceRight(callbackfn /* , initialValue */) {
                // 7
                return $reduce(this, callbackfn, arguments.length, arguments[1], true); // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.index-of.js": function (_require126) {
            // 1
            var $export = _require126('./_export'); // 2
            var $indexOf = _require126('./_array-includes')(false); // 3
            var $native = [].indexOf; // 4
            var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0; // 5
            // 6
            $export($export.P + $export.F * (NEGATIVE_ZERO || !_require126('./_strict-method')($native)), 'Array', { // 7
              // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])                                        // 8
              indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
                // 9
                return NEGATIVE_ZERO // 10
                // convert -0 to +0                                                                                              // 11
                ? $native.apply(this, arguments) || 0 // 12
                : $indexOf(this, searchElement, arguments[1]); // 13
              } // 14
            }); // 15
            // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.last-index-of.js": function (_require127) {
            // 1
            var $export = _require127('./_export'); // 2
            var toIObject = _require127('./_to-iobject'); // 3
            var toInteger = _require127('./_to-integer'); // 4
            var toLength = _require127('./_to-length'); // 5
            var $native = [].lastIndexOf; // 6
            var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0; // 7
            // 8
            $export($export.P + $export.F * (NEGATIVE_ZERO || !_require127('./_strict-method')($native)), 'Array', { // 9
              // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])                                    // 10
              lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
                // 11
                // convert -0 to +0                                                                                                // 12
                if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0; // 13
                var O = toIObject(this); // 14
                var length = toLength(O.length); // 15
                var index = length - 1; // 16
                if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1])); // 17
                if (index < 0) index = length + index; // 18
                for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0; // 19
                return -1; // 20
              } // 21
            }); // 22
            // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.copy-within.js": function (_require128) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.copy-within.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                               // 1
            var $export = _require128('./_export'); // 2
            // 3
            $export($export.P, 'Array', { copyWithin: _require128('./_array-copy-within') }); // 4
            // 5
            _require128('./_add-to-unscopables')('copyWithin'); // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-copy-within.js": function (_require129, _exports109, _module94) {
            // 2
            var toObject = _require129('./_to-object'); // 3
            var toAbsoluteIndex = _require129('./_to-absolute-index'); // 4
            var toLength = _require129('./_to-length'); // 5
            // 6
            _module94.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
              // 7
              var O = toObject(this); // 8
              var len = toLength(O.length); // 9
              var to = toAbsoluteIndex(target, len); // 10
              var from = toAbsoluteIndex(start, len); // 11
              var end = arguments.length > 2 ? arguments[2] : undefined; // 12
              var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to); // 13
              var inc = 1; // 14
              if (from < to && to < from + count) {
                // 15
                inc = -1; // 16
                from += count - 1; // 17
                to += count - 1; // 18
              } // 19
              while (count-- > 0) {
                // 20
                if (from in O) O[to] = O[from]; // 21
                else delete O[to]; // 22
                to += inc; // 23
                from += inc; // 24
              }return O; // 25
            }; // 26
            // 27
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_add-to-unscopables.js": function (_require130, _exports110, _module95) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_add-to-unscopables.js                                                                 //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.31 Array.prototype[@@unscopables]                                                                            // 1
            var UNSCOPABLES = _require130('./_wks')('unscopables'); // 2
            var ArrayProto = Array.prototype; // 3
            if (ArrayProto[UNSCOPABLES] == undefined) _require130('./_hide')(ArrayProto, UNSCOPABLES, {}); // 4
            _module95.exports = function (key) {
              // 5
              ArrayProto[UNSCOPABLES][key] = true; // 6
            }; // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.fill.js": function (_require131) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.fill.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                                  // 1
            var $export = _require131('./_export'); // 2
            // 3
            $export($export.P, 'Array', { fill: _require131('./_array-fill') }); // 4
            // 5
            _require131('./_add-to-unscopables')('fill'); // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_array-fill.js": function (_require132, _exports111, _module96) {
            // 2
            var toObject = _require132('./_to-object'); // 3
            var toAbsoluteIndex = _require132('./_to-absolute-index'); // 4
            var toLength = _require132('./_to-length'); // 5
            _module96.exports = function fill(value /* , start = 0, end = @length */) {
              // 6
              var O = toObject(this); // 7
              var length = toLength(O.length); // 8
              var aLen = arguments.length; // 9
              var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length); // 10
              var end = aLen > 2 ? arguments[2] : undefined; // 11
              var endPos = end === undefined ? length : toAbsoluteIndex(end, length); // 12
              while (endPos > index) O[index++] = value; // 13
              return O; // 14
            }; // 15
            // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.find.js": function (_require133) {
            // 1
            // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)                                                       // 2
            var $export = _require133('./_export'); // 3
            var $find = _require133('./_array-methods')(5); // 4
            var KEY = 'find'; // 5
            var forced = true; // 6
            // Shouldn't skip holes                                                                                                // 7
            if (KEY in []) Array(1)[KEY](function () {
              forced = false;
            }); // 8
            $export($export.P + $export.F * forced, 'Array', { // 9
              find: function find(callbackfn /* , that = undefined */) {
                // 10
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 11
              } // 12
            }); // 13
            _require133('./_add-to-unscopables')(KEY); // 14
            // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.find-index.js": function (_require134) {
            // 1
            // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)                                                  // 2
            var $export = _require134('./_export'); // 3
            var $find = _require134('./_array-methods')(6); // 4
            var KEY = 'findIndex'; // 5
            var forced = true; // 6
            // Shouldn't skip holes                                                                                                // 7
            if (KEY in []) Array(1)[KEY](function () {
              forced = false;
            }); // 8
            $export($export.P + $export.F * forced, 'Array', { // 9
              findIndex: function findIndex(callbackfn /* , that = undefined */) {
                // 10
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 11
              } // 12
            }); // 13
            _require134('./_add-to-unscopables')(KEY); // 14
            // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.species.js": function (_require135) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.array.species.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require135('./_set-species')('Array'); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.array.iterator.js": function (_require136, _exports112, _module97) {
            // 1
            var addToUnscopables = _require136('./_add-to-unscopables'); // 2
            var step = _require136('./_iter-step'); // 3
            var Iterators = _require136('./_iterators'); // 4
            var toIObject = _require136('./_to-iobject'); // 5
            // 6
            // 22.1.3.4 Array.prototype.entries()                                                                                  // 7
            // 22.1.3.13 Array.prototype.keys()                                                                                    // 8
            // 22.1.3.29 Array.prototype.values()                                                                                  // 9
            // 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
            _module97.exports = _require136('./_iter-define')(Array, 'Array', function (iterated, kind) {
              // 11
              this._t = toIObject(iterated); // target                                                                             // 12
              this._i = 0; // next index                                                                         // 13
              this._k = kind; // kind                                                                               // 14
              // 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
            }, function () {
              // 16
              var O = this._t; // 17
              var kind = this._k; // 18
              var index = this._i++; // 19
              if (!O || index >= O.length) {
                // 20
                this._t = undefined; // 21
                return step(1); // 22
              } // 23
              if (kind == 'keys') return step(0, index); // 24
              if (kind == 'values') return step(0, O[index]); // 25
              return step(0, [index, O[index]]); // 26
            }, 'values'); // 27
            // 28
            // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
            Iterators.Arguments = Iterators.Array; // 30
            // 31
            addToUnscopables('keys'); // 32
            addToUnscopables('values'); // 33
            addToUnscopables('entries'); // 34
            // 35
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.function.bind.js": function (_require137) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.function.bind.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)                                                       // 1
            var $export = _require137('./_export'); // 2
            // 3
            $export($export.P, 'Function', { bind: _require137('./_bind') }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_bind.js": function (_require138, _exports113, _module98) {
            // 1
            var aFunction = _require138('./_a-function'); // 2
            var isObject = _require138('./_is-object'); // 3
            var invoke = _require138('./_invoke'); // 4
            var arraySlice = [].slice; // 5
            var factories = {}; // 6
            // 7
            var construct = function (F, len, args) {
              // 8
              if (!(len in factories)) {
                // 9
                for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']'; // 10
                // eslint-disable-next-line no-new-func                                                                            // 11
                factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')'); // 12
              }return factories[len](F, args); // 13
            }; // 14
            // 15
            _module98.exports = Function.bind || function bind(that /* , ...args */) {
              // 16
              var fn = aFunction(this); // 17
              var partArgs = arraySlice.call(arguments, 1); // 18
              var bound = function () /* args... */{
                // 19
                var args = partArgs.concat(arraySlice.call(arguments)); // 20
                return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that); // 21
              }; // 22
              if (isObject(fn.prototype)) bound.prototype = fn.prototype; // 23
              return bound; // 24
            }; // 25
            // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_invoke.js": function (_require139, _exports114, _module99) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_invoke.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // fast apply, http://jsperf.lnkit.com/fast-apply/5                                                                    // 1
            _module99.exports = function (fn, args, that) {
              // 2
              var un = that === undefined; // 3
              switch (args.length) {// 4
                case 0:
                  return un ? fn() // 5
                  : fn.call(that); // 6
                case 1:
                  return un ? fn(args[0]) // 7
                  : fn.call(that, args[0]); // 8
                case 2:
                  return un ? fn(args[0], args[1]) // 9
                  : fn.call(that, args[0], args[1]); // 10
                case 3:
                  return un ? fn(args[0], args[1], args[2]) // 11
                  : fn.call(that, args[0], args[1], args[2]); // 12
                case 4:
                  return un ? fn(args[0], args[1], args[2], args[3]) // 13
                  : fn.call(that, args[0], args[1], args[2], args[3]); // 14
              }return fn.apply(that, args); // 15
            }; // 16
            // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.function.name.js": function (_require140) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.function.name.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var dP = _require140('./_object-dp').f; // 1
            var FProto = Function.prototype; // 2
            var nameRE = /^\s*function ([^ (]*)/; // 3
            var NAME = 'name'; // 4
            // 5
            // 19.2.4.2 name                                                                                                       // 6
            NAME in FProto || _require140('./_descriptors') && dP(FProto, NAME, { // 7
              configurable: true, // 8
              get: function () {
                // 9
                try {
                  // 10
                  return ('' + this).match(nameRE)[1]; // 11
                } catch (e) {
                  // 12
                  return ''; // 13
                } // 14
              } // 15
            }); // 16
            // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.function.has-instance.js": function (_require141) {
            // 1
            var isObject = _require141('./_is-object'); // 2
            var getPrototypeOf = _require141('./_object-gpo'); // 3
            var HAS_INSTANCE = _require141('./_wks')('hasInstance'); // 4
            var FunctionProto = Function.prototype; // 5
            // 19.2.3.6 Function.prototype[@@hasInstance](V)                                                                       // 6
            if (!(HAS_INSTANCE in FunctionProto)) _require141('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
                // 7
                if (typeof this != 'function' || !isObject(O)) return false; // 8
                if (!isObject(this.prototype)) return O instanceof this; // 9
                // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:                               // 10
                while (O = getPrototypeOf(O)) if (this.prototype === O) return true; // 11
                return false; // 12
              } }); // 13
            // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.acosh.js": function (_require142) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.acosh.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.3 Math.acosh(x)                                                                                              // 1
            var $export = _require142('./_export'); // 2
            var log1p = _require142('./_math-log1p'); // 3
            var sqrt = Math.sqrt; // 4
            var $acosh = Math.acosh; // 5
            // 6
            $export($export.S + $export.F * !($acosh // 7
            // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509                                                        // 8
            && Math.floor($acosh(Number.MAX_VALUE)) == 710 // 9
            // Tor Browser bug: Math.acosh(Infinity) -> NaN                                                                      // 10
            && $acosh(Infinity) == Infinity // 11
            ), 'Math', { // 12
              acosh: function acosh(x) {
                // 13
                return (x = +x) < 1 ? NaN : x > 94906265.62425156 // 14
                ? Math.log(x) + Math.LN2 // 15
                : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1)); // 16
              } // 17
            }); // 18
            // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_math-log1p.js": function (_require143, _exports115, _module100) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_math-log1p.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.20 Math.log1p(x)                                                                                             // 1
            _module100.exports = Math.log1p || function log1p(x) {
              // 2
              return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x); // 3
            }; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.asinh.js": function (_require144) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.asinh.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.5 Math.asinh(x)                                                                                              // 1
            var $export = _require144('./_export'); // 2
            var $asinh = Math.asinh; // 3
            // 4
            function asinh(x) {
              // 5
              return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1)); // 6
            } // 7
            // 8
            // Tor Browser bug: Math.asinh(0) -> -0                                                                                // 9
            $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.atanh.js": function (_require145) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.atanh.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.7 Math.atanh(x)                                                                                              // 1
            var $export = _require145('./_export'); // 2
            var $atanh = Math.atanh; // 3
            // 4
            // Tor Browser bug: Math.atanh(-0) -> 0                                                                                // 5
            $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', { // 6
              atanh: function atanh(x) {
                // 7
                return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2; // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.cbrt.js": function (_require146) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.cbrt.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.9 Math.cbrt(x)                                                                                               // 1
            var $export = _require146('./_export'); // 2
            var sign = _require146('./_math-sign'); // 3
            // 4
            $export($export.S, 'Math', { // 5
              cbrt: function cbrt(x) {
                // 6
                return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3); // 7
              } // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_math-sign.js": function (_require147, _exports116, _module101) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_math-sign.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.28 Math.sign(x)                                                                                              // 1
            _module101.exports = Math.sign || function sign(x) {
              // 2
              // eslint-disable-next-line no-self-compare                                                                          // 3
              return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.clz32.js": function (_require148) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.clz32.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.11 Math.clz32(x)                                                                                             // 1
            var $export = _require148('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              clz32: function clz32(x) {
                // 5
                return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32; // 6
              } // 7
            }); // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.cosh.js": function (_require149) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.cosh.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.12 Math.cosh(x)                                                                                              // 1
            var $export = _require149('./_export'); // 2
            var exp = Math.exp; // 3
            // 4
            $export($export.S, 'Math', { // 5
              cosh: function cosh(x) {
                // 6
                return (exp(x = +x) + exp(-x)) / 2; // 7
              } // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.expm1.js": function (_require150) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.expm1.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.14 Math.expm1(x)                                                                                             // 1
            var $export = _require150('./_export'); // 2
            var $expm1 = _require150('./_math-expm1'); // 3
            // 4
            $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 }); // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_math-expm1.js": function (_require151, _exports117, _module102) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_math-expm1.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.14 Math.expm1(x)                                                                                             // 1
            var $expm1 = Math.expm1; // 2
            _module102.exports = !$expm1 // 3
            // Old FF bug                                                                                                        // 4
            || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // 5
            // Tor Browser bug                                                                                                   // 6
            || $expm1(-2e-17) != -2e-17 // 7
            ? function expm1(x) {
              // 8
              return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1; // 9
            } : $expm1; // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.fround.js": function (_require152) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.fround.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.16 Math.fround(x)                                                                                            // 1
            var $export = _require152('./_export'); // 2
            // 3
            $export($export.S, 'Math', { fround: _require152('./_math-fround') }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_math-fround.js": function (_require153, _exports118, _module103) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_math-fround.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.16 Math.fround(x)                                                                                            // 1
            var sign = _require153('./_math-sign'); // 2
            var pow = Math.pow; // 3
            var EPSILON = pow(2, -52); // 4
            var EPSILON32 = pow(2, -23); // 5
            var MAX32 = pow(2, 127) * (2 - EPSILON32); // 6
            var MIN32 = pow(2, -126); // 7
            // 8
            var roundTiesToEven = function (n) {
              // 9
              return n + 1 / EPSILON - 1 / EPSILON; // 10
            }; // 11
            // 12
            _module103.exports = Math.fround || function fround(x) {
              // 13
              var $abs = Math.abs(x); // 14
              var $sign = sign(x); // 15
              var a, result; // 16
              if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32; // 17
              a = (1 + EPSILON32 / EPSILON) * $abs; // 18
              result = a - (a - $abs); // 19
              // eslint-disable-next-line no-self-compare                                                                          // 20
              if (result > MAX32 || result != result) return $sign * Infinity; // 21
              return $sign * result; // 22
            }; // 23
            // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.hypot.js": function (_require154) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.hypot.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])                                                                      // 1
            var $export = _require154('./_export'); // 2
            var abs = Math.abs; // 3
            // 4
            $export($export.S, 'Math', { // 5
              hypot: function hypot(value1, value2) {
                // eslint-disable-line no-unused-vars                                        // 6
                var sum = 0; // 7
                var i = 0; // 8
                var aLen = arguments.length; // 9
                var larg = 0; // 10
                var arg, div; // 11
                while (i < aLen) {
                  // 12
                  arg = abs(arguments[i++]); // 13
                  if (larg < arg) {
                    // 14
                    div = larg / arg; // 15
                    sum = sum * div * div + 1; // 16
                    larg = arg; // 17
                  } else if (arg > 0) {
                    // 18
                    div = arg / larg; // 19
                    sum += div * div; // 20
                  } else sum += arg; // 21
                } // 22
                return larg === Infinity ? Infinity : larg * Math.sqrt(sum); // 23
              } // 24
            }); // 25
            // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.imul.js": function (_require155) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.imul.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.18 Math.imul(x, y)                                                                                           // 1
            var $export = _require155('./_export'); // 2
            var $imul = Math.imul; // 3
            // 4
            // some WebKit versions fails with big numbers, some has wrong arity                                                   // 5
            $export($export.S + $export.F * _require155('./_fails')(function () {
              // 6
              return $imul(0xffffffff, 5) != -5 || $imul.length != 2; // 7
            }), 'Math', { // 8
              imul: function imul(x, y) {
                // 9
                var UINT16 = 0xffff; // 10
                var xn = +x; // 11
                var yn = +y; // 12
                var xl = UINT16 & xn; // 13
                var yl = UINT16 & yn; // 14
                return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0); // 15
              } // 16
            }); // 17
            // 18
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.log10.js": function (_require156) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.log10.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.21 Math.log10(x)                                                                                             // 1
            var $export = _require156('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              log10: function log10(x) {
                // 5
                return Math.log(x) * Math.LOG10E; // 6
              } // 7
            }); // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.log1p.js": function (_require157) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.log1p.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.20 Math.log1p(x)                                                                                             // 1
            var $export = _require157('./_export'); // 2
            // 3
            $export($export.S, 'Math', { log1p: _require157('./_math-log1p') }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.log2.js": function (_require158) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.log2.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.22 Math.log2(x)                                                                                              // 1
            var $export = _require158('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              log2: function log2(x) {
                // 5
                return Math.log(x) / Math.LN2; // 6
              } // 7
            }); // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.sign.js": function (_require159) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.sign.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.28 Math.sign(x)                                                                                              // 1
            var $export = _require159('./_export'); // 2
            // 3
            $export($export.S, 'Math', { sign: _require159('./_math-sign') }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.sinh.js": function (_require160) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.sinh.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.30 Math.sinh(x)                                                                                              // 1
            var $export = _require160('./_export'); // 2
            var expm1 = _require160('./_math-expm1'); // 3
            var exp = Math.exp; // 4
            // 5
            // V8 near Chromium 38 has a problem with very small numbers                                                           // 6
            $export($export.S + $export.F * _require160('./_fails')(function () {
              // 7
              return !Math.sinh(-2e-17) != -2e-17; // 8
            }), 'Math', { // 9
              sinh: function sinh(x) {
                // 10
                return Math.abs(x = +x) < 1 // 11
                ? (expm1(x) - expm1(-x)) / 2 // 12
                : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2); // 13
              } // 14
            }); // 15
            // 16
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.tanh.js": function (_require161) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.tanh.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.33 Math.tanh(x)                                                                                              // 1
            var $export = _require161('./_export'); // 2
            var expm1 = _require161('./_math-expm1'); // 3
            var exp = Math.exp; // 4
            // 5
            $export($export.S, 'Math', { // 6
              tanh: function tanh(x) {
                // 7
                var a = expm1(x = +x); // 8
                var b = expm1(-x); // 9
                return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x)); // 10
              } // 11
            }); // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.math.trunc.js": function (_require162) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.math.trunc.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.2.2.34 Math.trunc(x)                                                                                             // 1
            var $export = _require162('./_export'); // 2
            // 3
            $export($export.S, 'Math', { // 4
              trunc: function trunc(it) {
                // 5
                return (it > 0 ? Math.floor : Math.ceil)(it); // 6
              } // 7
            }); // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.create.js": function (_require163) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.create.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require163('./_export'); // 1
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
            $export($export.S, 'Object', { create: _require163('./_object-create') }); // 3
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.define-property.js": function (_require164) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.define-property.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require164('./_export'); // 1
            // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)                                                         // 2
            $export($export.S + $export.F * !_require164('./_descriptors'), 'Object', { defineProperty: _require164('./_object-dp').f }); // 3
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.define-properties.js": function (_require165) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.define-properties.js                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require165('./_export'); // 1
            // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)                                                          // 2
            $export($export.S + $export.F * !_require165('./_descriptors'), 'Object', { defineProperties: _require165('./_object-dps') });
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.get-own-property-descriptor.js": function (_require166) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.get-own-property-descriptor.js                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                      // 1
            var toIObject = _require166('./_to-iobject'); // 2
            var $getOwnPropertyDescriptor = _require166('./_object-gopd').f; // 3
            // 4
            _require166('./_object-sap')('getOwnPropertyDescriptor', function () {
              // 5
              return function getOwnPropertyDescriptor(it, key) {
                // 6
                return $getOwnPropertyDescriptor(toIObject(it), key); // 7
              }; // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-sap.js": function (_require167, _exports119, _module104) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-sap.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // most Object methods by ES6 should accept primitives                                                                 // 1
            var $export = _require167('./_export'); // 2
            var core = _require167('./_core'); // 3
            var fails = _require167('./_fails'); // 4
            _module104.exports = function (KEY, exec) {
              // 5
              var fn = (core.Object || {})[KEY] || Object[KEY]; // 6
              var exp = {}; // 7
              exp[KEY] = exec(fn); // 8
              $export($export.S + $export.F * fails(function () {
                fn(1);
              }), 'Object', exp); // 9
            }; // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.get-prototype-of.js": function (_require168) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.get-prototype-of.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.9 Object.getPrototypeOf(O)                                                                                   // 1
            var toObject = _require168('./_to-object'); // 2
            var $getPrototypeOf = _require168('./_object-gpo'); // 3
            // 4
            _require168('./_object-sap')('getPrototypeOf', function () {
              // 5
              return function getPrototypeOf(it) {
                // 6
                return $getPrototypeOf(toObject(it)); // 7
              }; // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.keys.js": function (_require169) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.keys.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.14 Object.keys(O)                                                                                            // 1
            var toObject = _require169('./_to-object'); // 2
            var $keys = _require169('./_object-keys'); // 3
            // 4
            _require169('./_object-sap')('keys', function () {
              // 5
              return function keys(it) {
                // 6
                return $keys(toObject(it)); // 7
              }; // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.get-own-property-names.js": function (_require170) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.get-own-property-names.js                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                              // 1
            _require170('./_object-sap')('getOwnPropertyNames', function () {
              // 2
              return _require170('./_object-gopn-ext').f; // 3
            }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.freeze.js": function (_require171) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.freeze.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.5 Object.freeze(O)                                                                                           // 1
            var isObject = _require171('./_is-object'); // 2
            var meta = _require171('./_meta').onFreeze; // 3
            // 4
            _require171('./_object-sap')('freeze', function ($freeze) {
              // 5
              return function freeze(it) {
                // 6
                return $freeze && isObject(it) ? $freeze(meta(it)) : it; // 7
              }; // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.seal.js": function (_require172) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.seal.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.17 Object.seal(O)                                                                                            // 1
            var isObject = _require172('./_is-object'); // 2
            var meta = _require172('./_meta').onFreeze; // 3
            // 4
            _require172('./_object-sap')('seal', function ($seal) {
              // 5
              return function seal(it) {
                // 6
                return $seal && isObject(it) ? $seal(meta(it)) : it; // 7
              }; // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.prevent-extensions.js": function (_require173) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.prevent-extensions.js                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.15 Object.preventExtensions(O)                                                                               // 1
            var isObject = _require173('./_is-object'); // 2
            var meta = _require173('./_meta').onFreeze; // 3
            // 4
            _require173('./_object-sap')('preventExtensions', function ($preventExtensions) {
              // 5
              return function preventExtensions(it) {
                // 6
                return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it; // 7
              }; // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is-frozen.js": function (_require174) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is-frozen.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.12 Object.isFrozen(O)                                                                                        // 1
            var isObject = _require174('./_is-object'); // 2
            // 3
            _require174('./_object-sap')('isFrozen', function ($isFrozen) {
              // 4
              return function isFrozen(it) {
                // 5
                return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true; // 6
              }; // 7
            }); // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is-sealed.js": function (_require175) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is-sealed.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.13 Object.isSealed(O)                                                                                        // 1
            var isObject = _require175('./_is-object'); // 2
            // 3
            _require175('./_object-sap')('isSealed', function ($isSealed) {
              // 4
              return function isSealed(it) {
                // 5
                return isObject(it) ? $isSealed ? $isSealed(it) : false : true; // 6
              }; // 7
            }); // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is-extensible.js": function (_require176) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is-extensible.js                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.2.11 Object.isExtensible(O)                                                                                    // 1
            var isObject = _require176('./_is-object'); // 2
            // 3
            _require176('./_object-sap')('isExtensible', function ($isExtensible) {
              // 4
              return function isExtensible(it) {
                // 5
                return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false; // 6
              }; // 7
            }); // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.assign.js": function (_require177) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.assign.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.3.1 Object.assign(target, source)                                                                              // 1
            var $export = _require177('./_export'); // 2
            // 3
            $export($export.S + $export.F, 'Object', { assign: _require177('./_object-assign') }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-assign.js": function (_require178, _exports120, _module105) {
            // 1
            // 19.1.2.1 Object.assign(target, source, ...)                                                                         // 2
            var getKeys = _require178('./_object-keys'); // 3
            var gOPS = _require178('./_object-gops'); // 4
            var pIE = _require178('./_object-pie'); // 5
            var toObject = _require178('./_to-object'); // 6
            var IObject = _require178('./_iobject'); // 7
            var $assign = Object.assign; // 8
            // 9
            // should work with symbols and should have deterministic property order (V8 bug)                                      // 10
            _module105.exports = !$assign || _require178('./_fails')(function () {
              // 11
              var A = {}; // 12
              var B = {}; // 13
              // eslint-disable-next-line no-undef                                                                                 // 14
              var S = Symbol(); // 15
              var K = 'abcdefghijklmnopqrst'; // 16
              A[S] = 7; // 17
              K.split('').forEach(function (k) {
                B[k] = k;
              }); // 18
              return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K; // 19
            }) ? function assign(target, source) {
              // eslint-disable-line no-unused-vars                                           // 20
              var T = toObject(target); // 21
              var aLen = arguments.length; // 22
              var index = 1; // 23
              var getSymbols = gOPS.f; // 24
              var isEnum = pIE.f; // 25
              while (aLen > index) {
                // 26
                var S = IObject(arguments[index++]); // 27
                var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S); // 28
                var length = keys.length; // 29
                var j = 0; // 30
                var key; // 31
                while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key]; // 32
              }return T; // 33
            } : $assign; // 34
            // 35
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.is.js": function (_require179) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.is.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.3.10 Object.is(value1, value2)                                                                                 // 1
            var $export = _require179('./_export'); // 2
            $export($export.S, 'Object', { is: _require179('./_same-value') }); // 3
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_same-value.js": function (_require180, _exports121, _module106) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_same-value.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.9 SameValue(x, y)                                                                                               // 1
            _module106.exports = Object.is || function is(x, y) {
              // 2
              // eslint-disable-next-line no-self-compare                                                                          // 3
              return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y; // 4
            }; // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.set-prototype-of.js": function (_require181) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.object.set-prototype-of.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
            var $export = _require181('./_export'); // 2
            $export($export.S, 'Object', { setPrototypeOf: _require181('./_set-proto').set }); // 3
            // 4
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.object.to-string.js": function (_require182) {
            // 1
            // 19.1.3.6 Object.prototype.toString()                                                                                // 2
            var classof = _require182('./_classof'); // 3
            var test = {}; // 4
            test[_require182('./_wks')('toStringTag')] = 'z'; // 5
            if (test + '' != '[object z]') {
              // 6
              _require182('./_redefine')(Object.prototype, 'toString', function toString() {
                // 7
                return '[object ' + classof(this) + ']'; // 8
              }, true); // 9
            } // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.constructor.js": function (_require183) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.constructor.js                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require183('./_global'); // 1
            var inheritIfRequired = _require183('./_inherit-if-required'); // 2
            var dP = _require183('./_object-dp').f; // 3
            var gOPN = _require183('./_object-gopn').f; // 4
            var isRegExp = _require183('./_is-regexp'); // 5
            var $flags = _require183('./_flags'); // 6
            var $RegExp = global.RegExp; // 7
            var Base = $RegExp; // 8
            var proto = $RegExp.prototype; // 9
            var re1 = /a/g; // 10
            var re2 = /a/g; // 11
            // "new" creates a new object, old webkit buggy here                                                                   // 12
            var CORRECT_NEW = new $RegExp(re1) !== re1; // 13
            // 14
            if (_require183('./_descriptors') && (!CORRECT_NEW || _require183('./_fails')(function () {
              // 15
              re2[_require183('./_wks')('match')] = false; // 16
              // RegExp constructor can alter flags and IsRegExp works correct with @@match                                        // 17
              return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i'; // 18
            }))) {
              // 19
              $RegExp = function RegExp(p, f) {
                // 20
                var tiRE = this instanceof $RegExp; // 21
                var piRE = isRegExp(p); // 22
                var fiU = f === undefined; // 23
                return !tiRE && piRE && p.constructor === $RegExp && fiU ? p // 24
                : inheritIfRequired(CORRECT_NEW // 25
                ? new Base(piRE && !fiU ? p.source : p, f) // 26
                : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f) // 27
                , tiRE ? this : proto, $RegExp); // 28
              }; // 29
              var proxy = function (key) {
                // 30
                key in $RegExp || dP($RegExp, key, { // 31
                  configurable: true, // 32
                  get: function () {
                    return Base[key];
                  }, // 33
                  set: function (it) {
                    Base[key] = it;
                  } // 34
                }); // 35
              }; // 36
              for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]); // 37
              proto.constructor = $RegExp; // 38
              $RegExp.prototype = proto; // 39
              _require183('./_redefine')(global, 'RegExp', $RegExp); // 40
            } // 41
            // 42
            _require183('./_set-species')('RegExp'); // 43
            // 44
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-regexp.js": function (_require184, _exports122, _module107) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-regexp.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.2.8 IsRegExp(argument)                                                                                            // 1
            var isObject = _require184('./_is-object'); // 2
            var cof = _require184('./_cof'); // 3
            var MATCH = _require184('./_wks')('match'); // 4
            _module107.exports = function (it) {
              // 5
              var isRegExp; // 6
              return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp'); // 7
            }; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_flags.js": function (_require185, _exports123, _module108) {
            // 1
            // 21.2.5.3 get RegExp.prototype.flags                                                                                 // 2
            var anObject = _require185('./_an-object'); // 3
            _module108.exports = function () {
              // 4
              var that = anObject(this); // 5
              var result = ''; // 6
              if (that.global) result += 'g'; // 7
              if (that.ignoreCase) result += 'i'; // 8
              if (that.multiline) result += 'm'; // 9
              if (that.unicode) result += 'u'; // 10
              if (that.sticky) result += 'y'; // 11
              return result; // 12
            }; // 13
            // 14
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.to-string.js": function (_require186) {
            // 1
            _require186('./es6.regexp.flags'); // 2
            var anObject = _require186('./_an-object'); // 3
            var $flags = _require186('./_flags'); // 4
            var DESCRIPTORS = _require186('./_descriptors'); // 5
            var TO_STRING = 'toString'; // 6
            var $toString = /./[TO_STRING]; // 7
            // 8
            var define = function (fn) {
              // 9
              _require186('./_redefine')(RegExp.prototype, TO_STRING, fn, true); // 10
            }; // 11
            // 12
            // 21.2.5.14 RegExp.prototype.toString()                                                                               // 13
            if (_require186('./_fails')(function () {
              return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
            })) {
              // 14
              define(function toString() {
                // 15
                var R = anObject(this); // 16
                return '/'.concat(R.source, '/', // 17
                'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined); // 18
              }); // 19
              // FF44- RegExp#toString has a wrong name                                                                              // 20
            } else if ($toString.name != TO_STRING) {
              // 21
              define(function toString() {
                // 22
                return $toString.call(this); // 23
              }); // 24
            } // 25
            // 26
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.flags.js": function (_require187) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.flags.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 21.2.5.3 get RegExp.prototype.flags()                                                                               // 1
            if (_require187('./_descriptors') && /./g.flags != 'g') _require187('./_object-dp').f(RegExp.prototype, 'flags', { // 2
              configurable: true, // 3
              get: _require187('./_flags') // 4
            }); // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.match.js": function (_require188) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.match.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@match logic                                                                                                       // 1
            _require188('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
              // 2
              // 21.1.3.11 String.prototype.match(regexp)                                                                          // 3
              return [function match(regexp) {
                // 5
                var O = defined(this); // 6
                var fn = regexp == undefined ? undefined : regexp[MATCH]; // 7
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O)); // 8
              }, $match]; // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_fix-re-wks.js": function (_require189, _exports124, _module109) {
            // 1
            var hide = _require189('./_hide'); // 2
            var redefine = _require189('./_redefine'); // 3
            var fails = _require189('./_fails'); // 4
            var defined = _require189('./_defined'); // 5
            var wks = _require189('./_wks'); // 6
            // 7
            _module109.exports = function (KEY, length, exec) {
              // 8
              var SYMBOL = wks(KEY); // 9
              var fns = exec(defined, SYMBOL, ''[KEY]); // 10
              var strfn = fns[0]; // 11
              var rxfn = fns[1]; // 12
              if (fails(function () {
                // 13
                var O = {}; // 14
                O[SYMBOL] = function () {
                  return 7;
                }; // 15
                return ''[KEY](O) != 7; // 16
              })) {
                // 17
                redefine(String.prototype, KEY, strfn); // 18
                hide(RegExp.prototype, SYMBOL, length == 2 // 19
                // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)                                                    // 20
                // 21.2.5.11 RegExp.prototype[@@split](string, limit)                                                            // 21
                ? function (string, arg) {
                  return rxfn.call(string, this, arg);
                } // 22
                // 21.2.5.6 RegExp.prototype[@@match](string)                                                                    // 23
                // 21.2.5.9 RegExp.prototype[@@search](string)                                                                   // 24
                : function (string) {
                  return rxfn.call(string, this);
                } // 25
                ); // 26
              } // 27
            }; // 28
            // 29
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.replace.js": function (_require190) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.replace.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@replace logic                                                                                                     // 1
            _require190('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
              // 2
              // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)                                                     // 3
              return [function replace(searchValue, replaceValue) {
                // 5
                var O = defined(this); // 6
                var fn = searchValue == undefined ? undefined : searchValue[REPLACE]; // 7
                return fn !== undefined // 8
                ? fn.call(searchValue, O, replaceValue) // 9
                : $replace.call(String(O), searchValue, replaceValue); // 10
              }, $replace]; // 11
            }); // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.search.js": function (_require191) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.search.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@search logic                                                                                                      // 1
            _require191('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
              // 2
              // 21.1.3.15 String.prototype.search(regexp)                                                                         // 3
              return [function search(regexp) {
                // 5
                var O = defined(this); // 6
                var fn = regexp == undefined ? undefined : regexp[SEARCH]; // 7
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O)); // 8
              }, $search]; // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.regexp.split.js": function (_require192) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.regexp.split.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // @@split logic                                                                                                       // 1
            _require192('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
              // 3
              var isRegExp = _require192('./_is-regexp'); // 4
              var _split = $split; // 5
              var $push = [].push; // 6
              var $SPLIT = 'split'; // 7
              var LENGTH = 'length'; // 8
              var LAST_INDEX = 'lastIndex'; // 9
              if ( // 10
              'abbc'[$SPLIT](/(b)*/)[1] == 'c' || // 11
              'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || // 12
              'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || // 13
              '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || // 14
              '.'[$SPLIT](/()()/)[LENGTH] > 1 || // 15
              ''[$SPLIT](/.?/)[LENGTH] // 16
              ) {
                  // 17
                  var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group                                   // 18
                  // based on es5-shim implementation, need to rework it                                                             // 19
                  $split = function (separator, limit) {
                    // 20
                    var string = String(this); // 21
                    if (separator === undefined && limit === 0) return []; // 22
                    // If `separator` is not a regex, use native split                                                               // 23
                    if (!isRegExp(separator)) return _split.call(string, separator, limit); // 24
                    var output = []; // 25
                    var flags = (separator.ignoreCase ? 'i' : '') + ( // 26
                    separator.multiline ? 'm' : '') + ( // 27
                    separator.unicode ? 'u' : '') + ( // 28
                    separator.sticky ? 'y' : ''); // 29
                    var lastLastIndex = 0; // 30
                    var splitLimit = limit === undefined ? 4294967295 : limit >>> 0; // 31
                    // Make `global` and avoid `lastIndex` issues by working with a copy                                             // 32
                    var separatorCopy = new RegExp(separator.source, flags + 'g'); // 33
                    var separator2, match, lastIndex, lastLength, i; // 34
                    // Doesn't need flags gy, but they don't hurt                                                                    // 35
                    if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags); // 36
                    while (match = separatorCopy.exec(string)) {
                      // 37
                      // `separatorCopy.lastIndex` is not reliable cross-browser                                                     // 38
                      lastIndex = match.index + match[0][LENGTH]; // 39
                      if (lastIndex > lastLastIndex) {
                        // 40
                        output.push(string.slice(lastLastIndex, match.index)); // 41
                        // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG                          // 42
                        // eslint-disable-next-line no-loop-func                                                                     // 43
                        if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
                          // 44
                          for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined; // 45
                        }); // 46
                        if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1)); // 47
                        lastLength = match[0][LENGTH]; // 48
                        lastLastIndex = lastIndex; // 49
                        if (output[LENGTH] >= splitLimit) break; // 50
                      } // 51
                      if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop          // 52
                    } // 53
                    if (lastLastIndex === string[LENGTH]) {
                      // 54
                      if (lastLength || !separatorCopy.test('')) output.push(''); // 55
                    } else output.push(string.slice(lastLastIndex)); // 56
                    return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output; // 57
                  }; // 58
                  // Chakra, V8                                                                                                        // 59
                } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
                // 60
                $split = function (separator, limit) {
                  // 61
                  return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit); // 62
                }; // 63
              } // 64
              // 21.1.3.17 String.prototype.split(separator, limit)                                                                // 65
              return [function split(separator, limit) {
                // 66
                var O = defined(this); // 67
                var fn = separator == undefined ? undefined : separator[SPLIT]; // 68
                return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit); // 69
              }, $split]; // 70
            }); // 71
            // 72
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.from-code-point.js": function (_require193) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.from-code-point.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require193('./_export'); // 1
            var toAbsoluteIndex = _require193('./_to-absolute-index'); // 2
            var fromCharCode = String.fromCharCode; // 3
            var $fromCodePoint = String.fromCodePoint; // 4
            // 5
            // length should be 1, old FF problem                                                                                  // 6
            $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', { // 7
              // 21.1.2.2 String.fromCodePoint(...codePoints)                                                                      // 8
              fromCodePoint: function fromCodePoint(x) {
                // eslint-disable-line no-unused-vars                                     // 9
                var res = []; // 10
                var aLen = arguments.length; // 11
                var i = 0; // 12
                var code; // 13
                while (aLen > i) {
                  // 14
                  code = +arguments[i++]; // 15
                  if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point'); // 16
                  res.push(code < 0x10000 // 17
                  ? fromCharCode(code) // 18
                  : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00) // 19
                  ); // 20
                }return res.join(''); // 21
              } // 22
            }); // 23
            // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.raw.js": function (_require194) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.raw.js                                                                      //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require194('./_export'); // 1
            var toIObject = _require194('./_to-iobject'); // 2
            var toLength = _require194('./_to-length'); // 3
            // 4
            $export($export.S, 'String', { // 5
              // 21.1.2.4 String.raw(callSite, ...substitutions)                                                                   // 6
              raw: function raw(callSite) {
                // 7
                var tpl = toIObject(callSite.raw); // 8
                var len = toLength(tpl.length); // 9
                var aLen = arguments.length; // 10
                var res = []; // 11
                var i = 0; // 12
                while (len > i) {
                  // 13
                  res.push(String(tpl[i++])); // 14
                  if (i < aLen) res.push(String(arguments[i])); // 15
                }return res.join(''); // 16
              } // 17
            }); // 18
            // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.trim.js": function (_require195) {
            // 1
            // 21.1.3.25 String.prototype.trim()                                                                                   // 2
            _require195('./_string-trim')('trim', function ($trim) {
              // 3
              return function trim() {
                // 4
                return $trim(this, 3); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-trim.js": function (_require196, _exports125, _module110) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-trim.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require196('./_export'); // 1
            var defined = _require196('./_defined'); // 2
            var fails = _require196('./_fails'); // 3
            var spaces = _require196('./_string-ws'); // 4
            var space = '[' + spaces + ']'; // 5
            var non = '\u200b\u0085'; // 6
            var ltrim = RegExp('^' + space + space + '*'); // 7
            var rtrim = RegExp(space + space + '*$'); // 8
            // 9
            var exporter = function (KEY, exec, ALIAS) {
              // 10
              var exp = {}; // 11
              var FORCE = fails(function () {
                // 12
                return !!spaces[KEY]() || non[KEY]() != non; // 13
              }); // 14
              var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY]; // 15
              if (ALIAS) exp[ALIAS] = fn; // 16
              $export($export.P + $export.F * FORCE, 'String', exp); // 17
            }; // 18
            // 19
            // 1 -> String#trimLeft                                                                                                // 20
            // 2 -> String#trimRight                                                                                               // 21
            // 3 -> String#trim                                                                                                    // 22
            var trim = exporter.trim = function (string, TYPE) {
              // 23
              string = String(defined(string)); // 24
              if (TYPE & 1) string = string.replace(ltrim, ''); // 25
              if (TYPE & 2) string = string.replace(rtrim, ''); // 26
              return string; // 27
            }; // 28
            // 29
            _module110.exports = exporter; // 30
            // 31
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-ws.js": function (_require197, _exports126, _module111) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-ws.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module111.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + // 1
            '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF'; // 2
            // 3
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.code-point-at.js": function (_require198) {
            // 1
            var $export = _require198('./_export'); // 2
            var $at = _require198('./_string-at')(false); // 3
            $export($export.P, 'String', { // 4
              // 21.1.3.3 String.prototype.codePointAt(pos)                                                                        // 5
              codePointAt: function codePointAt(pos) {
                // 6
                return $at(this, pos); // 7
              } // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.ends-with.js": function (_require199) {
            // 2
            var $export = _require199('./_export'); // 3
            var toLength = _require199('./_to-length'); // 4
            var context = _require199('./_string-context'); // 5
            var ENDS_WITH = 'endsWith'; // 6
            var $endsWith = ''[ENDS_WITH]; // 7
            // 8
            $export($export.P + $export.F * _require199('./_fails-is-regexp')(ENDS_WITH), 'String', { // 9
              endsWith: function endsWith(searchString /* , endPosition = @length */) {
                // 10
                var that = context(this, searchString, ENDS_WITH); // 11
                var endPosition = arguments.length > 1 ? arguments[1] : undefined; // 12
                var len = toLength(that.length); // 13
                var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len); // 14
                var search = String(searchString); // 15
                return $endsWith // 16
                ? $endsWith.call(that, search, end) // 17
                : that.slice(end - search.length, end) === search; // 18
              } // 19
            }); // 20
            // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-context.js": function (_require200, _exports127, _module112) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-context.js                                                                     //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // helper for String#{startsWith, endsWith, includes}                                                                  // 1
            var isRegExp = _require200('./_is-regexp'); // 2
            var defined = _require200('./_defined'); // 3
            // 4
            _module112.exports = function (that, searchString, NAME) {
              // 5
              if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!"); // 6
              return String(defined(that)); // 7
            }; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_fails-is-regexp.js": function (_require201, _exports128, _module113) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_fails-is-regexp.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var MATCH = _require201('./_wks')('match'); // 1
            _module113.exports = function (KEY) {
              // 2
              var re = /./; // 3
              try {
                // 4
                '/./'[KEY](re); // 5
              } catch (e) {
                // 6
                try {
                  // 7
                  re[MATCH] = false; // 8
                  return !'/./'[KEY](re); // 9
                } catch (f) {} /* empty */ // 10
              }return true; // 11
            }; // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.includes.js": function (_require202) {
            // 2
            var $export = _require202('./_export'); // 3
            var context = _require202('./_string-context'); // 4
            var INCLUDES = 'includes'; // 5
            // 6
            $export($export.P + $export.F * _require202('./_fails-is-regexp')(INCLUDES), 'String', { // 7
              includes: function includes(searchString /* , position = 0 */) {
                // 8
                return !!~context(this, searchString, INCLUDES) // 9
                .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined); // 10
              } // 11
            }); // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.repeat.js": function (_require203) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.string.repeat.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require203('./_export'); // 1
            // 2
            $export($export.P, 'String', { // 3
              // 21.1.3.13 String.prototype.repeat(count)                                                                          // 4
              repeat: _require203('./_string-repeat') // 5
            }); // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-repeat.js": function (_require204, _exports129, _module114) {
            // 1
            var toInteger = _require204('./_to-integer'); // 2
            var defined = _require204('./_defined'); // 3
            // 4
            _module114.exports = function repeat(count) {
              // 5
              var str = String(defined(this)); // 6
              var res = ''; // 7
              var n = toInteger(count); // 8
              if (n < 0 || n == Infinity) throw RangeError("Count can't be negative"); // 9
              for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str; // 10
              return res; // 11
            }; // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.starts-with.js": function (_require205) {
            // 2
            var $export = _require205('./_export'); // 3
            var toLength = _require205('./_to-length'); // 4
            var context = _require205('./_string-context'); // 5
            var STARTS_WITH = 'startsWith'; // 6
            var $startsWith = ''[STARTS_WITH]; // 7
            // 8
            $export($export.P + $export.F * _require205('./_fails-is-regexp')(STARTS_WITH), 'String', { // 9
              startsWith: function startsWith(searchString /* , position = 0 */) {
                // 10
                var that = context(this, searchString, STARTS_WITH); // 11
                var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length)); // 12
                var search = String(searchString); // 13
                return $startsWith // 14
                ? $startsWith.call(that, search, index) // 15
                : that.slice(index, index + search.length) === search; // 16
              } // 17
            }); // 18
            // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.anchor.js": function (_require206) {
            // 1
            // B.2.3.2 String.prototype.anchor(name)                                                                               // 2
            _require206('./_string-html')('anchor', function (createHTML) {
              // 3
              return function anchor(name) {
                // 4
                return createHTML(this, 'a', 'name', name); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_string-html.js": function (_require207, _exports130, _module115) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_string-html.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require207('./_export'); // 1
            var fails = _require207('./_fails'); // 2
            var defined = _require207('./_defined'); // 3
            var quot = /"/g; // 4
            // B.2.3.2.1 CreateHTML(string, tag, attribute, value)                                                                 // 5
            var createHTML = function (string, tag, attribute, value) {
              // 6
              var S = String(defined(string)); // 7
              var p1 = '<' + tag; // 8
              if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"'; // 9
              return p1 + '>' + S + '</' + tag + '>'; // 10
            }; // 11
            _module115.exports = function (NAME, exec) {
              // 12
              var O = {}; // 13
              O[NAME] = exec(createHTML); // 14
              $export($export.P + $export.F * fails(function () {
                // 15
                var test = ''[NAME]('"'); // 16
                return test !== test.toLowerCase() || test.split('"').length > 3; // 17
              }), 'String', O); // 18
            }; // 19
            // 20
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.big.js": function (_require208) {
            // 1
            // B.2.3.3 String.prototype.big()                                                                                      // 2
            _require208('./_string-html')('big', function (createHTML) {
              // 3
              return function big() {
                // 4
                return createHTML(this, 'big', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.blink.js": function (_require209) {
            // 1
            // B.2.3.4 String.prototype.blink()                                                                                    // 2
            _require209('./_string-html')('blink', function (createHTML) {
              // 3
              return function blink() {
                // 4
                return createHTML(this, 'blink', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.bold.js": function (_require210) {
            // 1
            // B.2.3.5 String.prototype.bold()                                                                                     // 2
            _require210('./_string-html')('bold', function (createHTML) {
              // 3
              return function bold() {
                // 4
                return createHTML(this, 'b', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.fixed.js": function (_require211) {
            // 1
            // B.2.3.6 String.prototype.fixed()                                                                                    // 2
            _require211('./_string-html')('fixed', function (createHTML) {
              // 3
              return function fixed() {
                // 4
                return createHTML(this, 'tt', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.fontcolor.js": function (_require212) {
            // 1
            // B.2.3.7 String.prototype.fontcolor(color)                                                                           // 2
            _require212('./_string-html')('fontcolor', function (createHTML) {
              // 3
              return function fontcolor(color) {
                // 4
                return createHTML(this, 'font', 'color', color); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.fontsize.js": function (_require213) {
            // 1
            // B.2.3.8 String.prototype.fontsize(size)                                                                             // 2
            _require213('./_string-html')('fontsize', function (createHTML) {
              // 3
              return function fontsize(size) {
                // 4
                return createHTML(this, 'font', 'size', size); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.italics.js": function (_require214) {
            // 1
            // B.2.3.9 String.prototype.italics()                                                                                  // 2
            _require214('./_string-html')('italics', function (createHTML) {
              // 3
              return function italics() {
                // 4
                return createHTML(this, 'i', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.link.js": function (_require215) {
            // 1
            // B.2.3.10 String.prototype.link(url)                                                                                 // 2
            _require215('./_string-html')('link', function (createHTML) {
              // 3
              return function link(url) {
                // 4
                return createHTML(this, 'a', 'href', url); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.small.js": function (_require216) {
            // 1
            // B.2.3.11 String.prototype.small()                                                                                   // 2
            _require216('./_string-html')('small', function (createHTML) {
              // 3
              return function small() {
                // 4
                return createHTML(this, 'small', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.strike.js": function (_require217) {
            // 1
            // B.2.3.12 String.prototype.strike()                                                                                  // 2
            _require217('./_string-html')('strike', function (createHTML) {
              // 3
              return function strike() {
                // 4
                return createHTML(this, 'strike', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.sub.js": function (_require218) {
            // 1
            // B.2.3.13 String.prototype.sub()                                                                                     // 2
            _require218('./_string-html')('sub', function (createHTML) {
              // 3
              return function sub() {
                // 4
                return createHTML(this, 'sub', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.string.sup.js": function (_require219) {
            // 1
            // B.2.3.14 String.prototype.sup()                                                                                     // 2
            _require219('./_string-html')('sup', function (createHTML) {
              // 3
              return function sup() {
                // 4
                return createHTML(this, 'sup', '', ''); // 5
              }; // 6
            }); // 7
            // 8
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.weak-map.js": function (_require220, _exports131, _module116) {
            // 1
            var each = _require220('./_array-methods')(0); // 2
            var redefine = _require220('./_redefine'); // 3
            var meta = _require220('./_meta'); // 4
            var assign = _require220('./_object-assign'); // 5
            var weak = _require220('./_collection-weak'); // 6
            var isObject = _require220('./_is-object'); // 7
            var fails = _require220('./_fails'); // 8
            var validate = _require220('./_validate-collection'); // 9
            var WEAK_MAP = 'WeakMap'; // 10
            var getWeak = meta.getWeak; // 11
            var isExtensible = Object.isExtensible; // 12
            var uncaughtFrozenStore = weak.ufstore; // 13
            var tmp = {}; // 14
            var InternalMap; // 15
            // 16
            var wrapper = function (get) {
              // 17
              return function WeakMap() {
                // 18
                return get(this, arguments.length > 0 ? arguments[0] : undefined); // 19
              }; // 20
            }; // 21
            // 22
            var methods = { // 23
              // 23.3.3.3 WeakMap.prototype.get(key)                                                                               // 24
              get: function get(key) {
                // 25
                if (isObject(key)) {
                  // 26
                  var data = getWeak(key); // 27
                  if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key); // 28
                  return data ? data[this._i] : undefined; // 29
                } // 30
              }, // 31
              // 23.3.3.5 WeakMap.prototype.set(key, value)                                                                        // 32
              set: function set(key, value) {
                // 33
                return weak.def(validate(this, WEAK_MAP), key, value); // 34
              } // 35
            }; // 36
            // 37
            // 23.3 WeakMap Objects                                                                                                // 38
            var $WeakMap = _module116.exports = _require220('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true); // 39
            // 40
            // IE11 WeakMap frozen keys fix                                                                                        // 41
            if (fails(function () {
              return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
            })) {
              // 42
              InternalMap = weak.getConstructor(wrapper, WEAK_MAP); // 43
              assign(InternalMap.prototype, methods); // 44
              meta.NEED = true; // 45
              each(['delete', 'has', 'get', 'set'], function (key) {
                // 46
                var proto = $WeakMap.prototype; // 47
                var method = proto[key]; // 48
                redefine(proto, key, function (a, b) {
                  // 49
                  // store frozen objects on internal weakmap shim                                                                 // 50
                  if (isObject(a) && !isExtensible(a)) {
                    // 51
                    if (!this._f) this._f = new InternalMap(); // 52
                    var result = this._f[key](a, b); // 53
                    return key == 'set' ? this : result; // 54
                    // store all the rest on native weakmap                                                                          // 55
                  }return method.call(this, a, b); // 56
                }); // 57
              }); // 58
            } // 59
            // 60
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_collection-weak.js": function (_require221, _exports132, _module117) {
            // 1
            var redefineAll = _require221('./_redefine-all'); // 2
            var getWeak = _require221('./_meta').getWeak; // 3
            var anObject = _require221('./_an-object'); // 4
            var isObject = _require221('./_is-object'); // 5
            var anInstance = _require221('./_an-instance'); // 6
            var forOf = _require221('./_for-of'); // 7
            var createArrayMethod = _require221('./_array-methods'); // 8
            var $has = _require221('./_has'); // 9
            var validate = _require221('./_validate-collection'); // 10
            var arrayFind = createArrayMethod(5); // 11
            var arrayFindIndex = createArrayMethod(6); // 12
            var id = 0; // 13
            // 14
            // fallback for uncaught frozen keys                                                                                   // 15
            var uncaughtFrozenStore = function (that) {
              // 16
              return that._l || (that._l = new UncaughtFrozenStore()); // 17
            }; // 18
            var UncaughtFrozenStore = function () {
              // 19
              this.a = []; // 20
            }; // 21
            var findUncaughtFrozen = function (store, key) {
              // 22
              return arrayFind(store.a, function (it) {
                // 23
                return it[0] === key; // 24
              }); // 25
            }; // 26
            UncaughtFrozenStore.prototype = { // 27
              get: function (key) {
                // 28
                var entry = findUncaughtFrozen(this, key); // 29
                if (entry) return entry[1]; // 30
              }, // 31
              has: function (key) {
                // 32
                return !!findUncaughtFrozen(this, key); // 33
              }, // 34
              set: function (key, value) {
                // 35
                var entry = findUncaughtFrozen(this, key); // 36
                if (entry) entry[1] = value; // 37
                else this.a.push([key, value]); // 38
              }, // 39
              'delete': function (key) {
                // 40
                var index = arrayFindIndex(this.a, function (it) {
                  // 41
                  return it[0] === key; // 42
                }); // 43
                if (~index) this.a.splice(index, 1); // 44
                return !!~index; // 45
              } // 46
            }; // 47
            // 48
            _module117.exports = { // 49
              getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                // 50
                var C = wrapper(function (that, iterable) {
                  // 51
                  anInstance(that, C, NAME, '_i'); // 52
                  that._t = NAME; // collection type                                                                          // 53
                  that._i = id++; // collection id                                                                            // 54
                  that._l = undefined; // leak store for uncaught frozen objects                                                   // 55
                  if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that); // 56
                }); // 57
                redefineAll(C.prototype, { // 58
                  // 23.3.3.2 WeakMap.prototype.delete(key)                                                                        // 59
                  // 23.4.3.3 WeakSet.prototype.delete(value)                                                                      // 60
                  'delete': function (key) {
                    // 61
                    if (!isObject(key)) return false; // 62
                    var data = getWeak(key); // 63
                    if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key); // 64
                    return data && $has(data, this._i) && delete data[this._i]; // 65
                  }, // 66
                  // 23.3.3.4 WeakMap.prototype.has(key)                                                                           // 67
                  // 23.4.3.4 WeakSet.prototype.has(value)                                                                         // 68
                  has: function has(key) {
                    // 69
                    if (!isObject(key)) return false; // 70
                    var data = getWeak(key); // 71
                    if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key); // 72
                    return data && $has(data, this._i); // 73
                  } // 74
                }); // 75
                return C; // 76
              }, // 77
              def: function (that, key, value) {
                // 78
                var data = getWeak(anObject(key), true); // 79
                if (data === true) uncaughtFrozenStore(that).set(key, value); // 80
                else data[that._i] = value; // 81
                return that; // 82
              }, // 83
              ufstore: uncaughtFrozenStore // 84
            }; // 85
            // 86
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "web.dom.iterable.js": function (_require222) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/web.dom.iterable.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $iterators = _require222('./es6.array.iterator'); // 1
            var getKeys = _require222('./_object-keys'); // 2
            var redefine = _require222('./_redefine'); // 3
            var global = _require222('./_global'); // 4
            var hide = _require222('./_hide'); // 5
            var Iterators = _require222('./_iterators'); // 6
            var wks = _require222('./_wks'); // 7
            var ITERATOR = wks('iterator'); // 8
            var TO_STRING_TAG = wks('toStringTag'); // 9
            var ArrayValues = Iterators.Array; // 10
            // 11
            var DOMIterables = { // 12
              CSSRuleList: true, // TODO: Not spec compliant, should be false.                                                     // 13
              CSSStyleDeclaration: false, // 14
              CSSValueList: false, // 15
              ClientRectList: false, // 16
              DOMRectList: false, // 17
              DOMStringList: false, // 18
              DOMTokenList: true, // 19
              DataTransferItemList: false, // 20
              FileList: false, // 21
              HTMLAllCollection: false, // 22
              HTMLCollection: false, // 23
              HTMLFormElement: false, // 24
              HTMLSelectElement: false, // 25
              MediaList: true, // TODO: Not spec compliant, should be false.                                                       // 26
              MimeTypeArray: false, // 27
              NamedNodeMap: false, // 28
              NodeList: true, // 29
              PaintRequestList: false, // 30
              Plugin: false, // 31
              PluginArray: false, // 32
              SVGLengthList: false, // 33
              SVGNumberList: false, // 34
              SVGPathSegList: false, // 35
              SVGPointList: false, // 36
              SVGStringList: false, // 37
              SVGTransformList: false, // 38
              SourceBufferList: false, // 39
              StyleSheetList: true, // TODO: Not spec compliant, should be false.                                                  // 40
              TextTrackCueList: false, // 41
              TextTrackList: false, // 42
              TouchList: false // 43
            }; // 44
            // 45
            for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
              // 46
              var NAME = collections[i]; // 47
              var explicit = DOMIterables[NAME]; // 48
              var Collection = global[NAME]; // 49
              var proto = Collection && Collection.prototype; // 50
              var key; // 51
              if (proto) {
                // 52
                if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues); // 53
                if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME); // 54
                Iterators[NAME] = ArrayValues; // 55
                if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true); // 56
              } // 57
            } // 58
            // 59
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.weak-set.js": function (_require223) {
            // 1
            var weak = _require223('./_collection-weak'); // 2
            var validate = _require223('./_validate-collection'); // 3
            var WEAK_SET = 'WeakSet'; // 4
            // 5
            // 23.4 WeakSet Objects                                                                                                // 6
            _require223('./_collection')(WEAK_SET, function (get) {
              // 7
              return function WeakSet() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              }; // 8
            }, { // 9
              // 23.4.3.1 WeakSet.prototype.add(value)                                                                             // 10
              add: function add(value) {
                // 11
                return weak.def(validate(this, WEAK_SET), value, true); // 12
              } // 13
            }, weak, false, true); // 14
            // 15
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.array.includes.js": function (_require224) {
            // 1
            // https://github.com/tc39/Array.prototype.includes                                                                    // 2
            var $export = _require224('./_export'); // 3
            var $includes = _require224('./_array-includes')(true); // 4
            // 5
            $export($export.P, 'Array', { // 6
              includes: function includes(el /* , fromIndex = 0 */) {
                // 7
                return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined); // 8
              } // 9
            }); // 10
            // 11
            _require224('./_add-to-unscopables')('includes'); // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.array.flat-map.js": function (_require225) {
            // 1
            // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap                                                // 2
            var $export = _require225('./_export'); // 3
            var flattenIntoArray = _require225('./_flatten-into-array'); // 4
            var toObject = _require225('./_to-object'); // 5
            var toLength = _require225('./_to-length'); // 6
            var aFunction = _require225('./_a-function'); // 7
            var arraySpeciesCreate = _require225('./_array-species-create'); // 8
            // 9
            $export($export.P, 'Array', { // 10
              flatMap: function flatMap(callbackfn /* , thisArg */) {
                // 11
                var O = toObject(this); // 12
                var sourceLen, A; // 13
                aFunction(callbackfn); // 14
                sourceLen = toLength(O.length); // 15
                A = arraySpeciesCreate(O, 0); // 16
                flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]); // 17
                return A; // 18
              } // 19
            }); // 20
            // 21
            _require225('./_add-to-unscopables')('flatMap'); // 22
            // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_flatten-into-array.js": function (_require226, _exports133, _module118) {
            // 1
            // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray                                                       // 2
            var isArray = _require226('./_is-array'); // 3
            var isObject = _require226('./_is-object'); // 4
            var toLength = _require226('./_to-length'); // 5
            var ctx = _require226('./_ctx'); // 6
            var IS_CONCAT_SPREADABLE = _require226('./_wks')('isConcatSpreadable'); // 7
            // 8
            function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
              // 9
              var targetIndex = start; // 10
              var sourceIndex = 0; // 11
              var mapFn = mapper ? ctx(mapper, thisArg, 3) : false; // 12
              var element, spreadable; // 13
              // 14
              while (sourceIndex < sourceLen) {
                // 15
                if (sourceIndex in source) {
                  // 16
                  element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex]; // 17
                  // 18
                  spreadable = false; // 19
                  if (isObject(element)) {
                    // 20
                    spreadable = element[IS_CONCAT_SPREADABLE]; // 21
                    spreadable = spreadable !== undefined ? !!spreadable : isArray(element); // 22
                  } // 23
                  // 24
                  if (spreadable && depth > 0) {
                    // 25
                    targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                  } else {
                    // 27
                    if (targetIndex >= 0x1fffffffffffff) throw TypeError(); // 28
                    target[targetIndex] = element; // 29
                  } // 30
                  // 31
                  targetIndex++; // 32
                } // 33
                sourceIndex++; // 34
              } // 35
              return targetIndex; // 36
            } // 37
            // 38
            _module118.exports = flattenIntoArray; // 39
            // 40
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.array.flatten.js": function (_require227) {
            // 1
            // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten                                                // 2
            var $export = _require227('./_export'); // 3
            var flattenIntoArray = _require227('./_flatten-into-array'); // 4
            var toObject = _require227('./_to-object'); // 5
            var toLength = _require227('./_to-length'); // 6
            var toInteger = _require227('./_to-integer'); // 7
            var arraySpeciesCreate = _require227('./_array-species-create'); // 8
            // 9
            $export($export.P, 'Array', { // 10
              flatten: function flatten() /* depthArg = 1 */{
                // 11
                var depthArg = arguments[0]; // 12
                var O = toObject(this); // 13
                var sourceLen = toLength(O.length); // 14
                var A = arraySpeciesCreate(O, 0); // 15
                flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg)); // 16
                return A; // 17
              } // 18
            }); // 19
            // 20
            _require227('./_add-to-unscopables')('flatten'); // 21
            // 22
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.get-own-property-descriptors.js": function (_require228) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.get-own-property-descriptors.js                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/tc39/proposal-object-getownpropertydescriptors                                                   // 1
            var $export = _require228('./_export'); // 2
            var ownKeys = _require228('./_own-keys'); // 3
            var toIObject = _require228('./_to-iobject'); // 4
            var gOPD = _require228('./_object-gopd'); // 5
            var createProperty = _require228('./_create-property'); // 6
            // 7
            $export($export.S, 'Object', { // 8
              getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                // 9
                var O = toIObject(object); // 10
                var getDesc = gOPD.f; // 11
                var keys = ownKeys(O); // 12
                var result = {}; // 13
                var i = 0; // 14
                var key, desc; // 15
                while (keys.length > i) {
                  // 16
                  desc = getDesc(O, key = keys[i++]); // 17
                  if (desc !== undefined) createProperty(result, key, desc); // 18
                } // 19
                return result; // 20
              } // 21
            }); // 22
            // 23
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_own-keys.js": function (_require229, _exports134, _module119) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_own-keys.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // all object keys, includes non-enumerable and symbols                                                                // 1
            var gOPN = _require229('./_object-gopn'); // 2
            var gOPS = _require229('./_object-gops'); // 3
            var anObject = _require229('./_an-object'); // 4
            var Reflect = _require229('./_global').Reflect; // 5
            _module119.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
              // 6
              var keys = gOPN.f(anObject(it)); // 7
              var getSymbols = gOPS.f; // 8
              return getSymbols ? keys.concat(getSymbols(it)) : keys; // 9
            }; // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.values.js": function (_require230) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.values.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/tc39/proposal-object-values-entries                                                              // 1
            var $export = _require230('./_export'); // 2
            var $values = _require230('./_object-to-array')(false); // 3
            // 4
            $export($export.S, 'Object', { // 5
              values: function values(it) {
                // 6
                return $values(it); // 7
              } // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-to-array.js": function (_require231, _exports135, _module120) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_object-to-array.js                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var getKeys = _require231('./_object-keys'); // 1
            var toIObject = _require231('./_to-iobject'); // 2
            var isEnum = _require231('./_object-pie').f; // 3
            _module120.exports = function (isEntries) {
              // 4
              return function (it) {
                // 5
                var O = toIObject(it); // 6
                var keys = getKeys(O); // 7
                var length = keys.length; // 8
                var i = 0; // 9
                var result = []; // 10
                var key; // 11
                while (length > i) if (isEnum.call(O, key = keys[i++])) {
                  // 12
                  result.push(isEntries ? [key, O[key]] : O[key]); // 13
                }return result; // 14
              }; // 15
            }; // 16
            // 17
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.entries.js": function (_require232) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es7.object.entries.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://github.com/tc39/proposal-object-values-entries                                                              // 1
            var $export = _require232('./_export'); // 2
            var $entries = _require232('./_object-to-array')(true); // 3
            // 4
            $export($export.S, 'Object', { // 5
              entries: function entries(it) {
                // 6
                return $entries(it); // 7
              } // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.define-getter.js": function (_require233) {
            // 1
            var $export = _require233('./_export'); // 2
            var toObject = _require233('./_to-object'); // 3
            var aFunction = _require233('./_a-function'); // 4
            var $defineProperty = _require233('./_object-dp'); // 5
            // 6
            // B.2.2.2 Object.prototype.__defineGetter__(P, getter)                                                                // 7
            _require233('./_descriptors') && $export($export.P + _require233('./_object-forced-pam'), 'Object', { // 8
              __defineGetter__: function __defineGetter__(P, getter) {
                // 9
                $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true }); // 10
              } // 11
            }); // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_object-forced-pam.js": function (_require234, _exports136, _module121) {
            // 1
            // Forced replacement prototype accessors methods                                                                      // 2
            _module121.exports = _require234('./_library') || !_require234('./_fails')(function () {
              // 3
              var K = Math.random(); // 4
              // In FF throws only define methods                                                                                  // 5
              // eslint-disable-next-line no-undef, no-useless-call                                                                // 6
              __defineSetter__.call(null, K, function () {/* empty */}); // 7
              delete _require234('./_global')[K]; // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.define-setter.js": function (_require235) {
            // 1
            var $export = _require235('./_export'); // 2
            var toObject = _require235('./_to-object'); // 3
            var aFunction = _require235('./_a-function'); // 4
            var $defineProperty = _require235('./_object-dp'); // 5
            // 6
            // B.2.2.3 Object.prototype.__defineSetter__(P, setter)                                                                // 7
            _require235('./_descriptors') && $export($export.P + _require235('./_object-forced-pam'), 'Object', { // 8
              __defineSetter__: function __defineSetter__(P, setter) {
                // 9
                $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true }); // 10
              } // 11
            }); // 12
            // 13
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.lookup-getter.js": function (_require236) {
            // 1
            var $export = _require236('./_export'); // 2
            var toObject = _require236('./_to-object'); // 3
            var toPrimitive = _require236('./_to-primitive'); // 4
            var getPrototypeOf = _require236('./_object-gpo'); // 5
            var getOwnPropertyDescriptor = _require236('./_object-gopd').f; // 6
            // 7
            // B.2.2.4 Object.prototype.__lookupGetter__(P)                                                                        // 8
            _require236('./_descriptors') && $export($export.P + _require236('./_object-forced-pam'), 'Object', { // 9
              __lookupGetter__: function __lookupGetter__(P) {
                // 10
                var O = toObject(this); // 11
                var K = toPrimitive(P, true); // 12
                var D; // 13
                do {
                  // 14
                  if (D = getOwnPropertyDescriptor(O, K)) return D.get; // 15
                } while (O = getPrototypeOf(O)); // 16
              } // 17
            }); // 18
            // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es7.object.lookup-setter.js": function (_require237) {
            // 1
            var $export = _require237('./_export'); // 2
            var toObject = _require237('./_to-object'); // 3
            var toPrimitive = _require237('./_to-primitive'); // 4
            var getPrototypeOf = _require237('./_object-gpo'); // 5
            var getOwnPropertyDescriptor = _require237('./_object-gopd').f; // 6
            // 7
            // B.2.2.5 Object.prototype.__lookupSetter__(P)                                                                        // 8
            _require237('./_descriptors') && $export($export.P + _require237('./_object-forced-pam'), 'Object', { // 9
              __lookupSetter__: function __lookupSetter__(P) {
                // 10
                var O = toObject(this); // 11
                var K = toPrimitive(P, true); // 12
                var D; // 13
                do {
                  // 14
                  if (D = getOwnPropertyDescriptor(O, K)) return D.set; // 15
                } while (O = getPrototypeOf(O)); // 16
              } // 17
            }); // 18
            // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.epsilon.js": function (_require238) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.epsilon.js                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.1 Number.EPSILON                                                                                             // 1
            var $export = _require238('./_export'); // 2
            // 3
            $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-finite.js": function (_require239) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-finite.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.2 Number.isFinite(number)                                                                                    // 1
            var $export = _require239('./_export'); // 2
            var _isFinite = _require239('./_global').isFinite; // 3
            // 4
            $export($export.S, 'Number', { // 5
              isFinite: function isFinite(it) {
                // 6
                return typeof it == 'number' && _isFinite(it); // 7
              } // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-integer.js": function (_require240) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-integer.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.3 Number.isInteger(number)                                                                                   // 1
            var $export = _require240('./_export'); // 2
            // 3
            $export($export.S, 'Number', { isInteger: _require240('./_is-integer') }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_is-integer.js": function (_require241, _exports137, _module122) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_is-integer.js                                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.3 Number.isInteger(number)                                                                                   // 1
            var isObject = _require241('./_is-object'); // 2
            var floor = Math.floor; // 3
            _module122.exports = function isInteger(it) {
              // 4
              return !isObject(it) && isFinite(it) && floor(it) === it; // 5
            }; // 6
            // 7
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-nan.js": function (_require242) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-nan.js                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.4 Number.isNaN(number)                                                                                       // 1
            var $export = _require242('./_export'); // 2
            // 3
            $export($export.S, 'Number', { // 4
              isNaN: function isNaN(number) {
                // 5
                // eslint-disable-next-line no-self-compare                                                                        // 6
                return number != number; // 7
              } // 8
            }); // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.is-safe-integer.js": function (_require243) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.is-safe-integer.js                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.5 Number.isSafeInteger(number)                                                                               // 1
            var $export = _require243('./_export'); // 2
            var isInteger = _require243('./_is-integer'); // 3
            var abs = Math.abs; // 4
            // 5
            $export($export.S, 'Number', { // 6
              isSafeInteger: function isSafeInteger(number) {
                // 7
                return isInteger(number) && abs(number) <= 0x1fffffffffffff; // 8
              } // 9
            }); // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.max-safe-integer.js": function (_require244) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.max-safe-integer.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.6 Number.MAX_SAFE_INTEGER                                                                                    // 1
            var $export = _require244('./_export'); // 2
            // 3
            $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.min-safe-integer.js": function (_require245) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.min-safe-integer.js                                                         //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 20.1.2.10 Number.MIN_SAFE_INTEGER                                                                                   // 1
            var $export = _require245('./_export'); // 2
            // 3
            $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.parse-float.js": function (_require246) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.parse-float.js                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require246('./_export'); // 1
            var $parseFloat = _require246('./_parse-float'); // 2
            // 20.1.2.12 Number.parseFloat(string)                                                                                 // 3
            $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_parse-float.js": function (_require247, _exports138, _module123) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_parse-float.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $parseFloat = _require247('./_global').parseFloat; // 1
            var $trim = _require247('./_string-trim').trim; // 2
            // 3
            _module123.exports = 1 / $parseFloat(_require247('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
              // 4
              var string = $trim(String(str), 3); // 5
              var result = $parseFloat(string); // 6
              return result === 0 && string.charAt(0) == '-' ? -0 : result; // 7
            } : $parseFloat; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.number.parse-int.js": function (_require248) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.number.parse-int.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $export = _require248('./_export'); // 1
            var $parseInt = _require248('./_parse-int'); // 2
            // 20.1.2.13 Number.parseInt(string, radix)                                                                            // 3
            $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt }); // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_parse-int.js": function (_require249, _exports139, _module124) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_parse-int.js                                                                          //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var $parseInt = _require249('./_global').parseInt; // 1
            var $trim = _require249('./_string-trim').trim; // 2
            var ws = _require249('./_string-ws'); // 3
            var hex = /^[-+]?0[xX]/; // 4
            // 5
            _module124.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
              // 6
              var string = $trim(String(str), 3); // 7
              return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10)); // 8
            } : $parseInt; // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.typed.uint8-array.js": function (_require250) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.typed.uint8-array.js                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require250('./_typed-array')('Uint8', 1, function (init) {
              // 1
              return function Uint8Array(data, byteOffset, length) {
                // 2
                return init(this, data, byteOffset, length); // 3
              }; // 4
            }); // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_typed-array.js": function (_require251, _exports140, _module125) {
            // 1
            if (_require251('./_descriptors')) {
              // 2
              var LIBRARY = _require251('./_library'); // 3
              var global = _require251('./_global'); // 4
              var fails = _require251('./_fails'); // 5
              var $export = _require251('./_export'); // 6
              var $typed = _require251('./_typed'); // 7
              var $buffer = _require251('./_typed-buffer'); // 8
              var ctx = _require251('./_ctx'); // 9
              var anInstance = _require251('./_an-instance'); // 10
              var propertyDesc = _require251('./_property-desc'); // 11
              var hide = _require251('./_hide'); // 12
              var redefineAll = _require251('./_redefine-all'); // 13
              var toInteger = _require251('./_to-integer'); // 14
              var toLength = _require251('./_to-length'); // 15
              var toIndex = _require251('./_to-index'); // 16
              var toAbsoluteIndex = _require251('./_to-absolute-index'); // 17
              var toPrimitive = _require251('./_to-primitive'); // 18
              var has = _require251('./_has'); // 19
              var classof = _require251('./_classof'); // 20
              var isObject = _require251('./_is-object'); // 21
              var toObject = _require251('./_to-object'); // 22
              var isArrayIter = _require251('./_is-array-iter'); // 23
              var create = _require251('./_object-create'); // 24
              var getPrototypeOf = _require251('./_object-gpo'); // 25
              var gOPN = _require251('./_object-gopn').f; // 26
              var getIterFn = _require251('./core.get-iterator-method'); // 27
              var uid = _require251('./_uid'); // 28
              var wks = _require251('./_wks'); // 29
              var createArrayMethod = _require251('./_array-methods'); // 30
              var createArrayIncludes = _require251('./_array-includes'); // 31
              var speciesConstructor = _require251('./_species-constructor'); // 32
              var ArrayIterators = _require251('./es6.array.iterator'); // 33
              var Iterators = _require251('./_iterators'); // 34
              var $iterDetect = _require251('./_iter-detect'); // 35
              var setSpecies = _require251('./_set-species'); // 36
              var arrayFill = _require251('./_array-fill'); // 37
              var arrayCopyWithin = _require251('./_array-copy-within'); // 38
              var $DP = _require251('./_object-dp'); // 39
              var $GOPD = _require251('./_object-gopd'); // 40
              var dP = $DP.f; // 41
              var gOPD = $GOPD.f; // 42
              var RangeError = global.RangeError; // 43
              var TypeError = global.TypeError; // 44
              var Uint8Array = global.Uint8Array; // 45
              var ARRAY_BUFFER = 'ArrayBuffer'; // 46
              var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER; // 47
              var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT'; // 48
              var PROTOTYPE = 'prototype'; // 49
              var ArrayProto = Array[PROTOTYPE]; // 50
              var $ArrayBuffer = $buffer.ArrayBuffer; // 51
              var $DataView = $buffer.DataView; // 52
              var arrayForEach = createArrayMethod(0); // 53
              var arrayFilter = createArrayMethod(2); // 54
              var arraySome = createArrayMethod(3); // 55
              var arrayEvery = createArrayMethod(4); // 56
              var arrayFind = createArrayMethod(5); // 57
              var arrayFindIndex = createArrayMethod(6); // 58
              var arrayIncludes = createArrayIncludes(true); // 59
              var arrayIndexOf = createArrayIncludes(false); // 60
              var arrayValues = ArrayIterators.values; // 61
              var arrayKeys = ArrayIterators.keys; // 62
              var arrayEntries = ArrayIterators.entries; // 63
              var arrayLastIndexOf = ArrayProto.lastIndexOf; // 64
              var arrayReduce = ArrayProto.reduce; // 65
              var arrayReduceRight = ArrayProto.reduceRight; // 66
              var arrayJoin = ArrayProto.join; // 67
              var arraySort = ArrayProto.sort; // 68
              var arraySlice = ArrayProto.slice; // 69
              var arrayToString = ArrayProto.toString; // 70
              var arrayToLocaleString = ArrayProto.toLocaleString; // 71
              var ITERATOR = wks('iterator'); // 72
              var TAG = wks('toStringTag'); // 73
              var TYPED_CONSTRUCTOR = uid('typed_constructor'); // 74
              var DEF_CONSTRUCTOR = uid('def_constructor'); // 75
              var ALL_CONSTRUCTORS = $typed.CONSTR; // 76
              var TYPED_ARRAY = $typed.TYPED; // 77
              var VIEW = $typed.VIEW; // 78
              var WRONG_LENGTH = 'Wrong length!'; // 79
              // 80
              var $map = createArrayMethod(1, function (O, length) {
                // 81
                return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length); // 82
              }); // 83
              // 84
              var LITTLE_ENDIAN = fails(function () {
                // 85
                // eslint-disable-next-line no-undef                                                                               // 86
                return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1; // 87
              }); // 88
              // 89
              var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
                // 90
                new Uint8Array(1).set({}); // 91
              }); // 92
              // 93
              var toOffset = function (it, BYTES) {
                // 94
                var offset = toInteger(it); // 95
                if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!'); // 96
                return offset; // 97
              }; // 98
              // 99
              var validate = function (it) {
                // 100
                if (isObject(it) && TYPED_ARRAY in it) return it; // 101
                throw TypeError(it + ' is not a typed array!'); // 102
              }; // 103
              // 104
              var allocate = function (C, length) {
                // 105
                if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
                  // 106
                  throw TypeError('It is not a typed array constructor!'); // 107
                }return new C(length); // 108
              }; // 109
              // 110
              var speciesFromList = function (O, list) {
                // 111
                return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list); // 112
              }; // 113
              // 114
              var fromList = function (C, list) {
                // 115
                var index = 0; // 116
                var length = list.length; // 117
                var result = allocate(C, length); // 118
                while (length > index) result[index] = list[index++]; // 119
                return result; // 120
              }; // 121
              // 122
              var addGetter = function (it, key, internal) {
                // 123
                dP(it, key, { get: function () {
                    return this._d[internal];
                  } }); // 124
              }; // 125
              // 126
              var $from = function from(source /* , mapfn, thisArg */) {
                // 127
                var O = toObject(source); // 128
                var aLen = arguments.length; // 129
                var mapfn = aLen > 1 ? arguments[1] : undefined; // 130
                var mapping = mapfn !== undefined; // 131
                var iterFn = getIterFn(O); // 132
                var i, length, values, result, step, iterator; // 133
                if (iterFn != undefined && !isArrayIter(iterFn)) {
                  // 134
                  for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
                    // 135
                    values.push(step.value); // 136
                  }O = values; // 137
                } // 138
                if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2); // 139
                for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
                  // 140
                  result[i] = mapping ? mapfn(O[i], i) : O[i]; // 141
                } // 142
                return result; // 143
              }; // 144
              // 145
              var $of = function of() /* ...items */{
                // 146
                var index = 0; // 147
                var length = arguments.length; // 148
                var result = allocate(this, length); // 149
                while (length > index) result[index] = arguments[index++]; // 150
                return result; // 151
              }; // 152
              // 153
              // iOS Safari 6.x fails here                                                                                         // 154
              var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
                arrayToLocaleString.call(new Uint8Array(1));
              }); // 155
              // 156
              var $toLocaleString = function toLocaleString() {
                // 157
                return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments); // 158
              }; // 159
              // 160
              var proto = { // 161
                copyWithin: function copyWithin(target, start /* , end */) {
                  // 162
                  return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined); // 163
                }, // 164
                every: function every(callbackfn /* , thisArg */) {
                  // 165
                  return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 166
                }, // 167
                fill: function fill(value /* , start, end */) {
                  // eslint-disable-line no-unused-vars                              // 168
                  return arrayFill.apply(validate(this), arguments); // 169
                }, // 170
                filter: function filter(callbackfn /* , thisArg */) {
                  // 171
                  return speciesFromList(this, arrayFilter(validate(this), callbackfn, // 172
                  arguments.length > 1 ? arguments[1] : undefined)); // 173
                }, // 174
                find: function find(predicate /* , thisArg */) {
                  // 175
                  return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined); // 176
                }, // 177
                findIndex: function findIndex(predicate /* , thisArg */) {
                  // 178
                  return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined); // 179
                }, // 180
                forEach: function forEach(callbackfn /* , thisArg */) {
                  // 181
                  arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 182
                }, // 183
                indexOf: function indexOf(searchElement /* , fromIndex */) {
                  // 184
                  return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined); // 185
                }, // 186
                includes: function includes(searchElement /* , fromIndex */) {
                  // 187
                  return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined); // 188
                }, // 189
                join: function join(separator) {
                  // eslint-disable-line no-unused-vars                                             // 190
                  return arrayJoin.apply(validate(this), arguments); // 191
                }, // 192
                lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) {
                  // eslint-disable-line no-unused-vars         // 193
                  return arrayLastIndexOf.apply(validate(this), arguments); // 194
                }, // 195
                map: function map(mapfn /* , thisArg */) {
                  // 196
                  return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined); // 197
                }, // 198
                reduce: function reduce(callbackfn /* , initialValue */) {
                  // eslint-disable-line no-unused-vars                   // 199
                  return arrayReduce.apply(validate(this), arguments); // 200
                }, // 201
                reduceRight: function reduceRight(callbackfn /* , initialValue */) {
                  // eslint-disable-line no-unused-vars         // 202
                  return arrayReduceRight.apply(validate(this), arguments); // 203
                }, // 204
                reverse: function reverse() {
                  // 205
                  var that = this; // 206
                  var length = validate(that).length; // 207
                  var middle = Math.floor(length / 2); // 208
                  var index = 0; // 209
                  var value; // 210
                  while (index < middle) {
                    // 211
                    value = that[index]; // 212
                    that[index++] = that[--length]; // 213
                    that[length] = value; // 214
                  }return that; // 215
                }, // 216
                some: function some(callbackfn /* , thisArg */) {
                  // 217
                  return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined); // 218
                }, // 219
                sort: function sort(comparefn) {
                  // 220
                  return arraySort.call(validate(this), comparefn); // 221
                }, // 222
                subarray: function subarray(begin, end) {
                  // 223
                  var O = validate(this); // 224
                  var length = O.length; // 225
                  var $begin = toAbsoluteIndex(begin, length); // 226
                  return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))( // 227
                  O.buffer, // 228
                  O.byteOffset + $begin * O.BYTES_PER_ELEMENT, // 229
                  toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin) // 230
                  ); // 231
                } // 232
              }; // 233
              // 234
              var $slice = function slice(start, end) {
                // 235
                return speciesFromList(this, arraySlice.call(validate(this), start, end)); // 236
              }; // 237
              // 238
              var $set = function set(arrayLike /* , offset */) {
                // 239
                validate(this); // 240
                var offset = toOffset(arguments[1], 1); // 241
                var length = this.length; // 242
                var src = toObject(arrayLike); // 243
                var len = toLength(src.length); // 244
                var index = 0; // 245
                if (len + offset > length) throw RangeError(WRONG_LENGTH); // 246
                while (index < len) this[offset + index] = src[index++]; // 247
              }; // 248
              // 249
              var $iterators = { // 250
                entries: function entries() {
                  // 251
                  return arrayEntries.call(validate(this)); // 252
                }, // 253
                keys: function keys() {
                  // 254
                  return arrayKeys.call(validate(this)); // 255
                }, // 256
                values: function values() {
                  // 257
                  return arrayValues.call(validate(this)); // 258
                } // 259
              }; // 260
              // 261
              var isTAIndex = function (target, key) {
                // 262
                return isObject(target) // 263
                && target[TYPED_ARRAY] // 264
                && typeof key != 'symbol' // 265
                && key in target // 266
                && String(+key) == String(key); // 267
              }; // 268
              var $getDesc = function getOwnPropertyDescriptor(target, key) {
                // 269
                return isTAIndex(target, key = toPrimitive(key, true)) // 270
                ? propertyDesc(2, target[key]) // 271
                : gOPD(target, key); // 272
              }; // 273
              var $setDesc = function defineProperty(target, key, desc) {
                // 274
                if (isTAIndex(target, key = toPrimitive(key, true)) // 275
                && isObject(desc) // 276
                && has(desc, 'value') // 277
                && !has(desc, 'get') // 278
                && !has(desc, 'set') // 279
                // TODO: add validation descriptor w/o calling accessors                                                         // 280
                && !desc.configurable // 281
                && (!has(desc, 'writable') || desc.writable) // 282
                && (!has(desc, 'enumerable') || desc.enumerable) // 283
                ) {
                    // 284
                    target[key] = desc.value; // 285
                    return target; // 286
                  }return dP(target, key, desc); // 287
              }; // 288
              // 289
              if (!ALL_CONSTRUCTORS) {
                // 290
                $GOPD.f = $getDesc; // 291
                $DP.f = $setDesc; // 292
              } // 293
              // 294
              $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', { // 295
                getOwnPropertyDescriptor: $getDesc, // 296
                defineProperty: $setDesc // 297
              }); // 298
              // 299
              if (fails(function () {
                arrayToString.call({});
              })) {
                // 300
                arrayToString = arrayToLocaleString = function toString() {
                  // 301
                  return arrayJoin.call(this); // 302
                }; // 303
              } // 304
              // 305
              var $TypedArrayPrototype$ = redefineAll({}, proto); // 306
              redefineAll($TypedArrayPrototype$, $iterators); // 307
              hide($TypedArrayPrototype$, ITERATOR, $iterators.values); // 308
              redefineAll($TypedArrayPrototype$, { // 309
                slice: $slice, // 310
                set: $set, // 311
                constructor: function () {/* noop */}, // 312
                toString: arrayToString, // 313
                toLocaleString: $toLocaleString // 314
              }); // 315
              addGetter($TypedArrayPrototype$, 'buffer', 'b'); // 316
              addGetter($TypedArrayPrototype$, 'byteOffset', 'o'); // 317
              addGetter($TypedArrayPrototype$, 'byteLength', 'l'); // 318
              addGetter($TypedArrayPrototype$, 'length', 'e'); // 319
              dP($TypedArrayPrototype$, TAG, { // 320
                get: function () {
                  return this[TYPED_ARRAY];
                } // 321
              }); // 322
              // 323
              // eslint-disable-next-line max-statements                                                                           // 324
              _module125.exports = function (KEY, BYTES, wrapper, CLAMPED) {
                // 325
                CLAMPED = !!CLAMPED; // 326
                var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'; // 327
                var GETTER = 'get' + KEY; // 328
                var SETTER = 'set' + KEY; // 329
                var TypedArray = global[NAME]; // 330
                var Base = TypedArray || {}; // 331
                var TAC = TypedArray && getPrototypeOf(TypedArray); // 332
                var FORCED = !TypedArray || !$typed.ABV; // 333
                var O = {}; // 334
                var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE]; // 335
                var getter = function (that, index) {
                  // 336
                  var data = that._d; // 337
                  return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN); // 338
                }; // 339
                var setter = function (that, index, value) {
                  // 340
                  var data = that._d; // 341
                  if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff; // 342
                  data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN); // 343
                }; // 344
                var addElement = function (that, index) {
                  // 345
                  dP(that, index, { // 346
                    get: function () {
                      // 347
                      return getter(this, index); // 348
                    }, // 349
                    set: function (value) {
                      // 350
                      return setter(this, index, value); // 351
                    }, // 352
                    enumerable: true // 353
                  }); // 354
                }; // 355
                if (FORCED) {
                  // 356
                  TypedArray = wrapper(function (that, data, $offset, $length) {
                    // 357
                    anInstance(that, TypedArray, NAME, '_d'); // 358
                    var index = 0; // 359
                    var offset = 0; // 360
                    var buffer, byteLength, length, klass; // 361
                    if (!isObject(data)) {
                      // 362
                      length = toIndex(data); // 363
                      byteLength = length * BYTES; // 364
                      buffer = new $ArrayBuffer(byteLength); // 365
                    } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                      buffer = data; // 367
                      offset = toOffset($offset, BYTES); // 368
                      var $len = data.byteLength; // 369
                      if ($length === undefined) {
                        // 370
                        if ($len % BYTES) throw RangeError(WRONG_LENGTH); // 371
                        byteLength = $len - offset; // 372
                        if (byteLength < 0) throw RangeError(WRONG_LENGTH); // 373
                      } else {
                        // 374
                        byteLength = toLength($length) * BYTES; // 375
                        if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH); // 376
                      } // 377
                      length = byteLength / BYTES; // 378
                    } else if (TYPED_ARRAY in data) {
                      // 379
                      return fromList(TypedArray, data); // 380
                    } else {
                      // 381
                      return $from.call(TypedArray, data); // 382
                    } // 383
                    hide(that, '_d', { // 384
                      b: buffer, // 385
                      o: offset, // 386
                      l: byteLength, // 387
                      e: length, // 388
                      v: new $DataView(buffer) // 389
                    }); // 390
                    while (index < length) addElement(that, index++); // 391
                  }); // 392
                  TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$); // 393
                  hide(TypedArrayPrototype, 'constructor', TypedArray); // 394
                } else if (!fails(function () {
                  // 395
                  TypedArray(1); // 396
                }) || !fails(function () {
                  // 397
                  new TypedArray(-1); // eslint-disable-line no-new                                                                // 398
                }) || !$iterDetect(function (iter) {
                  // 399
                  new TypedArray(); // eslint-disable-line no-new                                                                  // 400
                  new TypedArray(null); // eslint-disable-line no-new                                                              // 401
                  new TypedArray(1.5); // eslint-disable-line no-new                                                               // 402
                  new TypedArray(iter); // eslint-disable-line no-new                                                              // 403
                }, true)) {
                  // 404
                  TypedArray = wrapper(function (that, data, $offset, $length) {
                    // 405
                    anInstance(that, TypedArray, NAME); // 406
                    var klass; // 407
                    // `ws` module bug, temporarily remove validation length for Uint8Array                                        // 408
                    // https://github.com/websockets/ws/pull/645                                                                   // 409
                    if (!isObject(data)) return new Base(toIndex(data)); // 410
                    if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                      // 411
                      return $length !== undefined // 412
                      ? new Base(data, toOffset($offset, BYTES), $length) // 413
                      : $offset !== undefined // 414
                      ? new Base(data, toOffset($offset, BYTES)) // 415
                      : new Base(data); // 416
                    } // 417
                    if (TYPED_ARRAY in data) return fromList(TypedArray, data); // 418
                    return $from.call(TypedArray, data); // 419
                  }); // 420
                  arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
                    // 421
                    if (!(key in TypedArray)) hide(TypedArray, key, Base[key]); // 422
                  }); // 423
                  TypedArray[PROTOTYPE] = TypedArrayPrototype; // 424
                  if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray; // 425
                } // 426
                var $nativeIterator = TypedArrayPrototype[ITERATOR]; // 427
                var CORRECT_ITER_NAME = !!$nativeIterator // 428
                && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined); // 429
                var $iterator = $iterators.values; // 430
                hide(TypedArray, TYPED_CONSTRUCTOR, true); // 431
                hide(TypedArrayPrototype, TYPED_ARRAY, NAME); // 432
                hide(TypedArrayPrototype, VIEW, true); // 433
                hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray); // 434
                // 435
                if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
                  // 436
                  dP(TypedArrayPrototype, TAG, { // 437
                    get: function () {
                      return NAME;
                    } // 438
                  }); // 439
                } // 440
                // 441
                O[NAME] = TypedArray; // 442
                // 443
                $export($export.G + $export.W + $export.F * (TypedArray != Base), O); // 444
                // 445
                $export($export.S, NAME, { // 446
                  BYTES_PER_ELEMENT: BYTES // 447
                }); // 448
                // 449
                $export($export.S + $export.F * fails(function () {
                  Base.of.call(TypedArray, 1);
                }), NAME, { // 450
                  from: $from, // 451
                  of: $of // 452
                }); // 453
                // 454
                if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES); // 455
                // 456
                $export($export.P, NAME, proto); // 457
                // 458
                setSpecies(NAME); // 459
                // 460
                $export($export.P + $export.F * FORCED_SET, NAME, { set: $set }); // 461
                // 462
                $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators); // 463
                // 464
                if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString; // 465
                // 466
                $export($export.P + $export.F * fails(function () {
                  // 467
                  new TypedArray(1).slice(); // 468
                }), NAME, { slice: $slice }); // 469
                // 470
                $export($export.P + $export.F * (fails(function () {
                  // 471
                  return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString(); // 472
                }) || !fails(function () {
                  // 473
                  TypedArrayPrototype.toLocaleString.call([1, 2]); // 474
                })), NAME, { toLocaleString: $toLocaleString }); // 475
                // 476
                Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator; // 477
                if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator); // 478
              }; // 479
            } else _module125.exports = function () {/* empty */}; // 480
            // 481
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_typed.js": function (_require252, _exports141, _module126) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_typed.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = _require252('./_global'); // 1
            var hide = _require252('./_hide'); // 2
            var uid = _require252('./_uid'); // 3
            var TYPED = uid('typed_array'); // 4
            var VIEW = uid('view'); // 5
            var ABV = !!(global.ArrayBuffer && global.DataView); // 6
            var CONSTR = ABV; // 7
            var i = 0; // 8
            var l = 9; // 9
            var Typed; // 10
            // 11
            var TypedArrayConstructors = // 12
            'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array' // 13
            .split(','); // 14
            // 15
            while (i < l) {
              // 16
              if (Typed = global[TypedArrayConstructors[i++]]) {
                // 17
                hide(Typed.prototype, TYPED, true); // 18
                hide(Typed.prototype, VIEW, true); // 19
              } else CONSTR = false; // 20
            } // 21
            // 22
            _module126.exports = { // 23
              ABV: ABV, // 24
              CONSTR: CONSTR, // 25
              TYPED: TYPED, // 26
              VIEW: VIEW // 27
            }; // 28
            // 29
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_typed-buffer.js": function (_require253, _exports142) {
            // 1
            var global = _require253('./_global'); // 2
            var DESCRIPTORS = _require253('./_descriptors'); // 3
            var LIBRARY = _require253('./_library'); // 4
            var $typed = _require253('./_typed'); // 5
            var hide = _require253('./_hide'); // 6
            var redefineAll = _require253('./_redefine-all'); // 7
            var fails = _require253('./_fails'); // 8
            var anInstance = _require253('./_an-instance'); // 9
            var toInteger = _require253('./_to-integer'); // 10
            var toLength = _require253('./_to-length'); // 11
            var toIndex = _require253('./_to-index'); // 12
            var gOPN = _require253('./_object-gopn').f; // 13
            var dP = _require253('./_object-dp').f; // 14
            var arrayFill = _require253('./_array-fill'); // 15
            var setToStringTag = _require253('./_set-to-string-tag'); // 16
            var ARRAY_BUFFER = 'ArrayBuffer'; // 17
            var DATA_VIEW = 'DataView'; // 18
            var PROTOTYPE = 'prototype'; // 19
            var WRONG_LENGTH = 'Wrong length!'; // 20
            var WRONG_INDEX = 'Wrong index!'; // 21
            var $ArrayBuffer = global[ARRAY_BUFFER]; // 22
            var $DataView = global[DATA_VIEW]; // 23
            var Math = global.Math; // 24
            var RangeError = global.RangeError; // 25
            // eslint-disable-next-line no-shadow-restricted-names                                                                 // 26
            var Infinity = global.Infinity; // 27
            var BaseBuffer = $ArrayBuffer; // 28
            var abs = Math.abs; // 29
            var pow = Math.pow; // 30
            var floor = Math.floor; // 31
            var log = Math.log; // 32
            var LN2 = Math.LN2; // 33
            var BUFFER = 'buffer'; // 34
            var BYTE_LENGTH = 'byteLength'; // 35
            var BYTE_OFFSET = 'byteOffset'; // 36
            var $BUFFER = DESCRIPTORS ? '_b' : BUFFER; // 37
            var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH; // 38
            var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // 39
            // 40
            // IEEE754 conversions based on https://github.com/feross/ieee754                                                      // 41
            function packIEEE754(value, mLen, nBytes) {
              // 42
              var buffer = Array(nBytes); // 43
              var eLen = nBytes * 8 - mLen - 1; // 44
              var eMax = (1 << eLen) - 1; // 45
              var eBias = eMax >> 1; // 46
              var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0; // 47
              var i = 0; // 48
              var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0; // 49
              var e, m, c; // 50
              value = abs(value); // 51
              // eslint-disable-next-line no-self-compare                                                                          // 52
              if (value != value || value === Infinity) {
                // 53
                // eslint-disable-next-line no-self-compare                                                                        // 54
                m = value != value ? 1 : 0; // 55
                e = eMax; // 56
              } else {
                // 57
                e = floor(log(value) / LN2); // 58
                if (value * (c = pow(2, -e)) < 1) {
                  // 59
                  e--; // 60
                  c *= 2; // 61
                } // 62
                if (e + eBias >= 1) {
                  // 63
                  value += rt / c; // 64
                } else {
                  // 65
                  value += rt * pow(2, 1 - eBias); // 66
                } // 67
                if (value * c >= 2) {
                  // 68
                  e++; // 69
                  c /= 2; // 70
                } // 71
                if (e + eBias >= eMax) {
                  // 72
                  m = 0; // 73
                  e = eMax; // 74
                } else if (e + eBias >= 1) {
                  // 75
                  m = (value * c - 1) * pow(2, mLen); // 76
                  e = e + eBias; // 77
                } else {
                  // 78
                  m = value * pow(2, eBias - 1) * pow(2, mLen); // 79
                  e = 0; // 80
                } // 81
              } // 82
              for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8); // 83
              e = e << mLen | m; // 84
              eLen += mLen; // 85
              for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8); // 86
              buffer[--i] |= s * 128; // 87
              return buffer; // 88
            } // 89
            function unpackIEEE754(buffer, mLen, nBytes) {
              // 90
              var eLen = nBytes * 8 - mLen - 1; // 91
              var eMax = (1 << eLen) - 1; // 92
              var eBias = eMax >> 1; // 93
              var nBits = eLen - 7; // 94
              var i = nBytes - 1; // 95
              var s = buffer[i--]; // 96
              var e = s & 127; // 97
              var m; // 98
              s >>= 7; // 99
              for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8); // 100
              m = e & (1 << -nBits) - 1; // 101
              e >>= -nBits; // 102
              nBits += mLen; // 103
              for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8); // 104
              if (e === 0) {
                // 105
                e = 1 - eBias; // 106
              } else if (e === eMax) {
                // 107
                return m ? NaN : s ? -Infinity : Infinity; // 108
              } else {
                // 109
                m = m + pow(2, mLen); // 110
                e = e - eBias; // 111
              }return (s ? -1 : 1) * m * pow(2, e - mLen); // 112
            } // 113
            // 114
            function unpackI32(bytes) {
              // 115
              return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0]; // 116
            } // 117
            function packI8(it) {
              // 118
              return [it & 0xff]; // 119
            } // 120
            function packI16(it) {
              // 121
              return [it & 0xff, it >> 8 & 0xff]; // 122
            } // 123
            function packI32(it) {
              // 124
              return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff]; // 125
            } // 126
            function packF64(it) {
              // 127
              return packIEEE754(it, 52, 8); // 128
            } // 129
            function packF32(it) {
              // 130
              return packIEEE754(it, 23, 4); // 131
            } // 132
            // 133
            function addGetter(C, key, internal) {
              // 134
              dP(C[PROTOTYPE], key, { get: function () {
                  return this[internal];
                } }); // 135
            } // 136
            // 137
            function get(view, bytes, index, isLittleEndian) {
              // 138
              var numIndex = +index; // 139
              var intIndex = toIndex(numIndex); // 140
              if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX); // 141
              var store = view[$BUFFER]._b; // 142
              var start = intIndex + view[$OFFSET]; // 143
              var pack = store.slice(start, start + bytes); // 144
              return isLittleEndian ? pack : pack.reverse(); // 145
            } // 146
            function set(view, bytes, index, conversion, value, isLittleEndian) {
              // 147
              var numIndex = +index; // 148
              var intIndex = toIndex(numIndex); // 149
              if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX); // 150
              var store = view[$BUFFER]._b; // 151
              var start = intIndex + view[$OFFSET]; // 152
              var pack = conversion(+value); // 153
              for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1]; // 154
            } // 155
            // 156
            if (!$typed.ABV) {
              // 157
              $ArrayBuffer = function ArrayBuffer(length) {
                // 158
                anInstance(this, $ArrayBuffer, ARRAY_BUFFER); // 159
                var byteLength = toIndex(length); // 160
                this._b = arrayFill.call(Array(byteLength), 0); // 161
                this[$LENGTH] = byteLength; // 162
              }; // 163
              // 164
              $DataView = function DataView(buffer, byteOffset, byteLength) {
                // 165
                anInstance(this, $DataView, DATA_VIEW); // 166
                anInstance(buffer, $ArrayBuffer, DATA_VIEW); // 167
                var bufferLength = buffer[$LENGTH]; // 168
                var offset = toInteger(byteOffset); // 169
                if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!'); // 170
                byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength); // 171
                if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH); // 172
                this[$BUFFER] = buffer; // 173
                this[$OFFSET] = offset; // 174
                this[$LENGTH] = byteLength; // 175
              }; // 176
              // 177
              if (DESCRIPTORS) {
                // 178
                addGetter($ArrayBuffer, BYTE_LENGTH, '_l'); // 179
                addGetter($DataView, BUFFER, '_b'); // 180
                addGetter($DataView, BYTE_LENGTH, '_l'); // 181
                addGetter($DataView, BYTE_OFFSET, '_o'); // 182
              } // 183
              // 184
              redefineAll($DataView[PROTOTYPE], { // 185
                getInt8: function getInt8(byteOffset) {
                  // 186
                  return get(this, 1, byteOffset)[0] << 24 >> 24; // 187
                }, // 188
                getUint8: function getUint8(byteOffset) {
                  // 189
                  return get(this, 1, byteOffset)[0]; // 190
                }, // 191
                getInt16: function getInt16(byteOffset /* , littleEndian */) {
                  // 192
                  var bytes = get(this, 2, byteOffset, arguments[1]); // 193
                  return (bytes[1] << 8 | bytes[0]) << 16 >> 16; // 194
                }, // 195
                getUint16: function getUint16(byteOffset /* , littleEndian */) {
                  // 196
                  var bytes = get(this, 2, byteOffset, arguments[1]); // 197
                  return bytes[1] << 8 | bytes[0]; // 198
                }, // 199
                getInt32: function getInt32(byteOffset /* , littleEndian */) {
                  // 200
                  return unpackI32(get(this, 4, byteOffset, arguments[1])); // 201
                }, // 202
                getUint32: function getUint32(byteOffset /* , littleEndian */) {
                  // 203
                  return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0; // 204
                }, // 205
                getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
                  // 206
                  return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4); // 207
                }, // 208
                getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
                  // 209
                  return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8); // 210
                }, // 211
                setInt8: function setInt8(byteOffset, value) {
                  // 212
                  set(this, 1, byteOffset, packI8, value); // 213
                }, // 214
                setUint8: function setUint8(byteOffset, value) {
                  // 215
                  set(this, 1, byteOffset, packI8, value); // 216
                }, // 217
                setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
                  // 218
                  set(this, 2, byteOffset, packI16, value, arguments[2]); // 219
                }, // 220
                setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
                  // 221
                  set(this, 2, byteOffset, packI16, value, arguments[2]); // 222
                }, // 223
                setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
                  // 224
                  set(this, 4, byteOffset, packI32, value, arguments[2]); // 225
                }, // 226
                setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
                  // 227
                  set(this, 4, byteOffset, packI32, value, arguments[2]); // 228
                }, // 229
                setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
                  // 230
                  set(this, 4, byteOffset, packF32, value, arguments[2]); // 231
                }, // 232
                setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
                  // 233
                  set(this, 8, byteOffset, packF64, value, arguments[2]); // 234
                } // 235
              }); // 236
            } else {
              // 237
              if (!fails(function () {
                // 238
                $ArrayBuffer(1); // 239
              }) || !fails(function () {
                // 240
                new $ArrayBuffer(-1); // eslint-disable-line no-new                                                                // 241
              }) || fails(function () {
                // 242
                new $ArrayBuffer(); // eslint-disable-line no-new                                                                  // 243
                new $ArrayBuffer(1.5); // eslint-disable-line no-new                                                               // 244
                new $ArrayBuffer(NaN); // eslint-disable-line no-new                                                               // 245
                return $ArrayBuffer.name != ARRAY_BUFFER; // 246
              })) {
                // 247
                $ArrayBuffer = function ArrayBuffer(length) {
                  // 248
                  anInstance(this, $ArrayBuffer); // 249
                  return new BaseBuffer(toIndex(length)); // 250
                }; // 251
                var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE]; // 252
                for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
                  // 253
                  if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]); // 254
                } // 255
                if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer; // 256
              } // 257
              // iOS Safari 7.x bug                                                                                                // 258
              var view = new $DataView(new $ArrayBuffer(2)); // 259
              var $setInt8 = $DataView[PROTOTYPE].setInt8; // 260
              view.setInt8(0, 2147483648); // 261
              view.setInt8(1, 2147483649); // 262
              if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], { // 263
                setInt8: function setInt8(byteOffset, value) {
                  // 264
                  $setInt8.call(this, byteOffset, value << 24 >> 24); // 265
                }, // 266
                setUint8: function setUint8(byteOffset, value) {
                  // 267
                  $setInt8.call(this, byteOffset, value << 24 >> 24); // 268
                } // 269
              }, true); // 270
            } // 271
            setToStringTag($ArrayBuffer, ARRAY_BUFFER); // 272
            setToStringTag($DataView, DATA_VIEW); // 273
            hide($DataView[PROTOTYPE], $typed.VIEW, true); // 274
            _exports142[ARRAY_BUFFER] = $ArrayBuffer; // 275
            _exports142[DATA_VIEW] = $DataView; // 276
            // 277
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_to-index.js": function (_require254, _exports143, _module127) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_to-index.js                                                                           //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // https://tc39.github.io/ecma262/#sec-toindex                                                                         // 1
            var toInteger = _require254('./_to-integer'); // 2
            var toLength = _require254('./_to-length'); // 3
            _module127.exports = function (it) {
              // 4
              if (it === undefined) return 0; // 5
              var number = toInteger(it); // 6
              var length = toLength(number); // 7
              if (number !== length) throw RangeError('Wrong length!'); // 8
              return length; // 9
            }; // 10
            // 11
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "_species-constructor.js": function (_require255, _exports144, _module128) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/_species-constructor.js                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // 7.3.20 SpeciesConstructor(O, defaultConstructor)                                                                    // 1
            var anObject = _require255('./_an-object'); // 2
            var aFunction = _require255('./_a-function'); // 3
            var SPECIES = _require255('./_wks')('species'); // 4
            _module128.exports = function (O, D) {
              // 5
              var C = anObject(O).constructor; // 6
              var S; // 7
              return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S); // 8
            }; // 9
            // 10
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "es6.typed.uint32-array.js": function (_require256) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/modules/es6.typed.uint32-array.js                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require256('./_typed-array')('Uint32', 4, function (init) {
              // 1
              return function Uint32Array(data, byteOffset, length) {
                // 2
                return init(this, data, byteOffset, length); // 3
              }; // 4
            }); // 5
            // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "es6": { "array.js": function (_require257, _exports145, _module129) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/array.js                                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require257('../modules/es6.string.iterator'); // 1
            _require257('../modules/es6.array.is-array'); // 2
            _require257('../modules/es6.array.from'); // 3
            _require257('../modules/es6.array.of'); // 4
            _require257('../modules/es6.array.join'); // 5
            _require257('../modules/es6.array.slice'); // 6
            _require257('../modules/es6.array.sort'); // 7
            _require257('../modules/es6.array.for-each'); // 8
            _require257('../modules/es6.array.map'); // 9
            _require257('../modules/es6.array.filter'); // 10
            _require257('../modules/es6.array.some'); // 11
            _require257('../modules/es6.array.every'); // 12
            _require257('../modules/es6.array.reduce'); // 13
            _require257('../modules/es6.array.reduce-right'); // 14
            _require257('../modules/es6.array.index-of'); // 15
            _require257('../modules/es6.array.last-index-of'); // 16
            _require257('../modules/es6.array.copy-within'); // 17
            _require257('../modules/es6.array.fill'); // 18
            _require257('../modules/es6.array.find'); // 19
            _require257('../modules/es6.array.find-index'); // 20
            _require257('../modules/es6.array.species'); // 21
            _require257('../modules/es6.array.iterator'); // 22
            _module129.exports = _require257('../modules/_core').Array; // 23
            // 24
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "function.js": function (_require258, _exports146, _module130) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/function.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require258('../modules/es6.function.bind'); // 1
            _require258('../modules/es6.function.name'); // 2
            _require258('../modules/es6.function.has-instance'); // 3
            _module130.exports = _require258('../modules/_core').Function; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "math.js": function (_require259, _exports147, _module131) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/math.js                                                                                    //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require259('../modules/es6.math.acosh'); // 1
            _require259('../modules/es6.math.asinh'); // 2
            _require259('../modules/es6.math.atanh'); // 3
            _require259('../modules/es6.math.cbrt'); // 4
            _require259('../modules/es6.math.clz32'); // 5
            _require259('../modules/es6.math.cosh'); // 6
            _require259('../modules/es6.math.expm1'); // 7
            _require259('../modules/es6.math.fround'); // 8
            _require259('../modules/es6.math.hypot'); // 9
            _require259('../modules/es6.math.imul'); // 10
            _require259('../modules/es6.math.log10'); // 11
            _require259('../modules/es6.math.log1p'); // 12
            _require259('../modules/es6.math.log2'); // 13
            _require259('../modules/es6.math.sign'); // 14
            _require259('../modules/es6.math.sinh'); // 15
            _require259('../modules/es6.math.tanh'); // 16
            _require259('../modules/es6.math.trunc'); // 17
            _module131.exports = _require259('../modules/_core').Math; // 18
            // 19
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "object.js": function (_require260, _exports148, _module132) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/object.js                                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require260('../modules/es6.symbol'); // 1
            _require260('../modules/es6.object.create'); // 2
            _require260('../modules/es6.object.define-property'); // 3
            _require260('../modules/es6.object.define-properties'); // 4
            _require260('../modules/es6.object.get-own-property-descriptor'); // 5
            _require260('../modules/es6.object.get-prototype-of'); // 6
            _require260('../modules/es6.object.keys'); // 7
            _require260('../modules/es6.object.get-own-property-names'); // 8
            _require260('../modules/es6.object.freeze'); // 9
            _require260('../modules/es6.object.seal'); // 10
            _require260('../modules/es6.object.prevent-extensions'); // 11
            _require260('../modules/es6.object.is-frozen'); // 12
            _require260('../modules/es6.object.is-sealed'); // 13
            _require260('../modules/es6.object.is-extensible'); // 14
            _require260('../modules/es6.object.assign'); // 15
            _require260('../modules/es6.object.is'); // 16
            _require260('../modules/es6.object.set-prototype-of'); // 17
            _require260('../modules/es6.object.to-string'); // 18
            // 19
            _module132.exports = _require260('../modules/_core').Object; // 20
            // 21
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "regexp.js": function (_require261, _exports149, _module133) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/regexp.js                                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require261('../modules/es6.regexp.constructor'); // 1
            _require261('../modules/es6.regexp.to-string'); // 2
            _require261('../modules/es6.regexp.flags'); // 3
            _require261('../modules/es6.regexp.match'); // 4
            _require261('../modules/es6.regexp.replace'); // 5
            _require261('../modules/es6.regexp.search'); // 6
            _require261('../modules/es6.regexp.split'); // 7
            _module133.exports = _require261('../modules/_core').RegExp; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "string.js": function (_require262, _exports150, _module134) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/string.js                                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require262('../modules/es6.string.from-code-point'); // 1
            _require262('../modules/es6.string.raw'); // 2
            _require262('../modules/es6.string.trim'); // 3
            _require262('../modules/es6.string.iterator'); // 4
            _require262('../modules/es6.string.code-point-at'); // 5
            _require262('../modules/es6.string.ends-with'); // 6
            _require262('../modules/es6.string.includes'); // 7
            _require262('../modules/es6.string.repeat'); // 8
            _require262('../modules/es6.string.starts-with'); // 9
            _require262('../modules/es6.string.anchor'); // 10
            _require262('../modules/es6.string.big'); // 11
            _require262('../modules/es6.string.blink'); // 12
            _require262('../modules/es6.string.bold'); // 13
            _require262('../modules/es6.string.fixed'); // 14
            _require262('../modules/es6.string.fontcolor'); // 15
            _require262('../modules/es6.string.fontsize'); // 16
            _require262('../modules/es6.string.italics'); // 17
            _require262('../modules/es6.string.link'); // 18
            _require262('../modules/es6.string.small'); // 19
            _require262('../modules/es6.string.strike'); // 20
            _require262('../modules/es6.string.sub'); // 21
            _require262('../modules/es6.string.sup'); // 22
            _require262('../modules/es6.regexp.match'); // 23
            _require262('../modules/es6.regexp.replace'); // 24
            _require262('../modules/es6.regexp.search'); // 25
            _require262('../modules/es6.regexp.split'); // 26
            _module134.exports = _require262('../modules/_core').String; // 27
            // 28
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "weak-map.js": function (_require263, _exports151, _module135) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/weak-map.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require263('../modules/es6.object.to-string'); // 1
            _require263('../modules/es6.array.iterator'); // 2
            _require263('../modules/es6.weak-map'); // 3
            _module135.exports = _require263('../modules/_core').WeakMap; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "weak-set.js": function (_require264, _exports152, _module136) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es6/weak-set.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require264('../modules/es6.object.to-string'); // 1
            _require264('../modules/web.dom.iterable'); // 2
            _require264('../modules/es6.weak-set'); // 3
            _module136.exports = _require264('../modules/_core').WeakSet; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "es7": { "array.js": function (_require265, _exports153, _module137) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es7/array.js                                                                                   //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require265('../modules/es7.array.includes'); // 1
            _require265('../modules/es7.array.flat-map'); // 2
            _require265('../modules/es7.array.flatten'); // 3
            _module137.exports = _require265('../modules/_core').Array; // 4
            // 5
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "object.js": function (_require266, _exports154, _module138) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // node_modules/core-js/es7/object.js                                                                                  //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require266('../modules/es7.object.get-own-property-descriptors'); // 1
            _require266('../modules/es7.object.values'); // 2
            _require266('../modules/es7.object.entries'); // 3
            _require266('../modules/es7.object.define-getter'); // 4
            _require266('../modules/es7.object.define-setter'); // 5
            _require266('../modules/es7.object.lookup-getter'); // 6
            _require266('../modules/es7.object.lookup-setter'); // 7
            _module138.exports = _require266('../modules/_core').Object; // 8
            // 9
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "library": { "fn": { "symbol": { "iterator.js": function (_require267, _exports155, _module139) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/symbol/iterator.js                                                                  //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require267('../../modules/es6.string.iterator'); // 1
                _require267('../../modules/web.dom.iterable'); // 2
                _module139.exports = _require267('../../modules/_wks-ext').f('iterator'); // 3
                // 4
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "index.js": function (_require268, _exports156, _module140) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/symbol/index.js                                                                     //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require268('../../modules/es6.symbol'); // 1
                _require268('../../modules/es6.object.to-string'); // 2
                _require268('../../modules/es7.symbol.async-iterator'); // 3
                _require268('../../modules/es7.symbol.observable'); // 4
                _module140.exports = _require268('../../modules/_core').Symbol; // 5
                // 6
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } }, "object": { "set-prototype-of.js": function (_require269, _exports157, _module141) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require269('../../modules/es6.object.set-prototype-of'); // 1
                _module141.exports = _require269('../../modules/_core').Object.setPrototypeOf; // 2
                // 3
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "create.js": function (_require270, _exports158, _module142) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/object/create.js                                                                    //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require270('../../modules/es6.object.create'); // 1
                var $Object = _require270('../../modules/_core').Object; // 2
                _module142.exports = function create(P, D) {
                  // 3
                  return $Object.create(P, D); // 4
                }; // 5
                // 6
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } }, "array": { "from.js": function (_require271, _exports159, _module143) {

                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                     //
                // node_modules/core-js/library/fn/array/from.js                                                                       //
                //                                                                                                                     //
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _require271('../../modules/es6.string.iterator'); // 1
                _require271('../../modules/es6.array.from'); // 2
                _module143.exports = _require271('../../modules/_core').Array.from; // 3
                // 4
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } } }, "modules": { "es6.string.iterator.js": function (_require272) {
              // 1
              var $at = _require272('./_string-at')(true); // 2
              // 3
              // 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
              _require272('./_iter-define')(String, 'String', function (iterated) {
                // 5
                this._t = String(iterated); // target                                                                                // 6
                this._i = 0; // next index                                                                            // 7
                // 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
              }, function () {
                // 9
                var O = this._t; // 10
                var index = this._i; // 11
                var point; // 12
                if (index >= O.length) return { value: undefined, done: true }; // 13
                point = $at(O, index); // 14
                this._i += point.length; // 15
                return { value: point, done: false }; // 16
              }); // 17
              // 18
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_string-at.js": function (_require273, _exports160, _module144) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_string-at.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var toInteger = _require273('./_to-integer'); // 1
              var defined = _require273('./_defined'); // 2
              // true  -> String#at                                                                                                  // 3
              // false -> String#codePointAt                                                                                         // 4
              _module144.exports = function (TO_STRING) {
                // 5
                return function (that, pos) {
                  // 6
                  var s = String(defined(that)); // 7
                  var i = toInteger(pos); // 8
                  var l = s.length; // 9
                  var a, b; // 10
                  if (i < 0 || i >= l) return TO_STRING ? '' : undefined; // 11
                  a = s.charCodeAt(i); // 12
                  return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff // 13
                  ? TO_STRING ? s.charAt(i) : a // 14
                  : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000; // 15
                }; // 16
              }; // 17
              // 18
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-integer.js": function (_require274, _exports161, _module145) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-integer.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.4 ToInteger                                                                                                     // 1
              var ceil = Math.ceil; // 2
              var floor = Math.floor; // 3
              _module145.exports = function (it) {
                // 4
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it); // 5
              }; // 6
              // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_defined.js": function (_require275, _exports162, _module146) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_defined.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
              _module146.exports = function (it) {
                // 2
                if (it == undefined) throw TypeError("Can't call method on  " + it); // 3
                return it; // 4
              }; // 5
              // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-define.js": function (_require276, _exports163, _module147) {
              // 1
              var LIBRARY = _require276('./_library'); // 2
              var $export = _require276('./_export'); // 3
              var redefine = _require276('./_redefine'); // 4
              var hide = _require276('./_hide'); // 5
              var has = _require276('./_has'); // 6
              var Iterators = _require276('./_iterators'); // 7
              var $iterCreate = _require276('./_iter-create'); // 8
              var setToStringTag = _require276('./_set-to-string-tag'); // 9
              var getPrototypeOf = _require276('./_object-gpo'); // 10
              var ITERATOR = _require276('./_wks')('iterator'); // 11
              var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`                                // 12
              var FF_ITERATOR = '@@iterator'; // 13
              var KEYS = 'keys'; // 14
              var VALUES = 'values'; // 15
              // 16
              var returnThis = function () {
                return this;
              }; // 17
              // 18
              _module147.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
                // 19
                $iterCreate(Constructor, NAME, next); // 20
                var getMethod = function (kind) {
                  // 21
                  if (!BUGGY && kind in proto) return proto[kind]; // 22
                  switch (kind) {// 23
                    case KEYS:
                      return function keys() {
                        return new Constructor(this, kind);
                      }; // 24
                    case VALUES:
                      return function values() {
                        return new Constructor(this, kind);
                      }; // 25
                  }return function entries() {
                    return new Constructor(this, kind);
                  }; // 26
                }; // 27
                var TAG = NAME + ' Iterator'; // 28
                var DEF_VALUES = DEFAULT == VALUES; // 29
                var VALUES_BUG = false; // 30
                var proto = Base.prototype; // 31
                var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]; // 32
                var $default = $native || getMethod(DEFAULT); // 33
                var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined; // 34
                var $anyNative = NAME == 'Array' ? proto.entries || $native : $native; // 35
                var methods, key, IteratorPrototype; // 36
                // Fix native                                                                                                        // 37
                if ($anyNative) {
                  // 38
                  IteratorPrototype = getPrototypeOf($anyNative.call(new Base())); // 39
                  if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                    // 40
                    // Set @@toStringTag to native iterators                                                                         // 41
                    setToStringTag(IteratorPrototype, TAG, true); // 42
                    // fix for some old engines                                                                                      // 43
                    if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis); // 44
                  } // 45
                } // 46
                // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
                if (DEF_VALUES && $native && $native.name !== VALUES) {
                  // 48
                  VALUES_BUG = true; // 49
                  $default = function values() {
                    return $native.call(this);
                  }; // 50
                } // 51
                // Define iterator                                                                                                   // 52
                if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                  // 53
                  hide(proto, ITERATOR, $default); // 54
                } // 55
                // Plug for library                                                                                                  // 56
                Iterators[NAME] = $default; // 57
                Iterators[TAG] = returnThis; // 58
                if (DEFAULT) {
                  // 59
                  methods = { // 60
                    values: DEF_VALUES ? $default : getMethod(VALUES), // 61
                    keys: IS_SET ? $default : getMethod(KEYS), // 62
                    entries: $entries // 63
                  }; // 64
                  if (FORCED) for (key in methods) {
                    // 65
                    if (!(key in proto)) redefine(proto, key, methods[key]); // 66
                  } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods); // 67
                } // 68
                return methods; // 69
              }; // 70
              // 71
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_library.js": function (_require277, _exports164, _module148) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_library.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module148.exports = true; // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_export.js": function (_require278, _exports166, _module149) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_export.js                                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var global = _require278('./_global'); // 1
              var core = _require278('./_core'); // 2
              var ctx = _require278('./_ctx'); // 3
              var hide = _require278('./_hide'); // 4
              var PROTOTYPE = 'prototype'; // 5
              // 6
              var $export = function (type, name, source) {
                // 7
                var IS_FORCED = type & $export.F; // 8
                var IS_GLOBAL = type & $export.G; // 9
                var IS_STATIC = type & $export.S; // 10
                var IS_PROTO = type & $export.P; // 11
                var IS_BIND = type & $export.B; // 12
                var IS_WRAP = type & $export.W; // 13
                var _exports165 = IS_GLOBAL ? core : core[name] || (core[name] = {}); // 14
                var expProto = _exports165[PROTOTYPE]; // 15
                var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]; // 16
                var key, own, out; // 17
                if (IS_GLOBAL) source = name; // 18
                for (key in source) {
                  // 19
                  // contains in native                                                                                              // 20
                  own = !IS_FORCED && target && target[key] !== undefined; // 21
                  if (own && key in _exports165) continue; // 22
                  // export native or passed                                                                                         // 23
                  out = own ? target[key] : source[key]; // 24
                  // prevent global pollution for namespaces                                                                         // 25
                  _exports165[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // 26
                  // bind timers to global for call from export context                                                              // 27
                  : IS_BIND && own ? ctx(out, global) // 28
                  // wrap global constructors for prevent change them in library                                                     // 29
                  : IS_WRAP && target[key] == out ? function (C) {
                    // 30
                    var F = function (a, b, c) {
                      // 31
                      if (this instanceof C) {
                        // 32
                        switch (arguments.length) {// 33
                          case 0:
                            return new C(); // 34
                          case 1:
                            return new C(a); // 35
                          case 2:
                            return new C(a, b); // 36
                        }return new C(a, b, c); // 37
                      }return C.apply(this, arguments); // 38
                    }; // 39
                    F[PROTOTYPE] = C[PROTOTYPE]; // 40
                    return F; // 41
                    // make static versions for prototype methods                                                                      // 42
                  }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // 43
                  // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44
                  if (IS_PROTO) {
                    // 45
                    (_exports165.virtual || (_exports165.virtual = {}))[key] = out; // 46
                    // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47
                    if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out); // 48
                  } // 49
                } // 50
              }; // 51
              // type bitmap                                                                                                         // 52
              $export.F = 1; // forced                                                                                             // 53
              $export.G = 2; // global                                                                                             // 54
              $export.S = 4; // static                                                                                             // 55
              $export.P = 8; // proto                                                                                              // 56
              $export.B = 16; // bind                                                                                               // 57
              $export.W = 32; // wrap                                                                                               // 58
              $export.U = 64; // safe                                                                                               // 59
              $export.R = 128; // real proto method for `library`                                                                    // 60
              _module149.exports = $export; // 61
              // 62
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_global.js": function (_require279, _exports167, _module150) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_global.js                                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
              var global = _module150.exports = typeof window != 'undefined' && window.Math == Math // 2
              ? window : typeof self != 'undefined' && self.Math == Math ? self // 3
              // eslint-disable-next-line no-new-func                                                                              // 4
              : Function('return this')(); // 5
              if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef                                              // 6
              // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_core.js": function (_require280, _exports168, _module151) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_core.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var core = _module151.exports = { version: '2.5.1' }; // 1
              if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef                                                // 2
              // 3
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_ctx.js": function (_require281, _exports169, _module152) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_ctx.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // optional / simple context binding                                                                                   // 1
              var aFunction = _require281('./_a-function'); // 2
              _module152.exports = function (fn, that, length) {
                // 3
                aFunction(fn); // 4
                if (that === undefined) return fn; // 5
                switch (length) {// 6
                  case 1:
                    return function (a) {
                      // 7
                      return fn.call(that, a); // 8
                    }; // 9
                  case 2:
                    return function (a, b) {
                      // 10
                      return fn.call(that, a, b); // 11
                    }; // 12
                  case 3:
                    return function (a, b, c) {
                      // 13
                      return fn.call(that, a, b, c); // 14
                    }; // 15
                } // 16
                return function () /* ...args */{
                  // 17
                  return fn.apply(that, arguments); // 18
                }; // 19
              }; // 20
              // 21
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_a-function.js": function (_require282, _exports170, _module153) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_a-function.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module153.exports = function (it) {
                // 1
                if (typeof it != 'function') throw TypeError(it + ' is not a function!'); // 2
                return it; // 3
              }; // 4
              // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_hide.js": function (_require283, _exports171, _module154) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_hide.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var dP = _require283('./_object-dp'); // 1
              var createDesc = _require283('./_property-desc'); // 2
              _module154.exports = _require283('./_descriptors') ? function (object, key, value) {
                // 3
                return dP.f(object, key, createDesc(1, value)); // 4
              } : function (object, key, value) {
                // 5
                object[key] = value; // 6
                return object; // 7
              }; // 8
              // 9
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-dp.js": function (_require284, _exports172) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-dp.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var anObject = _require284('./_an-object'); // 1
              var IE8_DOM_DEFINE = _require284('./_ie8-dom-define'); // 2
              var toPrimitive = _require284('./_to-primitive'); // 3
              var dP = Object.defineProperty; // 4
              // 5
              _exports172.f = _require284('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                // 6
                anObject(O); // 7
                P = toPrimitive(P, true); // 8
                anObject(Attributes); // 9
                if (IE8_DOM_DEFINE) try {
                  // 10
                  return dP(O, P, Attributes); // 11
                } catch (e) {} /* empty */ // 12
                if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!'); // 13
                if ('value' in Attributes) O[P] = Attributes.value; // 14
                return O; // 15
              }; // 16
              // 17
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_an-object.js": function (_require285, _exports173, _module155) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_an-object.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var isObject = _require285('./_is-object'); // 1
              _module155.exports = function (it) {
                // 2
                if (!isObject(it)) throw TypeError(it + ' is not an object!'); // 3
                return it; // 4
              }; // 5
              // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_is-object.js": function (_require286, _exports174, _module156) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_is-object.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module156.exports = function (it) {
                // 1
                return typeof it === 'object' ? it !== null : typeof it === 'function'; // 2
              }; // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_ie8-dom-define.js": function (_require287, _exports175, _module157) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module157.exports = !_require287('./_descriptors') && !_require287('./_fails')(function () {
                // 1
                return Object.defineProperty(_require287('./_dom-create')('div'), 'a', { get: function () {
                    return 7;
                  } }).a != 7; // 2
              }); // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_descriptors.js": function (_require288, _exports176, _module158) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_descriptors.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // Thank's IE8 for his funny defineProperty                                                                            // 1
              _module158.exports = !_require288('./_fails')(function () {
                // 2
                return Object.defineProperty({}, 'a', { get: function () {
                    return 7;
                  } }).a != 7; // 3
              }); // 4
              // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_fails.js": function (_require289, _exports177, _module159) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_fails.js                                                                      //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module159.exports = function (exec) {
                // 1
                try {
                  // 2
                  return !!exec(); // 3
                } catch (e) {
                  // 4
                  return true; // 5
                } // 6
              }; // 7
              // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_dom-create.js": function (_require290, _exports178, _module160) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_dom-create.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var isObject = _require290('./_is-object'); // 1
              var document = _require290('./_global').document; // 2
              // typeof document.createElement is 'object' in old IE                                                                 // 3
              var is = isObject(document) && isObject(document.createElement); // 4
              _module160.exports = function (it) {
                // 5
                return is ? document.createElement(it) : {}; // 6
              }; // 7
              // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-primitive.js": function (_require291, _exports179, _module161) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-primitive.js                                                               //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
              var isObject = _require291('./_is-object'); // 2
              // instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
              // and the second argument - flag - preferred type is a string                                                         // 4
              _module161.exports = function (it, S) {
                // 5
                if (!isObject(it)) return it; // 6
                var fn, val; // 7
                if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 8
                if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val; // 9
                if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val; // 10
                throw TypeError("Can't convert object to primitive value"); // 11
              }; // 12
              // 13
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_property-desc.js": function (_require292, _exports180, _module162) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_property-desc.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module162.exports = function (bitmap, value) {
                // 1
                return { // 2
                  enumerable: !(bitmap & 1), // 3
                  configurable: !(bitmap & 2), // 4
                  writable: !(bitmap & 4), // 5
                  value: value // 6
                }; // 7
              }; // 8
              // 9
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_redefine.js": function (_require293, _exports181, _module163) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_redefine.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module163.exports = _require293('./_hide'); // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_has.js": function (_require294, _exports182, _module164) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_has.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var hasOwnProperty = {}.hasOwnProperty; // 1
              _module164.exports = function (it, key) {
                // 2
                return hasOwnProperty.call(it, key); // 3
              }; // 4
              // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iterators.js": function (_require295, _exports183, _module165) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iterators.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module165.exports = {}; // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-create.js": function (_require296, _exports184, _module166) {
              // 1
              var create = _require296('./_object-create'); // 2
              var descriptor = _require296('./_property-desc'); // 3
              var setToStringTag = _require296('./_set-to-string-tag'); // 4
              var IteratorPrototype = {}; // 5
              // 6
              // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
              _require296('./_hide')(IteratorPrototype, _require296('./_wks')('iterator'), function () {
                return this;
              }); // 8
              // 9
              _module166.exports = function (Constructor, NAME, next) {
                // 10
                Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) }); // 11
                setToStringTag(Constructor, NAME + ' Iterator'); // 12
              }; // 13
              // 14
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-create.js": function (_require297, _exports185, _module167) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-create.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
              var anObject = _require297('./_an-object'); // 2
              var dPs = _require297('./_object-dps'); // 3
              var enumBugKeys = _require297('./_enum-bug-keys'); // 4
              var IE_PROTO = _require297('./_shared-key')('IE_PROTO'); // 5
              var Empty = function () {/* empty */}; // 6
              var PROTOTYPE = 'prototype'; // 7
              // 8
              // Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
              var createDict = function () {
                // 10
                // Thrash, waste and sodomy: IE GC bug                                                                               // 11
                var iframe = _require297('./_dom-create')('iframe'); // 12
                var i = enumBugKeys.length; // 13
                var lt = '<'; // 14
                var gt = '>'; // 15
                var iframeDocument; // 16
                iframe.style.display = 'none'; // 17
                _require297('./_html').appendChild(iframe); // 18
                iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
                // createDict = iframe.contentWindow.Object;                                                                         // 20
                // html.removeChild(iframe);                                                                                         // 21
                iframeDocument = iframe.contentWindow.document; // 22
                iframeDocument.open(); // 23
                iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt); // 24
                iframeDocument.close(); // 25
                createDict = iframeDocument.F; // 26
                while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]]; // 27
                return createDict(); // 28
              }; // 29
              // 30
              _module167.exports = Object.create || function create(O, Properties) {
                // 31
                var result; // 32
                if (O !== null) {
                  // 33
                  Empty[PROTOTYPE] = anObject(O); // 34
                  result = new Empty(); // 35
                  Empty[PROTOTYPE] = null; // 36
                  // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
                  result[IE_PROTO] = O; // 38
                } else result = createDict(); // 39
                return Properties === undefined ? result : dPs(result, Properties); // 40
              }; // 41
              // 42
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-dps.js": function (_require298, _exports186, _module168) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-dps.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var dP = _require298('./_object-dp'); // 1
              var anObject = _require298('./_an-object'); // 2
              var getKeys = _require298('./_object-keys'); // 3
              // 4
              _module168.exports = _require298('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
                // 5
                anObject(O); // 6
                var keys = getKeys(Properties); // 7
                var length = keys.length; // 8
                var i = 0; // 9
                var P; // 10
                while (length > i) dP.f(O, P = keys[i++], Properties[P]); // 11
                return O; // 12
              }; // 13
              // 14
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-keys.js": function (_require299, _exports187, _module169) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-keys.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
              var $keys = _require299('./_object-keys-internal'); // 2
              var enumBugKeys = _require299('./_enum-bug-keys'); // 3
              // 4
              _module169.exports = Object.keys || function keys(O) {
                // 5
                return $keys(O, enumBugKeys); // 6
              }; // 7
              // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-keys-internal.js": function (_require300, _exports188, _module170) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-keys-internal.js                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var has = _require300('./_has'); // 1
              var toIObject = _require300('./_to-iobject'); // 2
              var arrayIndexOf = _require300('./_array-includes')(false); // 3
              var IE_PROTO = _require300('./_shared-key')('IE_PROTO'); // 4
              // 5
              _module170.exports = function (object, names) {
                // 6
                var O = toIObject(object); // 7
                var i = 0; // 8
                var result = []; // 9
                var key; // 10
                for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key); // 11
                // Don't enum bug & hidden keys                                                                                      // 12
                while (names.length > i) if (has(O, key = names[i++])) {
                  // 13
                  ~arrayIndexOf(result, key) || result.push(key); // 14
                } // 15
                return result; // 16
              }; // 17
              // 18
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-iobject.js": function (_require301, _exports189, _module171) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-iobject.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
              var IObject = _require301('./_iobject'); // 2
              var defined = _require301('./_defined'); // 3
              _module171.exports = function (it) {
                // 4
                return IObject(defined(it)); // 5
              }; // 6
              // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iobject.js": function (_require302, _exports190, _module172) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iobject.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
              var cof = _require302('./_cof'); // 2
              // eslint-disable-next-line no-prototype-builtins                                                                      // 3
              _module172.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
                // 4
                return cof(it) == 'String' ? it.split('') : Object(it); // 5
              }; // 6
              // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_cof.js": function (_require303, _exports191, _module173) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_cof.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var toString = {}.toString; // 1
              // 2
              _module173.exports = function (it) {
                // 3
                return toString.call(it).slice(8, -1); // 4
              }; // 5
              // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_array-includes.js": function (_require304, _exports192, _module174) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_array-includes.js                                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // false -> Array#indexOf                                                                                              // 1
              // true  -> Array#includes                                                                                             // 2
              var toIObject = _require304('./_to-iobject'); // 3
              var toLength = _require304('./_to-length'); // 4
              var toAbsoluteIndex = _require304('./_to-absolute-index'); // 5
              _module174.exports = function (IS_INCLUDES) {
                // 6
                return function ($this, el, fromIndex) {
                  // 7
                  var O = toIObject($this); // 8
                  var length = toLength(O.length); // 9
                  var index = toAbsoluteIndex(fromIndex, length); // 10
                  var value; // 11
                  // Array#includes uses SameValueZero equality algorithm                                                            // 12
                  // eslint-disable-next-line no-self-compare                                                                        // 13
                  if (IS_INCLUDES && el != el) while (length > index) {
                    // 14
                    value = O[index++]; // 15
                    // eslint-disable-next-line no-self-compare                                                                      // 16
                    if (value != value) return true; // 17
                    // Array#indexOf ignores holes, Array#includes - not                                                               // 18
                  } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                    // 19
                    if (O[index] === el) return IS_INCLUDES || index || 0; // 20
                  }return !IS_INCLUDES && -1; // 21
                }; // 22
              }; // 23
              // 24
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-length.js": function (_require305, _exports193, _module175) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-length.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.15 ToLength                                                                                                     // 1
              var toInteger = _require305('./_to-integer'); // 2
              var min = Math.min; // 3
              _module175.exports = function (it) {
                // 4
                return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
              }; // 6
              // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-absolute-index.js": function (_require306, _exports194, _module176) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-absolute-index.js                                                          //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var toInteger = _require306('./_to-integer'); // 1
              var max = Math.max; // 2
              var min = Math.min; // 3
              _module176.exports = function (index, length) {
                // 4
                index = toInteger(index); // 5
                return index < 0 ? max(index + length, 0) : min(index, length); // 6
              }; // 7
              // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_shared-key.js": function (_require307, _exports195, _module177) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_shared-key.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var shared = _require307('./_shared')('keys'); // 1
              var uid = _require307('./_uid'); // 2
              _module177.exports = function (key) {
                // 3
                return shared[key] || (shared[key] = uid(key)); // 4
              }; // 5
              // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_shared.js": function (_require308, _exports196, _module178) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_shared.js                                                                     //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var global = _require308('./_global'); // 1
              var SHARED = '__core-js_shared__'; // 2
              var store = global[SHARED] || (global[SHARED] = {}); // 3
              _module178.exports = function (key) {
                // 4
                return store[key] || (store[key] = {}); // 5
              }; // 6
              // 7
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_uid.js": function (_require309, _exports197, _module179) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_uid.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var id = 0; // 1
              var px = Math.random(); // 2
              _module179.exports = function (key) {
                // 3
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36)); // 4
              }; // 5
              // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_enum-bug-keys.js": function (_require310, _exports198, _module180) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // IE 8- don't enum bug keys                                                                                           // 1
              _module180.exports = // 2
              'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf' // 3
              .split(','); // 4
              // 5
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_html.js": function (_require311, _exports199, _module181) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_html.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var document = _require311('./_global').document; // 1
              _module181.exports = document && document.documentElement; // 2
              // 3
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_set-to-string-tag.js": function (_require312, _exports200, _module182) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var def = _require312('./_object-dp').f; // 1
              var has = _require312('./_has'); // 2
              var TAG = _require312('./_wks')('toStringTag'); // 3
              // 4
              _module182.exports = function (it, tag, stat) {
                // 5
                if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag }); // 6
              }; // 7
              // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_wks.js": function (_require313, _exports201, _module183) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_wks.js                                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var store = _require313('./_shared')('wks'); // 1
              var uid = _require313('./_uid'); // 2
              var Symbol = _require313('./_global').Symbol; // 3
              var USE_SYMBOL = typeof Symbol == 'function'; // 4
              // 5
              var $exports = _module183.exports = function (name) {
                // 6
                return store[name] || (store[name] = // 7
                USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name)); // 8
              }; // 9
              // 10
              $exports.store = store; // 11
              // 12
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gpo.js": function (_require314, _exports202, _module184) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gpo.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
              var has = _require314('./_has'); // 2
              var toObject = _require314('./_to-object'); // 3
              var IE_PROTO = _require314('./_shared-key')('IE_PROTO'); // 4
              var ObjectProto = Object.prototype; // 5
              // 6
              _module184.exports = Object.getPrototypeOf || function (O) {
                // 7
                O = toObject(O); // 8
                if (has(O, IE_PROTO)) return O[IE_PROTO]; // 9
                if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                  // 10
                  return O.constructor.prototype; // 11
                }return O instanceof Object ? ObjectProto : null; // 12
              }; // 13
              // 14
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_to-object.js": function (_require315, _exports203, _module185) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_to-object.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.1.13 ToObject(argument)                                                                                           // 1
              var defined = _require315('./_defined'); // 2
              _module185.exports = function (it) {
                // 3
                return Object(defined(it)); // 4
              }; // 5
              // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "web.dom.iterable.js": function (_require316) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/web.dom.iterable.js                                                            //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _require316('./es6.array.iterator'); // 1
              var global = _require316('./_global'); // 2
              var hide = _require316('./_hide'); // 3
              var Iterators = _require316('./_iterators'); // 4
              var TO_STRING_TAG = _require316('./_wks')('toStringTag'); // 5
              // 6
              var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + // 7
              'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + // 8
              'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + // 9
              'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + // 10
              'TextTrackList,TouchList').split(','); // 11
              // 12
              for (var i = 0; i < DOMIterables.length; i++) {
                // 13
                var NAME = DOMIterables[i]; // 14
                var Collection = global[NAME]; // 15
                var proto = Collection && Collection.prototype; // 16
                if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME); // 17
                Iterators[NAME] = Iterators.Array; // 18
              } // 19
              // 20
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.array.iterator.js": function (_require317, _exports204, _module186) {
              // 1
              var addToUnscopables = _require317('./_add-to-unscopables'); // 2
              var step = _require317('./_iter-step'); // 3
              var Iterators = _require317('./_iterators'); // 4
              var toIObject = _require317('./_to-iobject'); // 5
              // 6
              // 22.1.3.4 Array.prototype.entries()                                                                                  // 7
              // 22.1.3.13 Array.prototype.keys()                                                                                    // 8
              // 22.1.3.29 Array.prototype.values()                                                                                  // 9
              // 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
              _module186.exports = _require317('./_iter-define')(Array, 'Array', function (iterated, kind) {
                // 11
                this._t = toIObject(iterated); // target                                                                             // 12
                this._i = 0; // next index                                                                         // 13
                this._k = kind; // kind                                                                               // 14
                // 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
              }, function () {
                // 16
                var O = this._t; // 17
                var kind = this._k; // 18
                var index = this._i++; // 19
                if (!O || index >= O.length) {
                  // 20
                  this._t = undefined; // 21
                  return step(1); // 22
                } // 23
                if (kind == 'keys') return step(0, index); // 24
                if (kind == 'values') return step(0, O[index]); // 25
                return step(0, [index, O[index]]); // 26
              }, 'values'); // 27
              // 28
              // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
              Iterators.Arguments = Iterators.Array; // 30
              // 31
              addToUnscopables('keys'); // 32
              addToUnscopables('values'); // 33
              addToUnscopables('entries'); // 34
              // 35
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_add-to-unscopables.js": function (_require318, _exports205, _module187) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module187.exports = function () {/* empty */}; // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-step.js": function (_require319, _exports206, _module188) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-step.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module188.exports = function (done, value) {
                // 1
                return { value: value, done: !!done }; // 2
              }; // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_wks-ext.js": function (_require320, _exports207) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_wks-ext.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports207.f = _require320('./_wks'); // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.symbol.js": function (_require321) {
              // 1
              // ECMAScript 6 symbols shim                                                                                           // 2
              var global = _require321('./_global'); // 3
              var has = _require321('./_has'); // 4
              var DESCRIPTORS = _require321('./_descriptors'); // 5
              var $export = _require321('./_export'); // 6
              var redefine = _require321('./_redefine'); // 7
              var META = _require321('./_meta').KEY; // 8
              var $fails = _require321('./_fails'); // 9
              var shared = _require321('./_shared'); // 10
              var setToStringTag = _require321('./_set-to-string-tag'); // 11
              var uid = _require321('./_uid'); // 12
              var wks = _require321('./_wks'); // 13
              var wksExt = _require321('./_wks-ext'); // 14
              var wksDefine = _require321('./_wks-define'); // 15
              var enumKeys = _require321('./_enum-keys'); // 16
              var isArray = _require321('./_is-array'); // 17
              var anObject = _require321('./_an-object'); // 18
              var toIObject = _require321('./_to-iobject'); // 19
              var toPrimitive = _require321('./_to-primitive'); // 20
              var createDesc = _require321('./_property-desc'); // 21
              var _create = _require321('./_object-create'); // 22
              var gOPNExt = _require321('./_object-gopn-ext'); // 23
              var $GOPD = _require321('./_object-gopd'); // 24
              var $DP = _require321('./_object-dp'); // 25
              var $keys = _require321('./_object-keys'); // 26
              var gOPD = $GOPD.f; // 27
              var dP = $DP.f; // 28
              var gOPN = gOPNExt.f; // 29
              var $Symbol = global.Symbol; // 30
              var $JSON = global.JSON; // 31
              var _stringify = $JSON && $JSON.stringify; // 32
              var PROTOTYPE = 'prototype'; // 33
              var HIDDEN = wks('_hidden'); // 34
              var TO_PRIMITIVE = wks('toPrimitive'); // 35
              var isEnum = {}.propertyIsEnumerable; // 36
              var SymbolRegistry = shared('symbol-registry'); // 37
              var AllSymbols = shared('symbols'); // 38
              var OPSymbols = shared('op-symbols'); // 39
              var ObjectProto = Object[PROTOTYPE]; // 40
              var USE_NATIVE = typeof $Symbol == 'function'; // 41
              var QObject = global.QObject; // 42
              // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 43
              var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // 44
              // 45
              // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 46
              var setSymbolDesc = DESCRIPTORS && $fails(function () {
                // 47
                return _create(dP({}, 'a', { // 48
                  get: function () {
                    return dP(this, 'a', { value: 7 }).a;
                  } // 49
                })).a != 7; // 50
              }) ? function (it, key, D) {
                // 51
                var protoDesc = gOPD(ObjectProto, key); // 52
                if (protoDesc) delete ObjectProto[key]; // 53
                dP(it, key, D); // 54
                if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc); // 55
              } : dP; // 56
              // 57
              var wrap = function (tag) {
                // 58
                var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]); // 59
                sym._k = tag; // 60
                return sym; // 61
              }; // 62
              // 63
              var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
                // 64
                return typeof it == 'symbol'; // 65
              } : function (it) {
                // 66
                return it instanceof $Symbol; // 67
              }; // 68
              // 69
              var $defineProperty = function defineProperty(it, key, D) {
                // 70
                if (it === ObjectProto) $defineProperty(OPSymbols, key, D); // 71
                anObject(it); // 72
                key = toPrimitive(key, true); // 73
                anObject(D); // 74
                if (has(AllSymbols, key)) {
                  // 75
                  if (!D.enumerable) {
                    // 76
                    if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {})); // 77
                    it[HIDDEN][key] = true; // 78
                  } else {
                    // 79
                    if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false; // 80
                    D = _create(D, { enumerable: createDesc(0, false) }); // 81
                  }return setSymbolDesc(it, key, D); // 82
                }return dP(it, key, D); // 83
              }; // 84
              var $defineProperties = function defineProperties(it, P) {
                // 85
                anObject(it); // 86
                var keys = enumKeys(P = toIObject(P)); // 87
                var i = 0; // 88
                var l = keys.length; // 89
                var key; // 90
                while (l > i) $defineProperty(it, key = keys[i++], P[key]); // 91
                return it; // 92
              }; // 93
              var $create = function create(it, P) {
                // 94
                return P === undefined ? _create(it) : $defineProperties(_create(it), P); // 95
              }; // 96
              var $propertyIsEnumerable = function propertyIsEnumerable(key) {
                // 97
                var E = isEnum.call(this, key = toPrimitive(key, true)); // 98
                if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false; // 99
                return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true; // 100
              }; // 101
              var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
                // 102
                it = toIObject(it); // 103
                key = toPrimitive(key, true); // 104
                if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return; // 105
                var D = gOPD(it, key); // 106
                if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true; // 107
                return D; // 108
              }; // 109
              var $getOwnPropertyNames = function getOwnPropertyNames(it) {
                // 110
                var names = gOPN(toIObject(it)); // 111
                var result = []; // 112
                var i = 0; // 113
                var key; // 114
                while (names.length > i) {
                  // 115
                  if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key); // 116
                }return result; // 117
              }; // 118
              var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
                // 119
                var IS_OP = it === ObjectProto; // 120
                var names = gOPN(IS_OP ? OPSymbols : toIObject(it)); // 121
                var result = []; // 122
                var i = 0; // 123
                var key; // 124
                while (names.length > i) {
                  // 125
                  if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]); // 126
                }return result; // 127
              }; // 128
              // 129
              // 19.4.1.1 Symbol([description])                                                                                      // 130
              if (!USE_NATIVE) {
                // 131
                $Symbol = function Symbol() {
                  // 132
                  if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!'); // 133
                  var tag = uid(arguments.length > 0 ? arguments[0] : undefined); // 134
                  var $set = function (value) {
                    // 135
                    if (this === ObjectProto) $set.call(OPSymbols, value); // 136
                    if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false; // 137
                    setSymbolDesc(this, tag, createDesc(1, value)); // 138
                  }; // 139
                  if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set }); // 140
                  return wrap(tag); // 141
                }; // 142
                redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                  // 143
                  return this._k; // 144
                }); // 145
                // 146
                $GOPD.f = $getOwnPropertyDescriptor; // 147
                $DP.f = $defineProperty; // 148
                _require321('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames; // 149
                _require321('./_object-pie').f = $propertyIsEnumerable; // 150
                _require321('./_object-gops').f = $getOwnPropertySymbols; // 151
                // 152
                if (DESCRIPTORS && !_require321('./_library')) {
                  // 153
                  redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true); // 154
                } // 155
                // 156
                wksExt.f = function (name) {
                  // 157
                  return wrap(wks(name)); // 158
                }; // 159
              } // 160
              // 161
              $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol }); // 162
              // 163
              for (var es6Symbols = // 164
              // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
              'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables' // 166
              .split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]); // 167
              // 168
              for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]); // 169
              // 170
              $export($export.S + $export.F * !USE_NATIVE, 'Symbol', { // 171
                // 19.4.2.1 Symbol.for(key)                                                                                          // 172
                'for': function (key) {
                  // 173
                  return has(SymbolRegistry, key += '') // 174
                  ? SymbolRegistry[key] // 175
                  : SymbolRegistry[key] = $Symbol(key); // 176
                }, // 177
                // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 178
                keyFor: function keyFor(sym) {
                  // 179
                  if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!'); // 180
                  for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key; // 181
                }, // 182
                useSetter: function () {
                  setter = true;
                }, // 183
                useSimple: function () {
                  setter = false;
                } // 184
              }); // 185
              // 186
              $export($export.S + $export.F * !USE_NATIVE, 'Object', { // 187
                // 19.1.2.2 Object.create(O [, Properties])                                                                          // 188
                create: $create, // 189
                // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 190
                defineProperty: $defineProperty, // 191
                // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 192
                defineProperties: $defineProperties, // 193
                // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 194
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor, // 195
                // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 196
                getOwnPropertyNames: $getOwnPropertyNames, // 197
                // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 198
                getOwnPropertySymbols: $getOwnPropertySymbols // 199
              }); // 200
              // 201
              // 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 202
              $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
                // 203
                var S = $Symbol(); // 204
                // MS Edge converts symbol values to JSON as {}                                                                      // 205
                // WebKit converts symbol values to JSON as null                                                                     // 206
                // V8 throws on boxed symbols                                                                                        // 207
                return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}'; // 208
              })), 'JSON', { // 209
                stringify: function stringify(it) {
                  // 210
                  if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined                                   // 211
                  var args = [it]; // 212
                  var i = 1; // 213
                  var replacer, $replacer; // 214
                  while (arguments.length > i) args.push(arguments[i++]); // 215
                  replacer = args[1]; // 216
                  if (typeof replacer == 'function') $replacer = replacer; // 217
                  if ($replacer || !isArray(replacer)) replacer = function (key, value) {
                    // 218
                    if ($replacer) value = $replacer.call(this, key, value); // 219
                    if (!isSymbol(value)) return value; // 220
                  }; // 221
                  args[1] = replacer; // 222
                  return _stringify.apply($JSON, args); // 223
                } // 224
              }); // 225
              // 226
              // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 227
              $Symbol[PROTOTYPE][TO_PRIMITIVE] || _require321('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 228
              // 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 229
              setToStringTag($Symbol, 'Symbol'); // 230
              // 20.2.1.9 Math[@@toStringTag]                                                                                        // 231
              setToStringTag(Math, 'Math', true); // 232
              // 24.3.3 JSON[@@toStringTag]                                                                                          // 233
              setToStringTag(global.JSON, 'JSON', true); // 234
              // 235
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_meta.js": function (_require322, _exports208, _module189) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_meta.js                                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var META = _require322('./_uid')('meta'); // 1
              var isObject = _require322('./_is-object'); // 2
              var has = _require322('./_has'); // 3
              var setDesc = _require322('./_object-dp').f; // 4
              var id = 0; // 5
              var isExtensible = Object.isExtensible || function () {
                // 6
                return true; // 7
              }; // 8
              var FREEZE = !_require322('./_fails')(function () {
                // 9
                return isExtensible(Object.preventExtensions({})); // 10
              }); // 11
              var setMeta = function (it) {
                // 12
                setDesc(it, META, { value: { // 13
                    i: 'O' + ++id, // object ID                                                                                        // 14
                    w: {} // weak collections IDs                                                                             // 15
                  } }); // 16
              }; // 17
              var fastKey = function (it, create) {
                // 18
                // return primitive with prefix                                                                                      // 19
                if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it; // 20
                if (!has(it, META)) {
                  // 21
                  // can't set metadata to uncaught frozen object                                                                    // 22
                  if (!isExtensible(it)) return 'F'; // 23
                  // not necessary to add metadata                                                                                   // 24
                  if (!create) return 'E'; // 25
                  // add missing metadata                                                                                            // 26
                  setMeta(it); // 27
                  // return object ID                                                                                                  // 28
                }return it[META].i; // 29
              }; // 30
              var getWeak = function (it, create) {
                // 31
                if (!has(it, META)) {
                  // 32
                  // can't set metadata to uncaught frozen object                                                                    // 33
                  if (!isExtensible(it)) return true; // 34
                  // not necessary to add metadata                                                                                   // 35
                  if (!create) return false; // 36
                  // add missing metadata                                                                                            // 37
                  setMeta(it); // 38
                  // return hash weak collections IDs                                                                                  // 39
                }return it[META].w; // 40
              }; // 41
              // add metadata on freeze-family methods calling                                                                       // 42
              var onFreeze = function (it) {
                // 43
                if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it); // 44
                return it; // 45
              }; // 46
              var meta = _module189.exports = { // 47
                KEY: META, // 48
                NEED: false, // 49
                fastKey: fastKey, // 50
                getWeak: getWeak, // 51
                onFreeze: onFreeze // 52
              }; // 53
              // 54
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_wks-define.js": function (_require323, _exports209, _module190) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_wks-define.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var global = _require323('./_global'); // 1
              var core = _require323('./_core'); // 2
              var LIBRARY = _require323('./_library'); // 3
              var wksExt = _require323('./_wks-ext'); // 4
              var defineProperty = _require323('./_object-dp').f; // 5
              _module190.exports = function (name) {
                // 6
                var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {}); // 7
                if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) }); // 8
              }; // 9
              // 10
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_enum-keys.js": function (_require324, _exports210, _module191) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_enum-keys.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // all enumerable object keys, includes symbols                                                                        // 1
              var getKeys = _require324('./_object-keys'); // 2
              var gOPS = _require324('./_object-gops'); // 3
              var pIE = _require324('./_object-pie'); // 4
              _module191.exports = function (it) {
                // 5
                var result = getKeys(it); // 6
                var getSymbols = gOPS.f; // 7
                if (getSymbols) {
                  // 8
                  var symbols = getSymbols(it); // 9
                  var isEnum = pIE.f; // 10
                  var i = 0; // 11
                  var key; // 12
                  while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key); // 13
                }return result; // 14
              }; // 15
              // 16
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gops.js": function (_require325, _exports211) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gops.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports211.f = Object.getOwnPropertySymbols; // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-pie.js": function (_require326, _exports212) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-pie.js                                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _exports212.f = {}.propertyIsEnumerable; // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_is-array.js": function (_require327, _exports213, _module192) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_is-array.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 7.2.2 IsArray(argument)                                                                                             // 1
              var cof = _require327('./_cof'); // 2
              _module192.exports = Array.isArray || function isArray(arg) {
                // 3
                return cof(arg) == 'Array'; // 4
              }; // 5
              // 6
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gopn-ext.js": function (_require328, _exports214, _module193) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
              var toIObject = _require328('./_to-iobject'); // 2
              var gOPN = _require328('./_object-gopn').f; // 3
              var toString = {}.toString; // 4
              // 5
              var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames // 6
              ? Object.getOwnPropertyNames(window) : []; // 7
              // 8
              var getWindowNames = function (it) {
                // 9
                try {
                  // 10
                  return gOPN(it); // 11
                } catch (e) {
                  // 12
                  return windowNames.slice(); // 13
                } // 14
              }; // 15
              // 16
              _module193.exports.f = function getOwnPropertyNames(it) {
                // 17
                return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it)); // 18
              }; // 19
              // 20
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gopn.js": function (_require329, _exports215) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gopn.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
              var $keys = _require329('./_object-keys-internal'); // 2
              var hiddenKeys = _require329('./_enum-bug-keys').concat('length', 'prototype'); // 3
              // 4
              _exports215.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                // 5
                return $keys(O, hiddenKeys); // 6
              }; // 7
              // 8
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_object-gopd.js": function (_require330, _exports216) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_object-gopd.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var pIE = _require330('./_object-pie'); // 1
              var createDesc = _require330('./_property-desc'); // 2
              var toIObject = _require330('./_to-iobject'); // 3
              var toPrimitive = _require330('./_to-primitive'); // 4
              var has = _require330('./_has'); // 5
              var IE8_DOM_DEFINE = _require330('./_ie8-dom-define'); // 6
              var gOPD = Object.getOwnPropertyDescriptor; // 7
              // 8
              _exports216.f = _require330('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
                // 9
                O = toIObject(O); // 10
                P = toPrimitive(P, true); // 11
                if (IE8_DOM_DEFINE) try {
                  // 12
                  return gOPD(O, P); // 13
                } catch (e) {} /* empty */ // 14
                if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]); // 15
              }; // 16
              // 17
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.object.to-string.js": function () {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.object.to-string.js                                                        //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 1
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            }, "es7.symbol.async-iterator.js": function (_require331) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _require331('./_wks-define')('asyncIterator'); // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es7.symbol.observable.js": function (_require332) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _require332('./_wks-define')('observable'); // 1
              // 2
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.object.set-prototype-of.js": function (_require333) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
              var $export = _require333('./_export'); // 2
              $export($export.S, 'Object', { setPrototypeOf: _require333('./_set-proto').set }); // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_set-proto.js": function (_require334, _exports217, _module194) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_set-proto.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
              /* eslint-disable no-proto */ // 2
              var isObject = _require334('./_is-object'); // 3
              var anObject = _require334('./_an-object'); // 4
              var check = function (O, proto) {
                // 5
                anObject(O); // 6
                if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!"); // 7
              }; // 8
              _module194.exports = { // 9
                set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
                function (test, buggy, set) {
                  // 11
                  try {
                    // 12
                    set = _require334('./_ctx')(Function.call, _require334('./_object-gopd').f(Object.prototype, '__proto__').set, 2); // 13
                    set(test, []); // 14
                    buggy = !(test instanceof Array); // 15
                  } catch (e) {
                    buggy = true;
                  } // 16
                  return function setPrototypeOf(O, proto) {
                    // 17
                    check(O, proto); // 18
                    if (buggy) O.__proto__ = proto; // 19
                    else set(O, proto); // 20
                    return O; // 21
                  }; // 22
                }({}, false) : undefined), // 23
                check: check // 24
              }; // 25
              // 26
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.object.create.js": function (_require335) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/es6.object.create.js                                                           //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var $export = _require335('./_export'); // 1
              // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
              $export($export.S, 'Object', { create: _require335('./_object-create') }); // 3
              // 4
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "es6.array.from.js": function (_require336) {
              // 1
              var ctx = _require336('./_ctx'); // 2
              var $export = _require336('./_export'); // 3
              var toObject = _require336('./_to-object'); // 4
              var call = _require336('./_iter-call'); // 5
              var isArrayIter = _require336('./_is-array-iter'); // 6
              var toLength = _require336('./_to-length'); // 7
              var createProperty = _require336('./_create-property'); // 8
              var getIterFn = _require336('./core.get-iterator-method'); // 9
              // 10
              $export($export.S + $export.F * !_require336('./_iter-detect')(function (iter) {
                Array.from(iter);
              }), 'Array', { // 11
                // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                            // 12
                from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
                  // 13
                  var O = toObject(arrayLike); // 14
                  var C = typeof this == 'function' ? this : Array; // 15
                  var aLen = arguments.length; // 16
                  var mapfn = aLen > 1 ? arguments[1] : undefined; // 17
                  var mapping = mapfn !== undefined; // 18
                  var index = 0; // 19
                  var iterFn = getIterFn(O); // 20
                  var length, result, step, iterator; // 21
                  if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // 22
                  // if object isn't iterable or it's array with default iterator - use simple case                                  // 23
                  if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                    // 24
                    for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                      // 25
                      createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value); // 26
                    } // 27
                  } else {
                    // 28
                    length = toLength(O.length); // 29
                    for (result = new C(length); length > index; index++) {
                      // 30
                      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]); // 31
                    } // 32
                  } // 33
                  result.length = index; // 34
                  return result; // 35
                } // 36
              }); // 37
              // 38
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-call.js": function (_require337, _exports218, _module195) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-call.js                                                                  //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // call something on iterator step with safe closing on error                                                          // 1
              var anObject = _require337('./_an-object'); // 2
              _module195.exports = function (iterator, fn, value, entries) {
                // 3
                try {
                  // 4
                  return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 5
                  // 7.4.6 IteratorClose(iterator, completion)                                                                         // 6
                } catch (e) {
                  // 7
                  var ret = iterator['return']; // 8
                  if (ret !== undefined) anObject(ret.call(iterator)); // 9
                  throw e; // 10
                } // 11
              }; // 12
              // 13
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_is-array-iter.js": function (_require338, _exports219, _module196) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_is-array-iter.js                                                              //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // check on default Array iterator                                                                                     // 1
              var Iterators = _require338('./_iterators'); // 2
              var ITERATOR = _require338('./_wks')('iterator'); // 3
              var ArrayProto = Array.prototype; // 4
              // 5
              _module196.exports = function (it) {
                // 6
                return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it); // 7
              }; // 8
              // 9
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_create-property.js": function (_require339, _exports220, _module197) {
              // 1
              var $defineProperty = _require339('./_object-dp'); // 2
              var createDesc = _require339('./_property-desc'); // 3
              // 4
              _module197.exports = function (object, index, value) {
                // 5
                if (index in object) $defineProperty.f(object, index, createDesc(0, value)); // 6
                else object[index] = value; // 7
              }; // 8
              // 9
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "core.get-iterator-method.js": function (_require340, _exports221, _module198) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/core.get-iterator-method.js                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var classof = _require340('./_classof'); // 1
              var ITERATOR = _require340('./_wks')('iterator'); // 2
              var Iterators = _require340('./_iterators'); // 3
              _module198.exports = _require340('./_core').getIteratorMethod = function (it) {
                // 4
                if (it != undefined) return it[ITERATOR] // 5
                || it['@@iterator'] // 6
                || Iterators[classof(it)]; // 7
              }; // 8
              // 9
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_classof.js": function (_require341, _exports222, _module199) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_classof.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1
              var cof = _require341('./_cof'); // 2
              var TAG = _require341('./_wks')('toStringTag'); // 3
              // ES3 wrong here                                                                                                      // 4
              var ARG = cof(function () {
                return arguments;
              }()) == 'Arguments'; // 5
              // 6
              // fallback for IE11 Script Access Denied error                                                                        // 7
              var tryGet = function (it, key) {
                // 8
                try {
                  // 9
                  return it[key]; // 10
                } catch (e) {} /* empty */ // 11
              }; // 12
              // 13
              _module199.exports = function (it) {
                // 14
                var O, T, B; // 15
                return it === undefined ? 'Undefined' : it === null ? 'Null' // 16
                // @@toStringTag case                                                                                              // 17
                : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // 18
                // builtinTag case                                                                                                 // 19
                : ARG ? cof(O) // 20
                // ES3 arguments fallback                                                                                          // 21
                : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B; // 22
              }; // 23
              // 24
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "_iter-detect.js": function (_require342, _exports223, _module200) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // node_modules/core-js/library/modules/_iter-detect.js                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var ITERATOR = _require342('./_wks')('iterator'); // 1
              var SAFE_CLOSING = false; // 2
              // 3
              try {
                // 4
                var riter = [7][ITERATOR](); // 5
                riter['return'] = function () {
                  SAFE_CLOSING = true;
                }; // 6
                // eslint-disable-next-line no-throw-literal                                                                         // 7
                Array.from(riter, function () {
                  throw 2;
                }); // 8
              } catch (e) {} /* empty */ // 9
              // 10
              _module200.exports = function (exec, skipClosing) {
                // 11
                if (!skipClosing && !SAFE_CLOSING) return false; // 12
                var safe = false; // 13
                try {
                  // 14
                  var arr = [7]; // 15
                  var iter = arr[ITERATOR](); // 16
                  iter.next = function () {
                    return { done: safe = true };
                  }; // 17
                  arr[ITERATOR] = function () {
                    return iter;
                  }; // 18
                  exec(arr); // 19
                } catch (e) {} /* empty */ // 20
                return safe; // 21
              }; // 22
              // 23
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/modules/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.modules = _exports2, {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['ecmascript-runtime'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var Promise;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "promise": { "client.js": function (_require, _exports) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/promise/client.js                                                                                       //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("meteor-promise").makeCompatible( // 1
            _exports.Promise = _require("./common.js").Promise // 2
            ); // 3
            // 4
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require2, _exports2) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/promise/common.js                                                                                       //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var global = this; // 1
            // 2
            if (typeof global.Promise === "function") {
              // 3
              _exports2.Promise = global.Promise; // 4
            } else {
              // 5
              _exports2.Promise = _require2("promise/lib/es6-extensions"); // 6
            } // 7
            // 8
            _exports2.Promise.prototype.done = function (onFulfilled, onRejected) {
              // 9
              var self = this; // 10
              // 11
              if (arguments.length > 0) {
                // 12
                self = this.then.apply(this, arguments); // 13
              } // 14
              // 15
              self.then(null, function (err) {
                // 16
                Meteor._setImmediate(function () {
                  // 17
                  throw err; // 18
                }); // 19
              }); // 20
            }; // 21
            // 22
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-promise": { "package.json": function (_require4, _exports4) {

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                  //
                // ../../.0.9.0.1911j66++os+web.browser+web.cordova/npm/node_modules/meteor-promise/package.json                    //
                //                                                                                                                  //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _exports4.name = "meteor-promise"; // 1
                _exports4.version = "0.8.5"; // 2
                _exports4.browser = "promise_client.js"; // 3
                _exports4.main = "promise_server.js"; // 4
                // 5
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              }, "promise_client.js": function (_require5, _exports5) {

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                                                  //
                // node_modules/meteor/promise/node_modules/meteor-promise/promise_client.js                                        //
                //                                                                                                                  //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //
                _exports5.makeCompatible = function (Promise) {
                  // 1
                  var es6PromiseThen = Promise.prototype.then; // 2
                  // 3
                  Promise.prototype.then = function (onResolved, onRejected) {
                    // 4
                    if (typeof Meteor === "object" && // 5
                    typeof Meteor.bindEnvironment === "function") {
                      // 6
                      return es6PromiseThen.call( // 7
                      this, // 8
                      onResolved && Meteor.bindEnvironment(onResolved, raise), // 9
                      onRejected && Meteor.bindEnvironment(onRejected, raise) // 10
                      ); // 11
                    } // 12
                    // 13
                    return es6PromiseThen.call(this, onResolved, onRejected); // 14
                  }; // 15
                }; // 16
                // 17
                function raise(exception) {
                  // 18
                  throw exception; // 19
                } // 20
                // 21
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } }, "promise": { "lib": { "es6-extensions.js": function (_require6, _exports6, _module) {
                  // 1
                  // 2
                  //This file contains the ES6 extensions to the core Promises/A+ API                                                 // 3
                  // 4
                  var Promise = _require6('./core.js'); // 5
                  // 6
                  _module.exports = Promise; // 7
                  // 8
                  /* Static Functions */ // 9
                  // 10
                  var TRUE = valuePromise(true); // 11
                  var FALSE = valuePromise(false); // 12
                  var NULL = valuePromise(null); // 13
                  var UNDEFINED = valuePromise(undefined); // 14
                  var ZERO = valuePromise(0); // 15
                  var EMPTYSTRING = valuePromise(''); // 16
                  // 17
                  function valuePromise(value) {
                    // 18
                    var p = new Promise(Promise._44); // 19
                    p._83 = 1; // 20
                    p._18 = value; // 21
                    return p; // 22
                  } // 23
                  Promise.resolve = function (value) {
                    // 24
                    if (value instanceof Promise) return value; // 25
                    // 26
                    if (value === null) return NULL; // 27
                    if (value === undefined) return UNDEFINED; // 28
                    if (value === true) return TRUE; // 29
                    if (value === false) return FALSE; // 30
                    if (value === 0) return ZERO; // 31
                    if (value === '') return EMPTYSTRING; // 32
                    // 33
                    if (typeof value === 'object' || typeof value === 'function') {
                      // 34
                      try {
                        // 35
                        var then = value.then; // 36
                        if (typeof then === 'function') {
                          // 37
                          return new Promise(then.bind(value)); // 38
                        } // 39
                      } catch (ex) {
                        // 40
                        return new Promise(function (resolve, reject) {
                          // 41
                          reject(ex); // 42
                        }); // 43
                      } // 44
                    } // 45
                    return valuePromise(value); // 46
                  }; // 47
                  // 48
                  Promise.all = function (arr) {
                    // 49
                    var args = Array.prototype.slice.call(arr); // 50
                    // 51
                    return new Promise(function (resolve, reject) {
                      // 52
                      if (args.length === 0) return resolve([]); // 53
                      var remaining = args.length; // 54
                      function res(i, val) {
                        // 55
                        if (val && (typeof val === 'object' || typeof val === 'function')) {
                          // 56
                          if (val instanceof Promise && val.then === Promise.prototype.then) {
                            // 57
                            while (val._83 === 3) {
                              // 58
                              val = val._18; // 59
                            } // 60
                            if (val._83 === 1) return res(i, val._18); // 61
                            if (val._83 === 2) reject(val._18); // 62
                            val.then(function (val) {
                              // 63
                              res(i, val); // 64
                            }, reject); // 65
                            return; // 66
                          } else {
                            // 67
                            var then = val.then; // 68
                            if (typeof then === 'function') {
                              // 69
                              var p = new Promise(then.bind(val)); // 70
                              p.then(function (val) {
                                // 71
                                res(i, val); // 72
                              }, reject); // 73
                              return; // 74
                            } // 75
                          } // 76
                        } // 77
                        args[i] = val; // 78
                        if (--remaining === 0) {
                          // 79
                          resolve(args); // 80
                        } // 81
                      } // 82
                      for (var i = 0; i < args.length; i++) {
                        // 83
                        res(i, args[i]); // 84
                      } // 85
                    }); // 86
                  }; // 87
                  // 88
                  Promise.reject = function (value) {
                    // 89
                    return new Promise(function (resolve, reject) {
                      // 90
                      reject(value); // 91
                    }); // 92
                  }; // 93
                  // 94
                  Promise.race = function (values) {
                    // 95
                    return new Promise(function (resolve, reject) {
                      // 96
                      values.forEach(function (value) {
                        // 97
                        Promise.resolve(value).then(resolve, reject); // 98
                      }); // 99
                    }); // 100
                  }; // 101
                  // 102
                  /* Prototype Methods */ // 103
                  // 104
                  Promise.prototype['catch'] = function (onRejected) {
                    // 105
                    return this.then(null, onRejected); // 106
                  }; // 107
                  // 108
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "core.js": function (_require7, _exports7, _module2) {
                  // 1
                  // 2
                  var asap = _require7('asap/raw'); // 3
                  // 4
                  function noop() {} // 5
                  // 6
                  // States:                                                                                                          // 7
                  //                                                                                                                  // 8
                  // 0 - pending                                                                                                      // 9
                  // 1 - fulfilled with _value                                                                                        // 10
                  // 2 - rejected with _value                                                                                         // 11
                  // 3 - adopted the state of another promise, _value                                                                 // 12
                  //                                                                                                                  // 13
                  // once the state is no longer pending (0) it is immutable                                                          // 14
                  // 15
                  // All `_` prefixed properties will be reduced to `_{random number}`                                                // 16
                  // at build time to obfuscate them and discourage their use.                                                        // 17
                  // We don't use symbols or Object.defineProperty to fully hide them                                                 // 18
                  // because the performance isn't good enough.                                                                       // 19
                  // 20
                  // 21
                  // to avoid using try/catch inside critical functions, we                                                           // 22
                  // extract them to here.                                                                                            // 23
                  var LAST_ERROR = null; // 24
                  var IS_ERROR = {}; // 25
                  function getThen(obj) {
                    // 26
                    try {
                      // 27
                      return obj.then; // 28
                    } catch (ex) {
                      // 29
                      LAST_ERROR = ex; // 30
                      return IS_ERROR; // 31
                    } // 32
                  } // 33
                  // 34
                  function tryCallOne(fn, a) {
                    // 35
                    try {
                      // 36
                      return fn(a); // 37
                    } catch (ex) {
                      // 38
                      LAST_ERROR = ex; // 39
                      return IS_ERROR; // 40
                    } // 41
                  } // 42
                  function tryCallTwo(fn, a, b) {
                    // 43
                    try {
                      // 44
                      fn(a, b); // 45
                    } catch (ex) {
                      // 46
                      LAST_ERROR = ex; // 47
                      return IS_ERROR; // 48
                    } // 49
                  } // 50
                  // 51
                  _module2.exports = Promise; // 52
                  // 53
                  function Promise(fn) {
                    // 54
                    if (typeof this !== 'object') {
                      // 55
                      throw new TypeError('Promises must be constructed via new'); // 56
                    } // 57
                    if (typeof fn !== 'function') {
                      // 58
                      throw new TypeError('Promise constructor\'s argument is not a function'); // 59
                    } // 60
                    this._75 = 0; // 61
                    this._83 = 0; // 62
                    this._18 = null; // 63
                    this._38 = null; // 64
                    if (fn === noop) return; // 65
                    doResolve(fn, this); // 66
                  } // 67
                  Promise._47 = null; // 68
                  Promise._71 = null; // 69
                  Promise._44 = noop; // 70
                  // 71
                  Promise.prototype.then = function (onFulfilled, onRejected) {
                    // 72
                    if (this.constructor !== Promise) {
                      // 73
                      return safeThen(this, onFulfilled, onRejected); // 74
                    } // 75
                    var res = new Promise(noop); // 76
                    handle(this, new Handler(onFulfilled, onRejected, res)); // 77
                    return res; // 78
                  }; // 79
                  // 80
                  function safeThen(self, onFulfilled, onRejected) {
                    // 81
                    return new self.constructor(function (resolve, reject) {
                      // 82
                      var res = new Promise(noop); // 83
                      res.then(resolve, reject); // 84
                      handle(self, new Handler(onFulfilled, onRejected, res)); // 85
                    }); // 86
                  } // 87
                  function handle(self, deferred) {
                    // 88
                    while (self._83 === 3) {
                      // 89
                      self = self._18; // 90
                    } // 91
                    if (Promise._47) {
                      // 92
                      Promise._47(self); // 93
                    } // 94
                    if (self._83 === 0) {
                      // 95
                      if (self._75 === 0) {
                        // 96
                        self._75 = 1; // 97
                        self._38 = deferred; // 98
                        return; // 99
                      } // 100
                      if (self._75 === 1) {
                        // 101
                        self._75 = 2; // 102
                        self._38 = [self._38, deferred]; // 103
                        return; // 104
                      } // 105
                      self._38.push(deferred); // 106
                      return; // 107
                    } // 108
                    handleResolved(self, deferred); // 109
                  } // 110
                  // 111
                  function handleResolved(self, deferred) {
                    // 112
                    asap(function () {
                      // 113
                      var cb = self._83 === 1 ? deferred.onFulfilled : deferred.onRejected; // 114
                      if (cb === null) {
                        // 115
                        if (self._83 === 1) {
                          // 116
                          resolve(deferred.promise, self._18); // 117
                        } else {
                          // 118
                          reject(deferred.promise, self._18); // 119
                        } // 120
                        return; // 121
                      } // 122
                      var ret = tryCallOne(cb, self._18); // 123
                      if (ret === IS_ERROR) {
                        // 124
                        reject(deferred.promise, LAST_ERROR); // 125
                      } else {
                        // 126
                        resolve(deferred.promise, ret); // 127
                      } // 128
                    }); // 129
                  } // 130
                  function resolve(self, newValue) {
                    // 131
                    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
                    if (newValue === self) {
                      // 133
                      return reject( // 134
                      self, // 135
                      new TypeError('A promise cannot be resolved with itself.') // 136
                      ); // 137
                    } // 138
                    if ( // 139
                    newValue && ( // 140
                    typeof newValue === 'object' || typeof newValue === 'function') // 141
                    ) {
                        // 142
                        var then = getThen(newValue); // 143
                        if (then === IS_ERROR) {
                          // 144
                          return reject(self, LAST_ERROR); // 145
                        } // 146
                        if ( // 147
                        then === self.then && // 148
                        newValue instanceof Promise // 149
                        ) {
                            // 150
                            self._83 = 3; // 151
                            self._18 = newValue; // 152
                            finale(self); // 153
                            return; // 154
                          } else if (typeof then === 'function') {
                          // 155
                          doResolve(then.bind(newValue), self); // 156
                          return; // 157
                        } // 158
                      } // 159
                    self._83 = 1; // 160
                    self._18 = newValue; // 161
                    finale(self); // 162
                  } // 163
                  // 164
                  function reject(self, newValue) {
                    // 165
                    self._83 = 2; // 166
                    self._18 = newValue; // 167
                    if (Promise._71) {
                      // 168
                      Promise._71(self, newValue); // 169
                    } // 170
                    finale(self); // 171
                  } // 172
                  function finale(self) {
                    // 173
                    if (self._75 === 1) {
                      // 174
                      handle(self, self._38); // 175
                      self._38 = null; // 176
                    } // 177
                    if (self._75 === 2) {
                      // 178
                      for (var i = 0; i < self._38.length; i++) {
                        // 179
                        handle(self, self._38[i]); // 180
                      } // 181
                      self._38 = null; // 182
                    } // 183
                  } // 184
                  // 185
                  function Handler(onFulfilled, onRejected, promise) {
                    // 186
                    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null; // 187
                    this.onRejected = typeof onRejected === 'function' ? onRejected : null; // 188
                    this.promise = promise; // 189
                  } // 190
                  // 191
                  /**                                                                                                                 // 192
                   * Take a potentially misbehaving resolver function and make sure                                                   // 193
                   * onFulfilled and onRejected are only called once.                                                                 // 194
                   *                                                                                                                  // 195
                   * Makes no guarantees about asynchrony.                                                                            // 196
                   */ // 197
                  function doResolve(fn, promise) {
                    // 198
                    var done = false; // 199
                    var res = tryCallTwo(fn, function (value) {
                      // 200
                      if (done) return; // 201
                      done = true; // 202
                      resolve(promise, value); // 203
                    }, function (reason) {
                      // 204
                      if (done) return; // 205
                      done = true; // 206
                      reject(promise, reason); // 207
                    }); // 208
                    if (!done && res === IS_ERROR) {
                      // 209
                      done = true; // 210
                      reject(promise, LAST_ERROR); // 211
                    } // 212
                  } // 213
                  // 214
                  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } } }, "asap": { "raw.js": function (_require8, _exports8, _module3) {
                // 1
                // 2
                var domain; // The domain module is executed on demand                                                              // 3
                var hasSetImmediate = typeof setImmediate === "function"; // 4
                // 5
                // Use the fastest means possible to execute a task in its own turn, with                                           // 6
                // priority over other events including network IO events in Node.js.                                               // 7
                //                                                                                                                  // 8
                // An exception thrown by a task will permanently interrupt the processing of                                       // 9
                // subsequent tasks. The higher level `asap` function ensures that if an                                            // 10
                // exception is thrown by a task, that the task queue will continue flushing as                                     // 11
                // soon as possible, but if you use `rawAsap` directly, you are responsible to                                      // 12
                // either ensure that no exceptions are thrown from your task, or to manually                                       // 13
                // call `rawAsap.requestFlush` if an exception is thrown.                                                           // 14
                _module3.exports = rawAsap; // 15
                function rawAsap(task) {
                  // 16
                  if (!queue.length) {
                    // 17
                    requestFlush(); // 18
                    flushing = true; // 19
                  } // 20
                  // Avoids a function call                                                                                       // 21
                  queue[queue.length] = task; // 22
                } // 23
                // 24
                var queue = []; // 25
                // Once a flush has been requested, no further calls to `requestFlush` are                                          // 26
                // necessary until the next `flush` completes.                                                                      // 27
                var flushing = false; // 28
                // The position of the next task to execute in the task queue. This is                                              // 29
                // preserved between calls to `flush` so that it can be resumed if                                                  // 30
                // a task throws an exception.                                                                                      // 31
                var index = 0; // 32
                // If a task schedules additional tasks recursively, the task queue can grow                                        // 33
                // unbounded. To prevent memory excaustion, the task queue will periodically                                        // 34
                // truncate already-completed tasks.                                                                                // 35
                var capacity = 1024; // 36
                // 37
                // The flush function processes all tasks that have been scheduled with                                             // 38
                // `rawAsap` unless and until one of those tasks throws an exception.                                               // 39
                // If a task throws an exception, `flush` ensures that its state will remain                                        // 40
                // consistent and will resume where it left off when called again.                                                  // 41
                // However, `flush` does not make any arrangements to be called again if an                                         // 42
                // exception is thrown.                                                                                             // 43
                function flush() {
                  // 44
                  while (index < queue.length) {
                    // 45
                    var currentIndex = index; // 46
                    // Advance the index before calling the task. This ensures that we will                                     // 47
                    // begin flushing on the next task the task throws an error.                                                // 48
                    index = index + 1; // 49
                    queue[currentIndex].call(); // 50
                    // Prevent leaking memory for long chains of recursive calls to `asap`.                                     // 51
                    // If we call `asap` within tasks scheduled by `asap`, the queue will                                       // 52
                    // grow, but to avoid an O(n) walk for every task we execute, we don't                                      // 53
                    // shift tasks off the queue after they have been executed.                                                 // 54
                    // Instead, we periodically shift 1024 tasks off the queue.                                                 // 55
                    if (index > capacity) {
                      // 56
                      // Manually shift all values starting at the index back to the                                          // 57
                      // beginning of the queue.                                                                              // 58
                      for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                        // 59
                        queue[scan] = queue[scan + index]; // 60
                      } // 61
                      queue.length -= index; // 62
                      index = 0; // 63
                    } // 64
                  } // 65
                  queue.length = 0; // 66
                  index = 0; // 67
                  flushing = false; // 68
                } // 69
                // 70
                rawAsap.requestFlush = requestFlush; // 71
                function requestFlush() {
                  // 72
                  // Ensure flushing is not bound to any domain.                                                                  // 73
                  // It is not sufficient to exit the domain, because domains exist on a stack.                                   // 74
                  // To execute code outside of any domain, the following dance is necessary.                                     // 75
                  var parentDomain = process.domain; // 76
                  if (parentDomain) {
                    // 77
                    if (!domain) {
                      // 78
                      // Lazy execute the domain module.                                                                      // 79
                      // Only employed if the user elects to use domains.                                                     // 80
                      domain = _require8("domain"); // 81
                    } // 82
                    domain.active = process.domain = null; // 83
                  } // 84
                  // 85
                  // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`                                     // 86
                  // cannot handle recursion.                                                                                     // 87
                  // `requestFlush` will only be called recursively from `asap.js`, to resume                                     // 88
                  // flushing after an error is thrown into a domain.                                                             // 89
                  // Conveniently, `setImmediate` was introduced in the same version                                              // 90
                  // `process.nextTick` started throwing recursion errors.                                                        // 91
                  if (flushing && hasSetImmediate) {
                    // 92
                    setImmediate(flush); // 93
                  } else {
                    // 94
                    process.nextTick(flush); // 95
                  } // 96
                  // 97
                  if (parentDomain) {
                    // 98
                    domain.active = process.domain = parentDomain; // 99
                  } // 100
                } // 101
                // 102
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports3 = _require3("./node_modules/meteor/promise/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.promise = _exports3, {
    Promise: Promise
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var meteorBabelHelpers;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "babel-runtime": { "babel-runtime.js": function (_require, _exports) {

            ////////////////////////////////////////////////////////////////////////////////
            //                                                                            //
            // packages/babel-runtime/babel-runtime.js                                    //
            //                                                                            //
            ////////////////////////////////////////////////////////////////////////////////
            //
            _exports.meteorBabelHelpers = _require("meteor-babel-helpers"); // 1
            // 2
            // Returns true if a given absolute identifier will be provided at runtime    // 3
            // by the babel-runtime package.                                              // 4
            _exports.checkHelper = function checkHelper(id) {
              // 5
              // There used to be more complicated logic here, when the babel-runtime     // 6
              // package provided helper implementations of its own, but now this         // 7
              // function exists just for backwards compatibility.                        // 8
              return false; // 9
            }; // 10
            // 11
            try {
              // 12
              var regeneratorRuntime = _require("babel-runtime/regenerator"); // 13
            } catch (e) {
              // 14
              throw new Error([// 15
              "The babel-runtime npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", // 17
              "", // 18
              "  meteor npm install --save babel-runtime", // 19
              "" // 20
              ].join("\n")); // 21
            } // 22
            // 23
            if (regeneratorRuntime && // 24
            typeof Promise === "function" && // 25
            typeof Promise.asyncApply === "function") {
              // 26
              // If Promise.asyncApply is defined, use it to wrap calls to                // 27
              // runtime.async so that the entire async function will run in its own      // 28
              // Fiber, not just the code that comes after the first await.               // 29
              var realAsync = regeneratorRuntime.async; // 30
              regeneratorRuntime.async = function () {
                // 31
                return Promise.asyncApply(realAsync, regeneratorRuntime, arguments); // 32
              }; // 33
            } // 34
            // 35
            ////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-babel-helpers": { "package.json": function (_require3, _exports3) {

                ////////////////////////////////////////////////////////////////////////////////
                //                                                                            //
                // ../../.1.0.1.8hdlq++os+web.browser+web.cordova/npm/node_modules/meteor-bab //
                //                                                                            //
                ////////////////////////////////////////////////////////////////////////////////
                //
                _exports3.name = "meteor-babel-helpers"; // 1
                _exports3.version = "0.0.3"; // 2
                _exports3.main = "index.js"; // 3
                // 4
                ////////////////////////////////////////////////////////////////////////////////
              }, "index.js": function (_require4, _exports4, _module) {

                ////////////////////////////////////////////////////////////////////////////////
                //                                                                            //
                // node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/index. //
                //                                                                            //
                ////////////////////////////////////////////////////////////////////////////////
                //
                function canDefineNonEnumerableProperties() {
                  // 1
                  var testObj = {}; // 2
                  var testPropName = "t"; // 3
                  // 4
                  try {
                    // 5
                    Object.defineProperty(testObj, testPropName, { // 6
                      enumerable: false, // 7
                      value: testObj // 8
                    }); // 9
                    // 10
                    for (var k in testObj) {
                      // 11
                      if (k === testPropName) {
                        // 12
                        return false; // 13
                      } // 14
                    } // 15
                  } catch (e) {
                    // 16
                    return false; // 17
                  } // 18
                  // 19
                  return testObj[testPropName] === testObj; // 20
                } // 21
                // 22
                function sanitizeEasy(value) {
                  // 23
                  return value; // 24
                } // 25
                // 26
                function sanitizeHard(obj) {
                  // 27
                  if (Array.isArray(obj)) {
                    // 28
                    var newObj = {}; // 29
                    var keys = Object.keys(obj); // 30
                    var keyCount = keys.length; // 31
                    for (var i = 0; i < keyCount; ++i) {
                      // 32
                      var key = keys[i]; // 33
                      newObj[key] = obj[key]; // 34
                    } // 35
                    return newObj; // 36
                  } // 37
                  // 38
                  return obj; // 39
                } // 40
                // 41
                meteorBabelHelpers = _module.exports = { // 42
                  // Meteor-specific runtime helper for wrapping the object of for-in         // 43
                  // loops, so that inherited Array methods defined by es5-shim can be        // 44
                  // ignored in browsers where they cannot be defined as non-enumerable.      // 45
                  sanitizeForInObject: canDefineNonEnumerableProperties() // 46
                  ? sanitizeEasy // 47
                  : sanitizeHard, // 48
                  // 49
                  // Exposed so that we can test sanitizeForInObject in environments that     // 50
                  // support defining non-enumerable properties.                              // 51
                  _sanitizeForInObjectHard: sanitizeHard // 52
                }; // 53
                // 54
                ////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/babel-runtime/babel-runtime.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['babel-runtime'] = _exports2, {
    meteorBabelHelpers: meteorBabelHelpers
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Symbol, Map, Set;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ecmascript-runtime-client": { "runtime.js": function (_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////
            //                                                                      //
            // packages/ecmascript-runtime-client/runtime.js                        //
            //                                                                      //
            //////////////////////////////////////////////////////////////////////////
            //
            try {
              // 1
              _require("core-js/modules/es6.symbol"); // 2
              _require("core-js/modules/es6.map"); // 3
              _require("core-js/modules/es6.set"); // 4
              // 5
              var core = function () {
                // 6
                try {
                  // 7
                  return _require("core-js/modules/_core"); // 8
                } catch (e) {
                  // 9
                  // Older versions of core-js had a different file layout.         // 10
                  return _require("core-js/modules/$.core"); // 11
                } // 12
              }(); // 13
              // 14
            } catch (e) {
              // 15
              throw new Error([// 16
              "The core-js npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", // 18
              "", // 19
              "  meteor npm install --save core-js", // 20
              "" // 21
              ].join("\n")); // 22
            } // 23
            // 24
            Symbol = _exports.Symbol = core.Symbol; // 25
            Map = _exports.Map = core.Map; // 26
            Set = _exports.Set = core.Set; // 27
            // 28
            // ECMAScript 2015 polyfills.                                           // 29
            _require("core-js/es6/array"); // 30
            _require("core-js/es6/function"); // 31
            _require("core-js/es6/math"); // 32
            _require("core-js/es6/object"); // 33
            _require("core-js/es6/regexp"); // 34
            _require("core-js/es6/string"); // 35
            _require("core-js/es6/weak-map"); // 36
            _require("core-js/es6/weak-set"); // 37
            // 38
            // ECMAScript 2017 polyfills.                                           // 39
            _require("core-js/es7/array"); // 40
            _require("core-js/es7/object"); // 41
            // 42
            // We want everything from the core-js/es6/number module except         // 43
            // es6.number.constructor.                                              // 44
            _require('core-js/modules/es6.number.epsilon'); // 45
            _require('core-js/modules/es6.number.is-finite'); // 46
            _require('core-js/modules/es6.number.is-integer'); // 47
            _require('core-js/modules/es6.number.is-nan'); // 48
            _require('core-js/modules/es6.number.is-safe-integer'); // 49
            _require('core-js/modules/es6.number.max-safe-integer'); // 50
            _require('core-js/modules/es6.number.min-safe-integer'); // 51
            _require('core-js/modules/es6.number.parse-float'); // 52
            _require('core-js/modules/es6.number.parse-int'); // 53
            // 54
            // Typed Arrays                                                         // 55
            _require('core-js/modules/es6.typed.uint8-array'); // 56
            _require('core-js/modules/es6.typed.uint32-array'); // 57
            // 58
            //////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/ecmascript-runtime-client/runtime.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['ecmascript-runtime-client'] = _exports2, {
    Symbol: Symbol,
    Map: Map,
    Set: Set
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var WebApp;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "webapp": { "webapp_client.js": function (_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/webapp/webapp_client.js                                  //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            _module.export({ // 1
              WebApp: function () {
                // 1
                return WebApp; // 1
              } // 1
            }); // 1
            var WebApp = { // 1
              _isCssLoaded: function () {
                // 2
                if (document.styleSheets.length === 0) {
                  // 3
                  return true; // 4
                } // 5
                //
                return _.find(document.styleSheets, function (sheet) {
                  // 7
                  if (sheet.cssText && !sheet.cssRules) {
                    // 8
                    // IE8                                                       // 8
                    return !sheet.cssText.match(/meteor-css-not-found-error/); // 9
                  } // 10
                  //
                  return !_.find(sheet.cssRules, function (rule) {
                    // 12
                    return rule.selectorText === '.meteor-css-not-found-error'; // 14
                  }); // 14
                }); // 16
              } // 17
            }; // 1
            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/webapp/webapp_client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.webapp = _exports2, {
    WebApp: WebApp
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var Base64;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                      //
    // packages/base64/base64.js                                                            //
    //                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////
    //
    // Base 64 encoding                                                                     // 1
    // 2
    var BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    // 4
    var BASE_64_VALS = {}; // 5
    // 6
    for (var i = 0; i < BASE_64_CHARS.length; i++) {
      // 7
      BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i; // 8
    }; // 9
    // 10
    Base64 = {}; // 11
    // 12
    Base64.encode = function (array) {
      // 13
      // 14
      if (typeof array === "string") {
        // 15
        var str = array; // 16
        array = Base64.newBinary(str.length); // 17
        for (var i = 0; i < str.length; i++) {
          // 18
          var ch = str.charCodeAt(i); // 19
          if (ch > 0xFF) {
            // 20
            throw new Error( // 21
            "Not ascii. Base64.encode can only take ascii strings."); // 22
          } // 23
          array[i] = ch; // 24
        } // 25
      } // 26
      // 27
      var answer = []; // 28
      var a = null; // 29
      var b = null; // 30
      var c = null; // 31
      var d = null; // 32
      for (var i = 0; i < array.length; i++) {
        // 33
        switch (i % 3) {// 34
          case 0:
            // 35
            a = array[i] >> 2 & 0x3F; // 36
            b = (array[i] & 0x03) << 4; // 37
            break; // 38
          case 1:
            // 39
            b = b | array[i] >> 4 & 0xF; // 40
            c = (array[i] & 0xF) << 2; // 41
            break; // 42
          case 2:
            // 43
            c = c | array[i] >> 6 & 0x03; // 44
            d = array[i] & 0x3F; // 45
            answer.push(getChar(a)); // 46
            answer.push(getChar(b)); // 47
            answer.push(getChar(c)); // 48
            answer.push(getChar(d)); // 49
            a = null; // 50
            b = null; // 51
            c = null; // 52
            d = null; // 53
            break; // 54
        } // 55
      } // 56
      if (a != null) {
        // 57
        answer.push(getChar(a)); // 58
        answer.push(getChar(b)); // 59
        if (c == null) // 60
          answer.push('='); // 61
        else // 62
          answer.push(getChar(c)); // 63
        if (d == null) // 64
          answer.push('='); // 65
      } // 66
      return answer.join(""); // 67
    }; // 68
    // 69
    var getChar = function (val) {
      // 70
      return BASE_64_CHARS.charAt(val); // 71
    }; // 72
    // 73
    var getVal = function (ch) {
      // 74
      if (ch === '=') {
        // 75
        return -1; // 76
      } // 77
      return BASE_64_VALS[ch]; // 78
    }; // 79
    // 80
    // XXX This is a weird place for this to live, but it's used both by                    // 81
    // this package and 'ejson', and we can't put it in 'ejson' without                     // 82
    // introducing a circular dependency. It should probably be in its own                  // 83
    // package or as a helper in a package that both 'base64' and 'ejson'                   // 84
    // use.                                                                                 // 85
    Base64.newBinary = function (len) {
      // 86
      if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {
        // 87
        var ret = []; // 88
        for (var i = 0; i < len; i++) {
          // 89
          ret.push(0); // 90
        } // 91
        ret.$Uint8ArrayPolyfill = true; // 92
        return ret; // 93
      } // 94
      return new Uint8Array(new ArrayBuffer(len)); // 95
    }; // 96
    // 97
    Base64.decode = function (str) {
      // 98
      var len = Math.floor(str.length * 3 / 4); // 99
      if (str.charAt(str.length - 1) == '=') {
        // 100
        len--; // 101
        if (str.charAt(str.length - 2) == '=') // 102
          len--; // 103
      } // 104
      var arr = Base64.newBinary(len); // 105
      // 106
      var one = null; // 107
      var two = null; // 108
      var three = null; // 109
      // 110
      var j = 0; // 111
      // 112
      for (var i = 0; i < str.length; i++) {
        // 113
        var c = str.charAt(i); // 114
        var v = getVal(c); // 115
        switch (i % 4) {// 116
          case 0:
            // 117
            if (v < 0) // 118
              throw new Error('invalid base64 string'); // 119
            one = v << 2; // 120
            break; // 121
          case 1:
            // 122
            if (v < 0) // 123
              throw new Error('invalid base64 string'); // 124
            one = one | v >> 4; // 125
            arr[j++] = one; // 126
            two = (v & 0x0F) << 4; // 127
            break; // 128
          case 2:
            // 129
            if (v >= 0) {
              // 130
              two = two | v >> 2; // 131
              arr[j++] = two; // 132
              three = (v & 0x03) << 6; // 133
            } // 134
            break; // 135
          case 3:
            // 136
            if (v >= 0) {
              // 137
              arr[j++] = three | v; // 138
            } // 139
            break; // 140
        } // 141
      } // 142
      return arr; // 143
    }; // 144
    // 145
    //////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.base64 = {}, {
    Base64: Base64
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Base64 = Package.base64.Base64;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var v, EJSON;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ejson": { "ejson.js": function (_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/ejson/ejson.js                                                                                          //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module.export({ // 1
              EJSON: function () {
                // 1
                return EJSON; // 1
              } // 1
            }); // 1
            /**                                                                                                                 // 1
             * @namespace                                                                                                       //
             * @summary Namespace for EJSON functions                                                                           //
             */var EJSON = {}; // Custom type interface definition                                                              //
            /**                                                                                                                 // 8
             * @class CustomType                                                                                                //
             * @instanceName customType                                                                                         //
             * @memberOf EJSON                                                                                                  //
             * @summary The interface that a class must satisfy to be able to become an                                         //
             * EJSON custom type via EJSON.addType.                                                                             //
             */ /**                                                                                                             //
                 * @function typeName                                                                                           //
                 * @memberOf EJSON.CustomType                                                                                   //
                 * @summary Return the tag used to identify this type.  This must match the                                     //
                 *          tag used to register this type with                                                                 //
                 *          [`EJSON.addType`](#ejson_add_type).                                                                 //
                 * @locus Anywhere                                                                                              //
                 * @instance                                                                                                    //
                 */ /**                                                                                                         //
                     * @function toJSONValue                                                                                    //
                     * @memberOf EJSON.CustomType                                                                               //
                     * @summary Serialize this instance into a JSON-compatible value.                                           //
                     * @locus Anywhere                                                                                          //
                     * @instance                                                                                                //
                     */ /**                                                                                                     //
                         * @function clone                                                                                      //
                         * @memberOf EJSON.CustomType                                                                           //
                         * @summary Return a value `r` such that `this.equals(r)` is true, and                                  //
                         *          modifications to `r` do not affect `this` and vice versa.                                   //
                         * @locus Anywhere                                                                                      //
                         * @instance                                                                                            //
                         */ /**                                                                                                 //
                             * @function equals                                                                                 //
                             * @memberOf EJSON.CustomType                                                                       //
                             * @summary Return `true` if `other` has a value equal to `this`; `false`                           //
                             *          otherwise.                                                                              //
                             * @locus Anywhere                                                                                  //
                             * @param {Object} other Another object to compare this to.                                         //
                             * @instance                                                                                        //
                             */ //
            var customTypes = {}; // 53
            //
            var hasOwn = function (obj, prop) {
              // 55
              return {}.hasOwnProperty.call(obj, prop); // 55
            }; // 55
            //
            var isArguments = function (obj) {
              // 57
              return obj != null && hasOwn(obj, 'callee'); // 57
            }; // 57
            //
            var isInfOrNan = function (obj) {
              // 59
              return Number.isNaN(obj) || obj === Infinity || obj === -Infinity; // 60
            }; // Add a custom type, using a method of your choice to get to and                                                // 60
            // from a basic JSON-able representation.  The factory argument                                                     // 63
            // is a function of JSON-able --> your object                                                                       // 64
            // The type you add must have:                                                                                      // 65
            // - A toJSONValue() method, so that Meteor can serialize it                                                        // 66
            // - a typeName() method, to show how to look it up in our type table.                                              // 67
            // It is okay if these methods are monkey-patched on.                                                               // 68
            // EJSON.clone will use toJSONValue and the given factory to produce                                                // 69
            // a clone, but you may specify a method clone() that will be                                                       // 70
            // used instead.                                                                                                    // 71
            // Similarly, EJSON.equals will use toJSONValue to make comparisons,                                                // 72
            // but you may provide a method equals() instead.                                                                   // 73
            /**                                                                                                                 // 74
             * @summary Add a custom datatype to EJSON.                                                                         //
             * @locus Anywhere                                                                                                  //
             * @param {String} name A tag for your custom type; must be unique among                                            //
             *                      custom data types defined in your project, and must                                         //
             *                      match the result of your type's `typeName` method.                                          //
             * @param {Function} factory A function that deserializes a JSON-compatible                                         //
             *                           value into an instance of your type.  This should                                      //
             *                           match the serialization performed by your                                              //
             *                           type's `toJSONValue` method.                                                           //
             */ //
            //
            EJSON.addType = function (name, factory) {
              // 85
              if (hasOwn(customTypes, name)) {
                // 86
                throw new Error("Type " + name + " already present"); // 87
              } // 88
              //
              customTypes[name] = factory; // 89
            }; // 90
            //
            var builtinConverters = [{ // 92
              // Date                                                                                                           // 93
              matchJSONValue: function (obj) {
                // 94
                return hasOwn(obj, '$date') && Object.keys(obj).length === 1; // 95
              }, // 96
              matchObject: function (obj) {
                // 97
                return obj instanceof Date; // 98
              }, // 99
              toJSONValue: function (obj) {
                // 100
                return { // 101
                  $date: obj.getTime() // 101
                }; // 101
              }, // 102
              fromJSONValue: function (obj) {
                // 103
                return new Date(obj.$date); // 104
              } // 105
            }, { // 93
              // RegExp                                                                                                         // 107
              matchJSONValue: function (obj) {
                // 108
                return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && Object.keys(obj).length === 2; // 109
              }, // 112
              matchObject: function (obj) {
                // 113
                return obj instanceof RegExp; // 114
              }, // 115
              toJSONValue: function (regexp) {
                // 116
                return { // 117
                  $regexp: regexp.source, // 118
                  $flags: regexp.flags // 119
                }; // 117
              }, // 121
              fromJSONValue: function (obj) {
                // 122
                // Replaces duplicate / invalid flags.                                                                          // 123
                return new RegExp(obj.$regexp, obj.$flags // Cut off flags at 50 chars to avoid abusing RegExp for DOS.         // 124
                .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\1)/g, '')); // 126
              } // 132
            }, { // 107
              // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                                           // 134
              // which we match.)                                                                                               // 135
              matchJSONValue: function (obj) {
                // 136
                return hasOwn(obj, '$InfNaN') && Object.keys(obj).length === 1; // 137
              }, // 138
              matchObject: isInfOrNan, // 139
              toJSONValue: function (obj) {
                // 140
                var sign = void 0; // 141
                //
                if (Number.isNaN(obj)) {
                  // 142
                  sign = 0; // 143
                } else if (obj === Infinity) {
                  // 144
                  sign = 1; // 145
                } else {
                  // 146
                  sign = -1; // 147
                } // 148
                //
                return { // 149
                  $InfNaN: sign // 149
                }; // 149
              }, // 150
              fromJSONValue: function (obj) {
                // 151
                return obj.$InfNaN / 0; // 152
              } // 153
            }, { // 134
              // Binary                                                                                                         // 155
              matchJSONValue: function (obj) {
                // 156
                return hasOwn(obj, '$binary') && Object.keys(obj).length === 1; // 157
              }, // 158
              matchObject: function (obj) {
                // 159
                return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');
              }, // 162
              toJSONValue: function (obj) {
                // 163
                return { // 164
                  $binary: Base64.encode(obj) // 164
                }; // 164
              }, // 165
              fromJSONValue: function (obj) {
                // 166
                return Base64.decode(obj.$binary); // 167
              } // 168
            }, { // 155
              // Escaping one level                                                                                             // 170
              matchJSONValue: function (obj) {
                // 171
                return hasOwn(obj, '$escape') && Object.keys(obj).length === 1; // 172
              }, // 173
              matchObject: function (obj) {
                // 174
                var match = false; // 175
                //
                if (obj) {
                  // 176
                  var keyCount = Object.keys(obj).length; // 177
                  //
                  if (keyCount === 1 || keyCount === 2) {
                    // 178
                    match = builtinConverters.some(function (converter) {
                      // 179
                      return converter.matchJSONValue(obj); // 180
                    }); // 180
                  } // 181
                } // 182
                //
                return match; // 183
              }, // 184
              toJSONValue: function (obj) {
                // 185
                var newObj = {}; // 186
                Object.keys(obj).forEach(function (key) {
                  // 187
                  newObj[key] = EJSON.toJSONValue(obj[key]); // 188
                }); // 189
                return { // 190
                  $escape: newObj // 190
                }; // 190
              }, // 191
              fromJSONValue: function (obj) {
                // 192
                var newObj = {}; // 193
                Object.keys(obj.$escape).forEach(function (key) {
                  // 194
                  newObj[key] = EJSON.fromJSONValue(obj.$escape[key]); // 195
                }); // 196
                return newObj; // 197
              } // 198
            }, { // 170
              // Custom                                                                                                         // 200
              matchJSONValue: function (obj) {
                // 201
                return hasOwn(obj, '$type') && hasOwn(obj, '$value') && Object.keys(obj).length === 2; // 202
              }, // 204
              matchObject: function (obj) {
                // 205
                return EJSON._isCustomType(obj); // 206
              }, // 207
              toJSONValue: function (obj) {
                // 208
                var jsonValue = Meteor._noYieldsAllowed(function () {
                  // 209
                  return obj.toJSONValue(); // 209
                }); // 209
                //
                return { // 210
                  $type: obj.typeName(), // 210
                  $value: jsonValue // 210
                }; // 210
              }, // 211
              fromJSONValue: function (obj) {
                // 212
                var typeName = obj.$type; // 213
                //
                if (!hasOwn(customTypes, typeName)) {
                  // 214
                  throw new Error("Custom EJSON type " + typeName + " is not defined"); // 215
                } // 216
                //
                var converter = customTypes[typeName]; // 217
                return Meteor._noYieldsAllowed(function () {
                  // 218
                  return converter(obj.$value); // 218
                }); // 218
              } // 219
            }]; // 200
            //
            EJSON._isCustomType = function (obj) {
              // 223
              return obj && typeof obj.toJSONValue === 'function' && typeof obj.typeName === 'function' && hasOwn(customTypes, obj.typeName());
            }; // 223
            //
            EJSON._getTypes = function () {
              // 230
              return customTypes; // 230
            }; // 230
            //
            EJSON._getConverters = function () {
              // 232
              return builtinConverters; // 232
            }; // Either return the JSON-compatible version of the argument, or undefined (if                                   // 232
            // the item isn't itself replaceable, but maybe some fields in it are)                                              // 235
            //
            //
            var toJSONValueHelper = function (item) {
              // 236
              for (var i = 0; i < builtinConverters.length; i++) {
                // 237
                var converter = builtinConverters[i]; // 238
                //
                if (converter.matchObject(item)) {
                  // 239
                  return converter.toJSONValue(item); // 240
                } // 241
              } // 242
              //
              return undefined; // 243
            }; // for both arrays and objects, in-place modification.                                                           // 244
            //
            //
            var adjustTypesToJSONValue = function (obj) {
              // 247
              // Is it an atom that we need to adjust?                                                                          // 248
              if (obj === null) {
                // 249
                return null; // 250
              } // 251
              //
              var maybeChanged = toJSONValueHelper(obj); // 253
              //
              if (maybeChanged !== undefined) {
                // 254
                return maybeChanged; // 255
              } // Other atoms are unchanged.                                                                                   // 256
              //
              //
              if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) !== 'object') {
                // 259
                return obj; // 260
              } // Iterate over array or object structure.                                                                      // 261
              //
              //
              Object.keys(obj).forEach(function (key) {
                // 264
                var value = obj[key]; // 265
                //
                if ((typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) !== 'object' && value !== undefined && !isInfOrNan(value)) {
                  return; // continue                                                                                           // 268
                } // 269
                //
                var changed = toJSONValueHelper(value); // 271
                //
                if (changed) {
                  // 272
                  obj[key] = changed; // 273
                  return; // on to the next key                                                                                 // 274
                } // if we get here, value is an object but not adjustable                                                      // 275
                // at this level.  recurse.                                                                                     // 277
                //
                //
                adjustTypesToJSONValue(value); // 278
              }); // 279
              return obj; // 280
            }; // 281
            //
            EJSON._adjustTypesToJSONValue = adjustTypesToJSONValue; /**                                                         // 283
                                                                     * @summary Serialize an EJSON-compatible value into its plain JSON
                                                                     *          representation.                                 //
                                                                     * @locus Anywhere                                          //
                                                                     * @param {EJSON} val A value to serialize to plain JSON.   //
                                                                     */ //
            //
            EJSON.toJSONValue = function (item) {
              // 291
              var changed = toJSONValueHelper(item); // 292
              //
              if (changed !== undefined) {
                // 293
                return changed; // 294
              } // 295
              //
              var newItem = item; // 297
              //
              if ((typeof item === "undefined" ? "undefined" : (0, _typeof3.default)(item)) === 'object') {
                // 298
                newItem = EJSON.clone(item); // 299
                adjustTypesToJSONValue(newItem); // 300
              } // 301
              //
              return newItem; // 302
            }; // Either return the argument changed to have the non-json                                                       // 303
            // rep of itself (the Object version) or the argument itself.                                                       // 306
            // DOES NOT RECURSE.  For actually getting the fully-changed value, use                                             // 307
            // EJSON.fromJSONValue                                                                                              // 308
            //
            //
            var fromJSONValueHelper = function (value) {
              // 309
              if ((typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === 'object' && value !== null) {
                var keys = Object.keys(value); // 311
                //
                if (keys.length <= 2 && keys.every(function (k) {
                  // 312
                  return typeof k === 'string' && k.substr(0, 1) === '$'; // 313
                })) {
                  // 313
                  for (var i = 0; i < builtinConverters.length; i++) {
                    // 314
                    var converter = builtinConverters[i]; // 315
                    //
                    if (converter.matchJSONValue(value)) {
                      // 316
                      return converter.fromJSONValue(value); // 317
                    } // 318
                  } // 319
                } // 320
              } // 321
              //
              return value; // 322
            }; // for both arrays and objects. Tries its best to just                                                           // 323
            // use the object you hand it, but may return something                                                             // 326
            // different if the object you hand it itself needs changing.                                                       // 327
            //
            //
            var adjustTypesFromJSONValue = function (obj) {
              // 328
              if (obj === null) {
                // 329
                return null; // 330
              } // 331
              //
              var maybeChanged = fromJSONValueHelper(obj); // 333
              //
              if (maybeChanged !== obj) {
                // 334
                return maybeChanged; // 335
              } // Other atoms are unchanged.                                                                                   // 336
              //
              //
              if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) !== 'object') {
                // 339
                return obj; // 340
              } // 341
              //
              Object.keys(obj).forEach(function (key) {
                // 343
                var value = obj[key]; // 344
                //
                if ((typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === 'object') {
                  // 345
                  var changed = fromJSONValueHelper(value); // 346
                  //
                  if (value !== changed) {
                    // 347
                    obj[key] = changed; // 348
                    return; // 349
                  } // if we get here, value is an object but not adjustable                                                    // 350
                  // at this level.  recurse.                                                                                   // 352
                  //
                  //
                  adjustTypesFromJSONValue(value); // 353
                } // 354
              }); // 355
              return obj; // 356
            }; // 357
            //
            EJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue; /**                                                     // 359
                                                                         * @summary Deserialize an EJSON value from its plain JSON representation.
                                                                         * @locus Anywhere                                      //
                                                                         * @param {JSONCompatible} val A value to deserialize into EJSON.
                                                                         */ //
            //
            EJSON.fromJSONValue = function (item) {
              // 366
              var changed = fromJSONValueHelper(item); // 367
              //
              if (changed === item && (typeof item === "undefined" ? "undefined" : (0, _typeof3.default)(item)) === 'object') {
                changed = EJSON.clone(item); // 369
                adjustTypesFromJSONValue(changed); // 370
              } // 371
              //
              return changed; // 372
            }; /**                                                                                                              // 373
                * @summary Serialize a value to a string. For EJSON values, the serialization                                   //
                *          fully represents the value. For non-EJSON values, serializes the                                     //
                *          same way as `JSON.stringify`.                                                                        //
                * @locus Anywhere                                                                                               //
                * @param {EJSON} val A value to stringify.                                                                      //
                * @param {Object} [options]                                                                                     //
                * @param {Boolean | Integer | String} options.indent Indents objects and                                        //
                * arrays for easy readability.  When `true`, indents by 2 spaces; when an                                       //
                * integer, indents by that number of spaces; and when a string, uses the                                        //
                * string as the indentation pattern.                                                                            //
                * @param {Boolean} options.canonical When `true`, stringifies keys in an                                        //
                *                                    object in sorted order.                                                    //
                */ //
            //
            EJSON.stringify = function (item, options) {
              // 389
              var serialized = void 0; // 390
              var json = EJSON.toJSONValue(item); // 391
              //
              if (options && (options.canonical || options.indent)) {
                // 392
                var canonicalStringify = void 0; // 1
                _module.watch(_require("./stringify"), { // 1
                  "default": function (v) {
                    // 1
                    canonicalStringify = v; // 1
                  } // 1
                }, 0); // 1
                serialized = canonicalStringify(json, options); // 394
              } else {
                // 395
                serialized = JSON.stringify(json); // 396
              } // 397
              //
              return serialized; // 398
            }; /**                                                                                                              // 399
                * @summary Parse a string into an EJSON value. Throws an error if the string                                    //
                *          is not valid EJSON.                                                                                  //
                * @locus Anywhere                                                                                               //
                * @param {String} str A string to parse into an EJSON value.                                                    //
                */ //
            //
            EJSON.parse = function (item) {
              // 407
              if (typeof item !== 'string') {
                // 408
                throw new Error('EJSON.parse argument should be a string'); // 409
              } // 410
              //
              return EJSON.fromJSONValue(JSON.parse(item)); // 411
            }; /**                                                                                                              // 412
                * @summary Returns true if `x` is a buffer of binary data, as returned from                                     //
                *          [`EJSON.newBinary`](#ejson_new_binary).                                                              //
                * @param {Object} x The variable to check.                                                                      //
                * @locus Anywhere                                                                                               //
                */ //
            //
            EJSON.isBinary = function (obj) {
              // 420
              return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill); // 421
            }; /**                                                                                                              // 423
                * @summary Return true if `a` and `b` are equal to each other.  Return false                                    //
                *          otherwise.  Uses the `equals` method on `a` if present, otherwise                                    //
                *          performs a deep comparison.                                                                          //
                * @locus Anywhere                                                                                               //
                * @param {EJSON} a                                                                                              //
                * @param {EJSON} b                                                                                              //
                * @param {Object} [options]                                                                                     //
                * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,                                    //
                * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`                                   //
                * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The                                     //
                * default is `false`.                                                                                           //
                */ //
            //
            EJSON.equals = function (a, b, options) {
              // 438
              var i = void 0; // 439
              var keyOrderSensitive = !!(options && options.keyOrderSensitive); // 440
              //
              if (a === b) {
                // 441
                return true; // 442
              } // This differs from the IEEE spec for NaN equality, b/c we don't want                                          // 443
              // anything ever with a NaN to be poisoned from becoming equal to anything.                                       // 446
              //
              //
              if (Number.isNaN(a) && Number.isNaN(b)) {
                // 447
                return true; // 448
              } // if either one is falsy, they'd have to be === to be equal                                                    // 449
              //
              //
              if (!a || !b) {
                // 452
                return false; // 453
              } // 454
              //
              if (!((typeof a === "undefined" ? "undefined" : (0, _typeof3.default)(a)) === 'object' && (typeof b === "undefined" ? "undefined" : (0, _typeof3.default)(b)) === 'object')) {
                return false; // 457
              } // 458
              //
              if (a instanceof Date && b instanceof Date) {
                // 460
                return a.valueOf() === b.valueOf(); // 461
              } // 462
              //
              if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
                // 464
                if (a.length !== b.length) {
                  // 465
                  return false; // 466
                } // 467
                //
                for (i = 0; i < a.length; i++) {
                  // 468
                  if (a[i] !== b[i]) {
                    // 469
                    return false; // 470
                  } // 471
                } // 472
                //
                return true; // 473
              } // 474
              //
              if (typeof a.equals === 'function') {
                // 476
                return a.equals(b, options); // 477
              } // 478
              //
              if (typeof b.equals === 'function') {
                // 480
                return b.equals(a, options); // 481
              } // 482
              //
              if (a instanceof Array) {
                // 484
                if (!(b instanceof Array)) {
                  // 485
                  return false; // 486
                } // 487
                //
                if (a.length !== b.length) {
                  // 488
                  return false; // 489
                } // 490
                //
                for (i = 0; i < a.length; i++) {
                  // 491
                  if (!EJSON.equals(a[i], b[i], options)) {
                    // 492
                    return false; // 493
                  } // 494
                } // 495
                //
                return true; // 496
              } // fallback for custom types that don't implement their own equals                                              // 497
              //
              //
              switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {// 500
                case 1:
                  // 501
                  return false; // 501
                //
                case 2:
                  // 502
                  return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b)); // 502
                //
                default: // Do nothing                                                                                          // 503
              } // fall back to structural equality of objects                                                                  // 500
              //
              //
              var ret = void 0; // 507
              var aKeys = Object.keys(a); // 508
              var bKeys = Object.keys(b); // 509
              //
              if (keyOrderSensitive) {
                // 510
                i = 0; // 511
                ret = aKeys.every(function (key) {
                  // 512
                  if (i >= bKeys.length) {
                    // 513
                    return false; // 514
                  } // 515
                  //
                  if (key !== bKeys[i]) {
                    // 516
                    return false; // 517
                  } // 518
                  //
                  if (!EJSON.equals(a[key], b[bKeys[i]], options)) {
                    // 519
                    return false; // 520
                  } // 521
                  //
                  i++; // 522
                  return true; // 523
                }); // 524
              } else {
                // 525
                i = 0; // 526
                ret = aKeys.every(function (key) {
                  // 527
                  if (!hasOwn(b, key)) {
                    // 528
                    return false; // 529
                  } // 530
                  //
                  if (!EJSON.equals(a[key], b[key], options)) {
                    // 531
                    return false; // 532
                  } // 533
                  //
                  i++; // 534
                  return true; // 535
                }); // 536
              } // 537
              //
              return ret && i === bKeys.length; // 538
            }; /**                                                                                                              // 539
                * @summary Return a deep copy of `val`.                                                                         //
                * @locus Anywhere                                                                                               //
                * @param {EJSON} val A value to copy.                                                                           //
                */ //
            //
            EJSON.clone = function (v) {
              // 546
              var ret = void 0; // 547
              //
              if ((typeof v === "undefined" ? "undefined" : (0, _typeof3.default)(v)) !== 'object') {
                // 548
                return v; // 549
              } // 550
              //
              if (v === null) {
                // 552
                return null; // null has typeof "object"                                                                        // 553
              } // 554
              //
              if (v instanceof Date) {
                // 556
                return new Date(v.getTime()); // 557
              } // RegExps are not really EJSON elements (eg we don't define a serialization                                    // 558
              // for them), but they're immutable anyway, so we can support them in clone.                                      // 561
              //
              //
              if (v instanceof RegExp) {
                // 562
                return v; // 563
              } // 564
              //
              if (EJSON.isBinary(v)) {
                // 566
                ret = EJSON.newBinary(v.length); // 567
                //
                for (var i = 0; i < v.length; i++) {
                  // 568
                  ret[i] = v[i]; // 569
                } // 570
                //
                return ret; // 571
              } // 572
              //
              if (Array.isArray(v)) {
                // 574
                return v.map(function (value) {
                  // 575
                  return EJSON.clone(value); // 575
                }); // 575
              } // 576
              //
              if (isArguments(v)) {
                // 578
                return Array.from(v).map(function (value) {
                  // 579
                  return EJSON.clone(value); // 579
                }); // 579
              } // handle general user-defined typed Objects if they have a clone method                                        // 580
              //
              //
              if (typeof v.clone === 'function') {
                // 583
                return v.clone(); // 584
              } // handle other custom types                                                                                    // 585
              //
              //
              if (EJSON._isCustomType(v)) {
                // 588
                return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true); // 589
              } // handle other objects                                                                                         // 590
              //
              //
              ret = {}; // 593
              Object.keys(v).forEach(function (key) {
                // 594
                ret[key] = EJSON.clone(v[key]); // 595
              }); // 596
              return ret; // 597
            }; /**                                                                                                              // 598
                * @summary Allocate a new buffer of binary data that EJSON can serialize.                                       //
                * @locus Anywhere                                                                                               //
                * @param {Number} size The number of bytes of binary data to allocate.                                          //
                */ // EJSON.newBinary is the public documented API for this functionality,                                      //
            // but the implementation is in the 'base64' package to avoid                                                       // 606
            // introducing a circular dependency. (If the implementation were here,                                             // 607
            // then 'base64' would have to use EJSON.newBinary, and 'ejson' would                                               // 608
            // also have to use 'base64'.)                                                                                      // 609
            //
            //
            EJSON.newBinary = Base64.newBinary; // 610
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stringify.js": function (_require3, _exports3, _module2) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                  //
            // packages/ejson/stringify.js                                                                                      //
            //                                                                                                                  //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require3("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            // Based on json2.js from https://github.com/douglascrockford/JSON-js                                               // 1
            //                                                                                                                  // 2
            //    json2.js                                                                                                      // 3
            //    2012-10-08                                                                                                    // 4
            //                                                                                                                  // 5
            //    Public Domain.                                                                                                // 6
            //                                                                                                                  // 7
            //    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                       // 8
            function quote(string) {
              // 10
              return JSON.stringify(string); // 11
            } // 12
            //
            var str = function (key, holder, singleIndent, outerIndent, canonical) {
              // 14
              var value = holder[key]; // What happens next depends on the value's type.                                        // 15
              //
              switch (typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) {// 18
                case 'string':
                  // 19
                  return quote(value); // 20
                //
                case 'number':
                  // 21
                  // JSON numbers must be finite. Encode non-finite numbers as null.                                            // 22
                  return isFinite(value) ? String(value) : 'null'; // 23
                //
                case 'boolean':
                  // 24
                  return String(value); // 25
                // If the type is 'object', we might be dealing with an object or an array or                                   // 26
                // null.                                                                                                        // 27
                //
                case 'object':
                  // 28
                  // Due to a specification blunder in ECMAScript, typeof null is 'object',                                     // 29
                  // so watch out for that case.                                                                                // 30
                  if (!value) {
                    // 31
                    return 'null'; // 32
                  } // Make an array to hold the partial results of stringifying this object                                    // 33
                  // value.                                                                                                     // 35
                  //
                  //
                  var innerIndent = outerIndent + singleIndent; // 36
                  var partial = []; // Is the value an array?                                                                   // 37
                  //
                  if (Array.isArray(value) || {}.hasOwnProperty.call(value, 'callee')) {
                    // 40
                    // The value is an array. Stringify every element. Use null as a                                            // 41
                    // placeholder for non-JSON values.                                                                         // 42
                    var length = value.length; // 43
                    //
                    for (var i = 0; i < length; i += 1) {
                      // 44
                      partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null'; // 45
                    } // Join all of the elements together, separated with commas, and wrap                                     // 47
                    // them in brackets.                                                                                        // 50
                    //
                    //
                    var _v = void 0; // 51
                    //
                    if (partial.length === 0) {
                      // 52
                      _v = '[]'; // 53
                    } else if (innerIndent) {
                      // 54
                      _v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']'; // 55
                    } else {
                      // 62
                      _v = '[' + partial.join(',') + ']'; // 63
                    } // 64
                    //
                    return _v; // 65
                  } // Iterate through all of the keys in the object.                                                           // 66
                  //
                  //
                  var keys = Object.keys(value); // 69
                  //
                  if (canonical) {
                    // 70
                    keys = keys.sort(); // 71
                  } // 72
                  //
                  keys.forEach(function (k) {
                    // 73
                    v = str(k, value, singleIndent, innerIndent, canonical); // 74
                    //
                    if (v) {
                      // 75
                      partial.push(quote(k) + (innerIndent ? ': ' : ':') + v); // 76
                    } // 77
                  }); // Join all of the member texts together, separated with commas,                                          // 78
                  // and wrap them in braces.                                                                                   // 81
                  //
                  if (partial.length === 0) {
                    // 82
                    v = '{}'; // 83
                  } else if (innerIndent) {
                    // 84
                    v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}'; // 85
                  } else {
                    // 92
                    v = '{' + partial.join(',') + '}'; // 93
                  } // 94
                  //
                  return v; // 95
                //
                default: // Do nothing                                                                                          // 97
              } // 18
            }; // If the JSON object does not yet have a stringify method, give it one.                                         // 99
            //
            //
            var canonicalStringify = function (value, options) {
              // 102
              // Make a fake root object containing our value under the key of ''.                                              // 103
              // Return the result of stringifying the value.                                                                   // 104
              var allOptions = Object.assign({ // 105
                indent: '', // 106
                canonical: false // 107
              }, options); // 105
              //
              if (allOptions.indent === true) {
                // 109
                allOptions.indent = '  '; // 110
              } else if (typeof allOptions.indent === 'number') {
                // 111
                var newIndent = ''; // 112
                //
                for (var i = 0; i < allOptions.indent; i++) {
                  // 113
                  newIndent += ' '; // 114
                } // 115
                //
                allOptions.indent = newIndent; // 116
              } // 117
              //
              return str('', { // 118
                '': value // 118
              }, allOptions.indent, '', allOptions.canonical); // 118
            }; // 119
            //
            _module2.exportDefault(canonicalStringify); // 1
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/ejson/ejson.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.ejson = _exports2, {
    EJSON: EJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var check, Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "check": { "match.js": function (_require, _exports) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/check/match.js                                                                                           //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX docs                                                                                                          // 1
            // 2
            // Things we explicitly do NOT support:                                                                              // 3
            //    - heterogenous arrays                                                                                          // 4
            // 5
            var currentArgumentChecker = new Meteor.EnvironmentVariable(); // 6
            var isPlainObject = _require("./isPlainObject.js").isPlainObject; // 7
            // 8
            /**                                                                                                                  // 9
             * @summary Check that a value matches a [pattern](#matchpatterns).                                                  // 10
             * If the value does not match the pattern, throw a `Match.Error`.                                                   // 11
             *                                                                                                                   // 12
             * Particularly useful to assert that arguments to a function have the right                                         // 13
             * types and structure.                                                                                              // 14
             * @locus Anywhere                                                                                                   // 15
             * @param {Any} value The value to check                                                                             // 16
             * @param {MatchPattern} pattern The pattern to match                                                                // 17
             * `value` against                                                                                                   // 18
             */ // 19
            var check = _exports.check = function (value, pattern) {
              // 20
              // Record that check got called, if somebody cared.                                                                // 21
              //                                                                                                                 // 22
              // We use getOrNullIfOutsideFiber so that it's OK to call check()                                                  // 23
              // from non-Fiber server contexts; the downside is that if you forget to                                           // 24
              // bindEnvironment on some random callback in your method/publisher,                                               // 25
              // it might not find the argumentChecker and you'll get an error about                                             // 26
              // not checking an argument that it looks like you're checking (instead                                            // 27
              // of just getting a "Node code must run in a Fiber" error).                                                       // 28
              var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber(); // 29
              if (argChecker) // 30
                argChecker.checking(value); // 31
              var result = testSubtree(value, pattern); // 32
              if (result) {
                // 33
                var err = new Match.Error(result.message); // 34
                if (result.path) {
                  // 35
                  err.message += " in field " + result.path; // 36
                  err.path = result.path; // 37
                } // 38
                throw err; // 39
              } // 40
            }; // 41
            // 42
            /**                                                                                                                  // 43
             * @namespace Match                                                                                                  // 44
             * @summary The namespace for all Match types and methods.                                                           // 45
             */ // 46
            var Match = _exports.Match = { // 47
              Optional: function (pattern) {
                // 48
                return new Optional(pattern); // 49
              }, // 50
              Maybe: function (pattern) {
                // 51
                return new Maybe(pattern); // 52
              }, // 53
              OneOf: function () /*arguments*/{
                // 54
                return new OneOf(_.toArray(arguments)); // 55
              }, // 56
              Any: ['__any__'], // 57
              Where: function (condition) {
                // 58
                return new Where(condition); // 59
              }, // 60
              ObjectIncluding: function (pattern) {
                // 61
                return new ObjectIncluding(pattern); // 62
              }, // 63
              ObjectWithValues: function (pattern) {
                // 64
                return new ObjectWithValues(pattern); // 65
              }, // 66
              // Matches only signed 32-bit integers                                                                             // 67
              Integer: ['__integer__'], // 68
              // 69
              // XXX matchers should know how to describe themselves for errors                                                  // 70
              Error: Meteor.makeErrorType("Match.Error", function (msg) {
                // 71
                this.message = "Match error: " + msg; // 72
                // The path of the value that failed to match. Initially empty, this gets                                        // 73
                // populated by catching and rethrowing the exception as it goes back up the                                     // 74
                // stack.                                                                                                        // 75
                // E.g.: "vals[3].entity.created"                                                                                // 76
                this.path = ""; // 77
                // If this gets sent over DDP, don't give full internal details but at least                                     // 78
                // provide something better than 500 Internal server error.                                                      // 79
                this.sanitizedError = new Meteor.Error(400, "Match failed"); // 80
              }), // 81
              // 82
              // Tests to see if value matches pattern. Unlike check, it merely returns true                                     // 83
              // or false (unless an error other than Match.Error was thrown). It does not                                       // 84
              // interact with _failIfArgumentsAreNotAllChecked.                                                                 // 85
              // XXX maybe also implement a Match.match which returns more information about                                     // 86
              //     failures but without using exception handling or doing what check()                                         // 87
              //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion                                      // 88
              // 89
              /**                                                                                                                // 90
               * @summary Returns true if the value matches the pattern.                                                         // 91
               * @locus Anywhere                                                                                                 // 92
               * @param {Any} value The value to check                                                                           // 93
               * @param {MatchPattern} pattern The pattern to match `value` against                                              // 94
               */ // 95
              test: function (value, pattern) {
                // 96
                return !testSubtree(value, pattern); // 97
              }, // 98
              // 99
              // Runs `f.apply(context, args)`. If check() is not called on every element of                                     // 100
              // `args` (either directly or in the first level of an array), throws an error                                     // 101
              // (using `description` in the message).                                                                           // 102
              //                                                                                                                 // 103
              _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {
                // 104
                var argChecker = new ArgumentChecker(args, description); // 105
                var result = currentArgumentChecker.withValue(argChecker, function () {
                  // 106
                  return f.apply(context, args); // 107
                }); // 108
                // If f didn't itself throw, make sure it checked all of its arguments.                                          // 109
                argChecker.throwUnlessAllArgumentsHaveBeenChecked(); // 110
                return result; // 111
              } // 112
            }; // 113
            // 114
            var Optional = function (pattern) {
              // 115
              this.pattern = pattern; // 116
            }; // 117
            // 118
            var Maybe = function (pattern) {
              // 119
              this.pattern = pattern; // 120
            }; // 121
            // 122
            var OneOf = function (choices) {
              // 123
              if (_.isEmpty(choices)) // 124
                throw new Error("Must provide at least one choice to Match.OneOf"); // 125
              this.choices = choices; // 126
            }; // 127
            // 128
            var Where = function (condition) {
              // 129
              this.condition = condition; // 130
            }; // 131
            // 132
            var ObjectIncluding = function (pattern) {
              // 133
              this.pattern = pattern; // 134
            }; // 135
            // 136
            var ObjectWithValues = function (pattern) {
              // 137
              this.pattern = pattern; // 138
            }; // 139
            // 140
            var stringForErrorMessage = function (value, options) {
              // 141
              options = options || {}; // 142
              // 143
              if (value === null) return "null"; // 144
              // 145
              if (options.onlyShowType) {
                // 146
                return typeof value; // 147
              } // 148
              // 149
              // Your average non-object things.  Saves from doing the try/catch below for.                                      // 150
              if (typeof value !== "object") {
                // 151
                return EJSON.stringify(value); // 152
              } // 153
              // 154
              try {
                // 155
                // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)      // 156
                // If the native stringify is going to choke, EJSON.stringify is going to choke too.                             // 157
                JSON.stringify(value); // 158
              } catch (stringifyError) {
                // 159
                if (stringifyError.name === "TypeError") {
                  // 160
                  return typeof value; // 161
                } // 162
              } // 163
              // 164
              return EJSON.stringify(value); // 165
            }; // 166
            // 167
            var typeofChecks = [// 168
            [String, "string"], // 169
            [Number, "number"], // 170
            [Boolean, "boolean"], // 171
            // While we don't allow undefined/function in EJSON, this is good for optional                                     // 172
            // arguments with OneOf.                                                                                           // 173
            [Function, "function"], // 174
            [undefined, "undefined"] // 175
            ]; // 176
            // 177
            // Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.                    // 178
            var testSubtree = function (value, pattern) {
              // 179
              // Match anything!                                                                                                 // 180
              if (pattern === Match.Any) // 181
                return false; // 182
              // 183
              // Basic atomic types.                                                                                             // 184
              // Do not match boxed objects (e.g. String, Boolean)                                                               // 185
              for (var i = 0; i < typeofChecks.length; ++i) {
                // 186
                if (pattern === typeofChecks[i][0]) {
                  // 187
                  if (typeof value === typeofChecks[i][1]) // 188
                    return false; // 189
                  return { // 190
                    message: "Expected " + typeofChecks[i][1] + ", got " + stringForErrorMessage(value, { onlyShowType: true }),
                    path: "" // 192
                  }; // 193
                } // 194
              } // 195
              // 196
              if (pattern === null) {
                // 197
                if (value === null) {
                  // 198
                  return false; // 199
                } // 200
                return { // 201
                  message: "Expected null, got " + stringForErrorMessage(value), // 202
                  path: "" // 203
                }; // 204
              } // 205
              // 206
              // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.                                     // 207
              if (typeof pattern === "string" || typeof pattern === "number" || typeof pattern === "boolean") {
                // 208
                if (value === pattern) // 209
                  return false; // 210
                return { // 211
                  message: "Expected " + pattern + ", got " + stringForErrorMessage(value), // 212
                  path: "" // 213
                }; // 214
              } // 215
              // 216
              // Match.Integer is special type encoded with array                                                                // 217
              if (pattern === Match.Integer) {
                // 218
                // There is no consistent and reliable way to check if variable is a 64-bit                                      // 219
                // integer. One of the popular solutions is to get reminder of division by 1                                     // 220
                // but this method fails on really large floats with big precision.                                              // 221
                // E.g.: 1.348192308491824e+23 % 1 === 0 in V8                                                                   // 222
                // Bitwise operators work consistantly but always cast variable to 32-bit                                        // 223
                // signed integer according to JavaScript specs.                                                                 // 224
                if (typeof value === "number" && (value | 0) === value) // 225
                  return false; // 226
                return { // 227
                  message: "Expected Integer, got " + stringForErrorMessage(value), // 228
                  path: "" // 229
                }; // 230
              } // 231
              // 232
              // "Object" is shorthand for Match.ObjectIncluding({});                                                            // 233
              if (pattern === Object) // 234
                pattern = Match.ObjectIncluding({}); // 235
              // 236
              // Array (checked AFTER Any, which is implemented as an Array).                                                    // 237
              if (pattern instanceof Array) {
                // 238
                if (pattern.length !== 1) {
                  // 239
                  return { // 240
                    message: "Bad pattern: arrays must have one type element" + stringForErrorMessage(pattern), // 241
                    path: "" // 242
                  }; // 243
                } // 244
                if (!_.isArray(value) && !_.isArguments(value)) {
                  // 245
                  return { // 246
                    message: "Expected array, got " + stringForErrorMessage(value), // 247
                    path: "" // 248
                  }; // 249
                } // 250
                // 251
                for (var i = 0, length = value.length; i < length; i++) {
                  // 252
                  var result = testSubtree(value[i], pattern[0]); // 253
                  if (result) {
                    // 254
                    result.path = _prependPath(i, result.path); // 255
                    return result; // 256
                  } // 257
                } // 258
                return false; // 259
              } // 260
              // 261
              // Arbitrary validation checks. The condition can return false or throw a                                          // 262
              // Match.Error (ie, it can internally use check()) to fail.                                                        // 263
              if (pattern instanceof Where) {
                // 264
                var result; // 265
                try {
                  // 266
                  result = pattern.condition(value); // 267
                } catch (err) {
                  // 268
                  if (!(err instanceof Match.Error)) // 269
                    throw err; // 270
                  return { // 271
                    message: err.message, // 272
                    path: err.path // 273
                  }; // 274
                } // 275
                if (result) // 276
                  return false; // 277
                // XXX this error is terrible                                                                                    // 278
                return { // 279
                  message: "Failed Match.Where validation", // 280
                  path: "" // 281
                }; // 282
              } // 283
              // 284
              // 285
              if (pattern instanceof Maybe) {
                // 286
                pattern = Match.OneOf(undefined, null, pattern.pattern); // 287
              } // 288
              else if (pattern instanceof Optional) {
                  // 289
                  pattern = Match.OneOf(undefined, pattern.pattern); // 290
                } // 291
              // 292
              if (pattern instanceof OneOf) {
                // 293
                for (var i = 0; i < pattern.choices.length; ++i) {
                  // 294
                  var result = testSubtree(value, pattern.choices[i]); // 295
                  if (!result) {
                    // 296
                    // No error? Yay, return.                                                                                    // 297
                    return false; // 298
                  } // 299
                  // Match errors just mean try another choice.                                                                  // 300
                } // 301
                // XXX this error is terrible                                                                                    // 302
                return { // 303
                  message: "Failed Match.OneOf, Match.Maybe or Match.Optional validation", // 304
                  path: "" // 305
                }; // 306
              } // 307
              // 308
              // A function that isn't something we special-case is assumed to be a                                              // 309
              // constructor.                                                                                                    // 310
              if (pattern instanceof Function) {
                // 311
                if (value instanceof pattern) // 312
                  return false; // 313
                return { // 314
                  message: "Expected " + (pattern.name || "particular constructor"), // 315
                  path: "" // 316
                }; // 317
              } // 318
              // 319
              var unknownKeysAllowed = false; // 320
              var unknownKeyPattern; // 321
              if (pattern instanceof ObjectIncluding) {
                // 322
                unknownKeysAllowed = true; // 323
                pattern = pattern.pattern; // 324
              } // 325
              if (pattern instanceof ObjectWithValues) {
                // 326
                unknownKeysAllowed = true; // 327
                unknownKeyPattern = [pattern.pattern]; // 328
                pattern = {}; // no required keys                                                                               // 329
              } // 330
              // 331
              if (typeof pattern !== "object") {
                // 332
                return { // 333
                  message: "Bad pattern: unknown pattern type", // 334
                  path: "" // 335
                }; // 336
              } // 337
              // 338
              // An object, with required and optional keys. Note that this does NOT do                                          // 339
              // structural matches against objects of special types that happen to match                                        // 340
              // the pattern: this really needs to be a plain old {Object}!                                                      // 341
              if (typeof value !== 'object') {
                // 342
                return { // 343
                  message: "Expected object, got " + typeof value, // 344
                  path: "" // 345
                }; // 346
              } // 347
              if (value === null) {
                // 348
                return { // 349
                  message: "Expected object, got null", // 350
                  path: "" // 351
                }; // 352
              } // 353
              if (!isPlainObject(value)) {
                // 354
                return { // 355
                  message: "Expected plain object", // 356
                  path: "" // 357
                }; // 358
              } // 359
              // 360
              var requiredPatterns = {}; // 361
              var optionalPatterns = {}; // 362
              _.each(pattern, function (subPattern, key) {
                // 363
                if (subPattern instanceof Optional || subPattern instanceof Maybe) // 364
                  optionalPatterns[key] = subPattern.pattern; // 365
                else // 366
                  requiredPatterns[key] = subPattern; // 367
              }); // 368
              // 369
              //XXX: replace with underscore's _.allKeys if Meteor updates underscore to 1.8+ (or lodash)                        // 370
              var allKeys = function (obj) {
                // 371
                var keys = []; // 372
                if (_.isObject(obj)) {
                  // 373
                  for (var key in obj) keys.push(key); // 374
                } // 375
                return keys; // 376
              }; // 377
              // 378
              for (var keys = allKeys(value), i = 0, length = keys.length; i < length; i++) {
                // 379
                var key = keys[i]; // 380
                var subValue = value[key]; // 381
                if (_.has(requiredPatterns, key)) {
                  // 382
                  var result = testSubtree(subValue, requiredPatterns[key]); // 383
                  if (result) {
                    // 384
                    result.path = _prependPath(key, result.path); // 385
                    return result; // 386
                  } // 387
                  delete requiredPatterns[key]; // 388
                } else if (_.has(optionalPatterns, key)) {
                  // 389
                  var result = testSubtree(subValue, optionalPatterns[key]); // 390
                  if (result) {
                    // 391
                    result.path = _prependPath(key, result.path); // 392
                    return result; // 393
                  } // 394
                } else {
                  // 395
                  if (!unknownKeysAllowed) {
                    // 396
                    return { // 397
                      message: "Unknown key", // 398
                      path: key // 399
                    }; // 400
                  } // 401
                  if (unknownKeyPattern) {
                    // 402
                    var result = testSubtree(subValue, unknownKeyPattern[0]); // 403
                    if (result) {
                      // 404
                      result.path = _prependPath(key, result.path); // 405
                      return result; // 406
                    } // 407
                  } // 408
                } // 409
              } // 410
              // 411
              var keys = _.keys(requiredPatterns); // 412
              if (keys.length) {
                // 413
                return { // 414
                  message: "Missing key '" + keys[0] + "'", // 415
                  path: "" // 416
                }; // 417
              } // 418
            }; // 419
            // 420
            var ArgumentChecker = function (args, description) {
              // 421
              var self = this; // 422
              // Make a SHALLOW copy of the arguments. (We'll be doing identity checks                                           // 423
              // against its contents.)                                                                                          // 424
              self.args = _.clone(args); // 425
              // Since the common case will be to check arguments in order, and we splice                                        // 426
              // out arguments when we check them, make it so we splice out from the end                                         // 427
              // rather than the beginning.                                                                                      // 428
              self.args.reverse(); // 429
              self.description = description; // 430
            }; // 431
            // 432
            _.extend(ArgumentChecker.prototype, { // 433
              checking: function (value) {
                // 434
                var self = this; // 435
                if (self._checkingOneValue(value)) // 436
                  return; // 437
                // Allow check(arguments, [String]) or check(arguments.slice(1), [String])                                       // 438
                // or check([foo, bar], [String]) to count... but only if value wasn't                                           // 439
                // itself an argument.                                                                                           // 440
                if (_.isArray(value) || _.isArguments(value)) {
                  // 441
                  _.each(value, _.bind(self._checkingOneValue, self)); // 442
                } // 443
              }, // 444
              _checkingOneValue: function (value) {
                // 445
                var self = this; // 446
                for (var i = 0; i < self.args.length; ++i) {
                  // 447
                  // Is this value one of the arguments? (This can have a false positive if                                      // 448
                  // the argument is an interned primitive, but it's still a good enough                                         // 449
                  // check.)                                                                                                     // 450
                  // (NaN is not === to itself, so we have to check specially.)                                                  // 451
                  if (value === self.args[i] || _.isNaN(value) && _.isNaN(self.args[i])) {
                    // 452
                    self.args.splice(i, 1); // 453
                    return true; // 454
                  } // 455
                } // 456
                return false; // 457
              }, // 458
              throwUnlessAllArgumentsHaveBeenChecked: function () {
                // 459
                var self = this; // 460
                if (!_.isEmpty(self.args)) // 461
                  throw new Error("Did not check() all arguments during " + // 462
                  self.description); // 463
              } // 464
            }); // 465
            // 466
            var _jsKeywords = ["do", "if", "in", "for", "let", "new", "try", "var", "case", // 467
            "else", "enum", "eval", "false", "null", "this", "true", "void", "with", // 468
            "break", "catch", "class", "const", "super", "throw", "while", "yield", // 469
            "delete", "export", "import", "public", "return", "static", "switch", // 470
            "typeof", "default", "extends", "finally", "package", "private", "continue", // 471
            "debugger", "function", "arguments", "interface", "protected", "implements", // 472
            "instanceof"]; // 473
            // 474
            // Assumes the base of path is already escaped properly                                                              // 475
            // returns key + base                                                                                                // 476
            var _prependPath = function (key, base) {
              // 477
              if (typeof key === "number" || key.match(/^[0-9]+$/)) // 478
                key = "[" + key + "]"; // 479
              else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key)) // 480
                  key = JSON.stringify([key]); // 481
              // 482
              if (base && base[0] !== "[") // 483
                return key + '.' + base; // 484
              return key + base; // 485
            }; // 486
            // 487
            // 488
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "isPlainObject.js": function (_require3, _exports3) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                   //
            // packages/check/isPlainObject.js                                                                                   //
            //                                                                                                                   //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.                                              // 1
            // 2
            var class2type = {}; // 3
            // 4
            var toString = class2type.toString; // 5
            // 6
            var hasOwn = class2type.hasOwnProperty; // 7
            // 8
            var fnToString = hasOwn.toString; // 9
            // 10
            var ObjectFunctionString = fnToString.call(Object); // 11
            // 12
            var getProto = Object.getPrototypeOf; // 13
            // 14
            _exports3.isPlainObject = function (obj) {
              // 15
              var proto, // 16
              Ctor; // 17
              // 18
              // Detect obvious negatives                                                                                        // 19
              // Use toString instead of jQuery.type to catch host objects                                                       // 20
              if (!obj || toString.call(obj) !== "[object Object]") {
                // 21
                return false; // 22
              } // 23
              // 24
              proto = getProto(obj); // 25
              // 26
              // Objects with no prototype (e.g., `Object.create( null )`) are plain                                             // 27
              if (!proto) {
                // 28
                return true; // 29
              } // 30
              // 31
              // Objects with prototype are plain iff they were constructed by a global Object function                          // 32
              Ctor = hasOwn.call(proto, "constructor") && proto.constructor; // 33
              return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString; // 34
            }; // 35
            // 36
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/check/match.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.check = _exports2, {
    check: check,
    Match: Match
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var Random;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "random": { "random.js": function (_require) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/random/random.js                                                                                     //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                 // 1
            // window.crypto.getRandomValues() in the browser) when available. If these                                      // 2
            // PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                     // 3
            // strong, and we seed it with various sources such as the date, Math.random,                                    // 4
            // and window size on the client.  When using crypto.getRandomValues(), our                                      // 5
            // primitive is hexString(), from which we construct fraction(). When using                                      // 6
            // window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                 // 7
            // that to construct hex string.                                                                                 // 8
            if (Meteor.isServer) var nodeCrypto = Npm.require('crypto'); // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript
            // for a full discussion and Alea implementation.                                                                // 14
            //
            var Alea = function () {
              // 15
              function Mash() {
                // 16
                var n = 0xefc8249d; // 17
                //
                var mash = function (data) {
                  // 19
                  data = data.toString(); // 20
                  //
                  for (var i = 0; i < data.length; i++) {
                    // 21
                    n += data.charCodeAt(i); // 22
                    var h = 0.02519603282416938 * n; // 23
                    n = h >>> 0; // 24
                    h -= n; // 25
                    h *= n; // 26
                    n = h >>> 0; // 27
                    h -= n; // 28
                    n += h * 0x100000000; // 2^32                                                                            // 29
                  } // 30
                  //
                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                        // 31
                }; // 32
                //
                mash.version = 'Mash 0.9'; // 34
                return mash; // 35
              } // 36
              //
              return function (args) {
                // 38
                var s0 = 0; // 39
                var s1 = 0; // 40
                var s2 = 0; // 41
                var c = 1; // 42
                //
                if (args.length == 0) {
                  // 44
                  args = [+new Date()]; // 45
                } // 46
                //
                var mash = Mash(); // 47
                s0 = mash(' '); // 48
                s1 = mash(' '); // 49
                s2 = mash(' '); // 50
                //
                for (var i = 0; i < args.length; i++) {
                  // 52
                  s0 -= mash(args[i]); // 53
                  //
                  if (s0 < 0) {
                    // 54
                    s0 += 1; // 55
                  } // 56
                  //
                  s1 -= mash(args[i]); // 57
                  //
                  if (s1 < 0) {
                    // 58
                    s1 += 1; // 59
                  } // 60
                  //
                  s2 -= mash(args[i]); // 61
                  //
                  if (s2 < 0) {
                    // 62
                    s2 += 1; // 63
                  } // 64
                } // 65
                //
                mash = null; // 66
                //
                var random = function () {
                  // 68
                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                // 69
                  //
                  s0 = s1; // 70
                  s1 = s2; // 71
                  return s2 = t - (c = t | 0); // 72
                }; // 73
                //
                random.uint32 = function () {
                  // 74
                  return random() * 0x100000000; // 2^32                                                                     // 75
                }; // 76
                //
                random.fract53 = function () {
                  // 77
                  return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                             // 78
                }; // 80
                //
                random.version = 'Alea 0.9'; // 81
                random.args = args; // 82
                return random; // 83
              }(Array.prototype.slice.call(arguments)); // 85
            }; // 86
            //
            var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz"; // 88
            var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789-_"; // `type` is one of `RandomGenerator.Type` as defined below.
            //                                                                                                               // 93
            // options:                                                                                                      // 94
            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                              // 95
            //   whose items will be `toString`ed and used as the seed to the Alea                                           // 96
            //   algorithm                                                                                                   // 97
            //
            var RandomGenerator = function (type, options) {
              // 98
              var self = this; // 99
              self.type = type; // 100
              //
              if (!RandomGenerator.Type[type]) {
                // 102
                throw new Error("Unknown random generator type: " + type); // 103
              } // 104
              //
              if (type === RandomGenerator.Type.ALEA) {
                // 106
                if (!options.seeds) {
                  // 107
                  throw new Error("No seeds were provided for Alea PRNG"); // 108
                } // 109
                //
                self.alea = Alea.apply(null, options.seeds); // 110
              } // 111
            }; // Types of PRNGs supported by the `RandomGenerator` class                                                    // 112
            //
            //
            RandomGenerator.Type = { // 115
              // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                              // 116
              // secure but not seedable, runs only on the server). Reverts to                                               // 117
              // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                           // 118
              // there isn't enough entropy yet                                                                              // 119
              NODE_CRYPTO: "NODE_CRYPTO", // 120
              // Use non-IE browser's built-in `window.crypto.getRandomValues`                                               // 122
              // (cryptographically secure but not seedable, runs only in the                                                // 123
              // browser).                                                                                                   // 124
              BROWSER_CRYPTO: "BROWSER_CRYPTO", // 125
              // Use the *fast*, seedaable and not cryptographically secure                                                  // 127
              // Alea algorithm                                                                                              // 128
              ALEA: "ALEA" // 129
            }; /**                                                                                                           // 115
                * @name Random.fraction                                                                                      //
                * @summary Return a number between 0 and 1, like `Math.random`.                                              //
                * @locus Anywhere                                                                                            //
                */ //
            //
            RandomGenerator.prototype.fraction = function () {
              // 137
              var self = this; // 138
              //
              if (self.type === RandomGenerator.Type.ALEA) {
                // 139
                return self.alea(); // 140
              } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                // 141
                var numerator = parseInt(self.hexString(8), 16); // 142
                return numerator * 2.3283064365386963e-10; // 2^-32                                                          // 143
              } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {
                // 144
                var array = new Uint32Array(1); // 145
                window.crypto.getRandomValues(array); // 146
                return array[0] * 2.3283064365386963e-10; // 2^-32                                                           // 147
              } else {
                // 148
                throw new Error('Unknown random generator type: ' + self.type); // 149
              } // 150
            }; /**                                                                                                           // 151
                * @name Random.hexString                                                                                     //
                * @summary Return a random string of `n` hexadecimal digits.                                                 //
                * @locus Anywhere                                                                                            //
                * @param {Number} n Length of the string                                                                     //
                */ //
            //
            RandomGenerator.prototype.hexString = function (digits) {
              // 159
              var self = this; // 160
              //
              if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                // 161
                var numBytes = Math.ceil(digits / 2); // 162
                var bytes; // Try to get cryptographically strong randomness. Fall back to                                   // 163
                // non-cryptographically strong if not available.                                                            // 165
                //
                try {
                  // 166
                  bytes = nodeCrypto.randomBytes(numBytes); // 167
                } catch (e) {
                  // 168
                  // XXX should re-throw any error except insufficient entropy                                               // 169
                  bytes = nodeCrypto.pseudoRandomBytes(numBytes); // 170
                } // 171
                //
                var result = bytes.toString("hex"); // If the number of digits is odd, we'll have generated an extra 4 bits  // 172
                // of randomness, so we need to trim the last digit.                                                         // 174
                //
                return result.substring(0, digits); // 175
              } else {
                // 176
                return this._randomString(digits, "0123456789abcdef"); // 177
              } // 178
            }; // 179
            //
            RandomGenerator.prototype._randomString = function (charsCount, alphabet) {
              // 181
              var self = this; // 183
              var digits = []; // 184
              //
              for (var i = 0; i < charsCount; i++) {
                // 185
                digits[i] = self.choice(alphabet); // 186
              } // 187
              //
              return digits.join(""); // 188
            }; /**                                                                                                           // 189
                * @name Random.id                                                                                            //
                * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is                                //
                * likely to be unique in the whole world.                                                                    //
                * @locus Anywhere                                                                                            //
                * @param {Number} [n] Optional length of the identifier in characters                                        //
                *   (defaults to 17)                                                                                         //
                */ //
            //
            RandomGenerator.prototype.id = function (charsCount) {
              // 199
              var self = this; // 17 characters is around 96 bits of entropy, which is the amount of                         // 200
              // state in the Alea PRNG.                                                                                     // 202
              //
              if (charsCount === undefined) charsCount = 17; // 203
              return self._randomString(charsCount, UNMISTAKABLE_CHARS); // 206
            }; /**                                                                                                           // 207
                * @name Random.secret                                                                                        //
                * @summary Return a random string of printable characters with 6 bits of                                     //
                * entropy per character. Use `Random.secret` for security-critical secrets                                   //
                * that are intended for machine, rather than human, consumption.                                             //
                * @locus Anywhere                                                                                            //
                * @param {Number} [n] Optional length of the secret string (defaults to 43                                   //
                *   characters, or 256 bits of entropy)                                                                      //
                */ //
            //
            RandomGenerator.prototype.secret = function (charsCount) {
              // 218
              var self = this; // Default to 256 bits of entropy, or 43 characters at 6 bits per                             // 219
              // character.                                                                                                  // 221
              //
              if (charsCount === undefined) charsCount = 43; // 222
              return self._randomString(charsCount, BASE64_CHARS); // 224
            }; /**                                                                                                           // 225
                * @name Random.choice                                                                                        //
                * @summary Return a random element of the given array or string.                                             //
                * @locus Anywhere                                                                                            //
                * @param {Array|String} arrayOrString Array or string to choose from                                         //
                */ //
            //
            RandomGenerator.prototype.choice = function (arrayOrString) {
              // 233
              var index = Math.floor(this.fraction() * arrayOrString.length); // 234
              if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1);else return arrayOrString[index];
            }; // instantiate RNG.  Heuristically collect entropy from various sources when a                                // 239
            // cryptographic PRNG isn't available.                                                                           // 242
            // client sources                                                                                                // 244
            //
            //
            var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
            var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
            var agent = typeof navigator !== 'undefined' && navigator.userAgent || ""; // 263
            //
            function createAleaGeneratorWithGeneratedSeed() {
              // 265
              return new RandomGenerator(RandomGenerator.Type.ALEA, { // 266
                seeds: [new Date(), height, width, agent, Math.random()] // 268
              }); // 268
            } // 269
            //
            ; // 269
            //
            if (Meteor.isServer) {
              // 271
              Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO); // 272
            } else {
              // 273
              if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) {
                // 274
                Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO); // 276
              } else {
                // 277
                // On IE 10 and below, there's no browser crypto API                                                         // 278
                // available. Fall back to Alea                                                                              // 279
                //                                                                                                           // 280
                // XXX looks like at the moment, we use Alea in IE 11 as well,                                               // 281
                // which has `window.msCrypto` instead of `window.crypto`.                                                   // 282
                Random = createAleaGeneratorWithGeneratedSeed(); // 283
              } // 284
            } // Create a non-cryptographically secure PRNG with a given seed (using                                         // 285
            // the Alea algorithm)                                                                                           // 288
            //
            //
            Random.createWithSeeds = function () {
              // 289
              for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {
                // 289
                seeds[_key] = arguments[_key]; // 289
              } // 289
              //
              if (seeds.length === 0) {
                // 290
                throw new Error("No seeds were provided"); // 291
              } // 292
              //
              return new RandomGenerator(RandomGenerator.Type.ALEA, { // 293
                seeds: seeds // 293
              }); // 293
            }; // Used like `Random`, but much faster and not cryptographically                                              // 294
            // secure                                                                                                        // 297
            //
            //
            Random.insecure = createAleaGeneratorWithGeneratedSeed(); // 298
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "deprecated.js": function () {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/random/deprecated.js                                                                                 //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Before this package existed, we used to use this Meteor.uuid()                                                // 1
            // implementing the RFC 4122 v4 UUID. It is no longer documented                                                 // 2
            // and will go away.                                                                                             // 3
            // XXX COMPAT WITH 0.5.6                                                                                         // 4
            Meteor.uuid = function () {
              // 5
              var HEX_DIGITS = "0123456789abcdef"; // 6
              var s = []; // 7
              //
              for (var i = 0; i < 36; i++) {
                // 8
                s[i] = Random.choice(HEX_DIGITS); // 9
              } // 10
              //
              s[14] = "4"; // 11
              s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1); // 12
              s[8] = s[13] = s[18] = s[23] = "-"; // 13
              var uuid = s.join(""); // 15
              return uuid; // 16
            }; // 17
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require2("./node_modules/meteor/random/random.js");
  _require2("./node_modules/meteor/random/deprecated.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.random = {}, {
    Random: Random
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var Tracker, Deps;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                    //
    // packages/tracker/tracker.js                                                                                        //
    //                                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /////////////////////////////////////////////////////                                                                 // 1
    // Package docs at http://docs.meteor.com/#tracker //                                                                 // 2
    /////////////////////////////////////////////////////                                                                 // 3
    // 4
    /**                                                                                                                   // 5
     * @namespace Tracker                                                                                                 // 6
     * @summary The namespace for Tracker-related methods.                                                                // 7
     */ // 8
    Tracker = {}; // 9
    // 10
    // http://docs.meteor.com/#tracker_active                                                                             // 11
    // 12
    /**                                                                                                                   // 13
     * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
     * @locus Client                                                                                                      // 15
     * @type {Boolean}                                                                                                    // 16
     */ // 17
    Tracker.active = false; // 18
    // 19
    // http://docs.meteor.com/#tracker_currentcomputation                                                                 // 20
    // 21
    /**                                                                                                                   // 22
     * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
     * @locus Client                                                                                                      // 24
     * @type {Tracker.Computation}                                                                                        // 25
     */ // 26
    Tracker.currentComputation = null; // 27
    // 28
    var setCurrentComputation = function (c) {
      // 29
      Tracker.currentComputation = c; // 30
      Tracker.active = !!c; // 31
    }; // 32
    // 33
    var _debugFunc = function () {
      // 34
      // We want this code to work without Meteor, and also without                                                       // 35
      // "console" (which is technically non-standard and may be missing                                                  // 36
      // on some browser we come across, like it was on IE 7).                                                            // 37
      //                                                                                                                  // 38
      // Lazy evaluation because `Meteor` does not exist right away.(??)                                                  // 39
      return typeof Meteor !== "undefined" ? Meteor._debug : // 40
      typeof console !== "undefined" && console.error ? // 41
      function () {
        console.error.apply(console, arguments);
      } : // 42
      function () {}; // 43
    }; // 44
    // 45
    var _maybeSuppressMoreLogs = function (messagesLength) {
      // 46
      // Sometimes when running tests, we intentionally suppress logs on expected                                         // 47
      // printed errors. Since the current implementation of _throwOrLog can log                                          // 48
      // multiple separate log messages, suppress all of them if at least one suppress                                    // 49
      // is expected as we still want them to count as one.                                                               // 50
      if (typeof Meteor !== "undefined") {
        // 51
        if (Meteor._suppressed_log_expected()) {
          // 52
          Meteor._suppress_log(messagesLength - 1); // 53
        } // 54
      } // 55
    }; // 56
    // 57
    var _throwOrLog = function (from, e) {
      // 58
      if (throwFirstError) {
        // 59
        throw e; // 60
      } else {
        // 61
        var printArgs = ["Exception from Tracker " + from + " function:"]; // 62
        if (e.stack && e.message && e.name) {
          // 63
          var idx = e.stack.indexOf(e.message); // 64
          if (idx < 0 || idx > e.name.length + 2) {
            // check for "Error: "                                                // 65
            // message is not part of the stack                                                                           // 66
            var message = e.name + ": " + e.message; // 67
            printArgs.push(message); // 68
          } // 69
        } // 70
        printArgs.push(e.stack); // 71
        _maybeSuppressMoreLogs(printArgs.length); // 72
        // 73
        for (var i = 0; i < printArgs.length; i++) {
          // 74
          _debugFunc()(printArgs[i]); // 75
        } // 76
      } // 77
    }; // 78
    // 79
    // Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`                                                  // 80
    // block if we are running on the server. On the client, returns the                                                  // 81
    // original function (since `Meteor._noYieldsAllowed` is a                                                            // 82
    // no-op). This has the benefit of not adding an unnecessary stack                                                    // 83
    // frame on the client.                                                                                               // 84
    var withNoYieldsAllowed = function (f) {
      // 85
      if (typeof Meteor === 'undefined' || Meteor.isClient) {
        // 86
        return f; // 87
      } else {
        // 88
        return function () {
          // 89
          var args = arguments; // 90
          Meteor._noYieldsAllowed(function () {
            // 91
            f.apply(null, args); // 92
          }); // 93
        }; // 94
      } // 95
    }; // 96
    // 97
    var nextId = 1; // 98
    // computations whose callbacks we should call at flush time                                                          // 99
    var pendingComputations = []; // 100
    // `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now                                          // 101
    var willFlush = false; // 102
    // `true` if we are in Tracker.flush now                                                                              // 103
    var inFlush = false; // 104
    // `true` if we are computing a computation now, either first time                                                    // 105
    // or recompute.  This matches Tracker.active unless we are inside                                                    // 106
    // Tracker.nonreactive, which nullfies currentComputation even though                                                 // 107
    // an enclosing computation may still be running.                                                                     // 108
    var inCompute = false; // 109
    // `true` if the `_throwFirstError` option was passed in to the call                                                  // 110
    // to Tracker.flush that we are in. When set, throw rather than log the                                               // 111
    // first error encountered while flushing. Before throwing the error,                                                 // 112
    // finish flushing (from a finally block), logging any subsequent                                                     // 113
    // errors.                                                                                                            // 114
    var throwFirstError = false; // 115
    // 116
    var afterFlushCallbacks = []; // 117
    // 118
    var requireFlush = function () {
      // 119
      if (!willFlush) {
        // 120
        // We want this code to work without Meteor, see debugFunc above                                                  // 121
        if (typeof Meteor !== "undefined") // 122
          Meteor._setImmediate(Tracker._runFlush); // 123
        else // 124
          setTimeout(Tracker._runFlush, 0); // 125
        willFlush = true; // 126
      } // 127
    }; // 128
    // 129
    // Tracker.Computation constructor is visible but private                                                             // 130
    // (throws an error if you try to call it)                                                                            // 131
    var constructingComputation = false; // 132
    // 133
    //                                                                                                                    // 134
    // http://docs.meteor.com/#tracker_computation                                                                        // 135
    // 136
    /**                                                                                                                   // 137
     * @summary A Computation object represents code that is repeatedly rerun                                             // 138
     * in response to                                                                                                     // 139
     * reactive data changes. Computations don't have return values; they just                                            // 140
     * perform actions, such as rerendering a template on the screen. Computations                                        // 141
     * are created using Tracker.autorun. Use stop to prevent further rerunning of a                                      // 142
     * computation.                                                                                                       // 143
     * @instancename computation                                                                                          // 144
     */ // 145
    Tracker.Computation = function (f, parent, onError) {
      // 146
      if (!constructingComputation) // 147
        throw new Error( // 148
        "Tracker.Computation constructor is private; use Tracker.autorun"); // 149
      constructingComputation = false; // 150
      // 151
      var self = this; // 152
      // 153
      // http://docs.meteor.com/#computation_stopped                                                                      // 154
      // 155
      /**                                                                                                                 // 156
       * @summary True if this computation has been stopped.                                                              // 157
       * @locus Client                                                                                                    // 158
       * @memberOf Tracker.Computation                                                                                    // 159
       * @instance                                                                                                        // 160
       * @name  stopped                                                                                                   // 161
       */ // 162
      self.stopped = false; // 163
      // 164
      // http://docs.meteor.com/#computation_invalidated                                                                  // 165
      // 166
      /**                                                                                                                 // 167
       * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.           // 168
       * @locus Client                                                                                                    // 169
       * @memberOf Tracker.Computation                                                                                    // 170
       * @instance                                                                                                        // 171
       * @name  invalidated                                                                                               // 172
       * @type {Boolean}                                                                                                  // 173
       */ // 174
      self.invalidated = false; // 175
      // 176
      // http://docs.meteor.com/#computation_firstrun                                                                     // 177
      // 178
      /**                                                                                                                 // 179
       * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
       * @locus Client                                                                                                    // 181
       * @memberOf Tracker.Computation                                                                                    // 182
       * @instance                                                                                                        // 183
       * @name  firstRun                                                                                                  // 184
       * @type {Boolean}                                                                                                  // 185
       */ // 186
      self.firstRun = true; // 187
      // 188
      self._id = nextId++; // 189
      self._onInvalidateCallbacks = []; // 190
      self._onStopCallbacks = []; // 191
      // the plan is at some point to use the parent relation                                                             // 192
      // to constrain the order that computations are processed                                                           // 193
      self._parent = parent; // 194
      self._func = f; // 195
      self._onError = onError; // 196
      self._recomputing = false; // 197
      // 198
      var errored = true; // 199
      try {
        // 200
        self._compute(); // 201
        errored = false; // 202
      } finally {
        // 203
        self.firstRun = false; // 204
        if (errored) // 205
          self.stop(); // 206
      } // 207
    }; // 208
    // 209
    // http://docs.meteor.com/#computation_oninvalidate                                                                   // 210
    // 211
    /**                                                                                                                   // 212
     * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
     * @locus Client                                                                                                      // 214
     * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
     */ // 216
    Tracker.Computation.prototype.onInvalidate = function (f) {
      // 217
      var self = this; // 218
      // 219
      if (typeof f !== 'function') // 220
        throw new Error("onInvalidate requires a function"); // 221
      // 222
      if (self.invalidated) {
        // 223
        Tracker.nonreactive(function () {
          // 224
          withNoYieldsAllowed(f)(self); // 225
        }); // 226
      } else {
        // 227
        self._onInvalidateCallbacks.push(f); // 228
      } // 229
    }; // 230
    // 231
    /**                                                                                                                   // 232
     * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
     * @locus Client                                                                                                      // 234
     * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
     */ // 236
    Tracker.Computation.prototype.onStop = function (f) {
      // 237
      var self = this; // 238
      // 239
      if (typeof f !== 'function') // 240
        throw new Error("onStop requires a function"); // 241
      // 242
      if (self.stopped) {
        // 243
        Tracker.nonreactive(function () {
          // 244
          withNoYieldsAllowed(f)(self); // 245
        }); // 246
      } else {
        // 247
        self._onStopCallbacks.push(f); // 248
      } // 249
    }; // 250
    // 251
    // http://docs.meteor.com/#computation_invalidate                                                                     // 252
    // 253
    /**                                                                                                                   // 254
     * @summary Invalidates this computation so that it will be rerun.                                                    // 255
     * @locus Client                                                                                                      // 256
     */ // 257
    Tracker.Computation.prototype.invalidate = function () {
      // 258
      var self = this; // 259
      if (!self.invalidated) {
        // 260
        // if we're currently in _recompute(), don't enqueue                                                              // 261
        // ourselves, since we'll rerun immediately anyway.                                                               // 262
        if (!self._recomputing && !self.stopped) {
          // 263
          requireFlush(); // 264
          pendingComputations.push(this); // 265
        } // 266
        // 267
        self.invalidated = true; // 268
        // 269
        // callbacks can't add callbacks, because                                                                         // 270
        // self.invalidated === true.                                                                                     // 271
        for (var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {
          // 272
          Tracker.nonreactive(function () {
            // 273
            withNoYieldsAllowed(f)(self); // 274
          }); // 275
        } // 276
        self._onInvalidateCallbacks = []; // 277
      } // 278
    }; // 279
    // 280
    // http://docs.meteor.com/#computation_stop                                                                           // 281
    // 282
    /**                                                                                                                   // 283
     * @summary Prevents this computation from rerunning.                                                                 // 284
     * @locus Client                                                                                                      // 285
     */ // 286
    Tracker.Computation.prototype.stop = function () {
      // 287
      var self = this; // 288
      // 289
      if (!self.stopped) {
        // 290
        self.stopped = true; // 291
        self.invalidate(); // 292
        for (var i = 0, f; f = self._onStopCallbacks[i]; i++) {
          // 293
          Tracker.nonreactive(function () {
            // 294
            withNoYieldsAllowed(f)(self); // 295
          }); // 296
        } // 297
        self._onStopCallbacks = []; // 298
      } // 299
    }; // 300
    // 301
    Tracker.Computation.prototype._compute = function () {
      // 302
      var self = this; // 303
      self.invalidated = false; // 304
      // 305
      var previous = Tracker.currentComputation; // 306
      setCurrentComputation(self); // 307
      var previousInCompute = inCompute; // 308
      inCompute = true; // 309
      try {
        // 310
        withNoYieldsAllowed(self._func)(self); // 311
      } finally {
        // 312
        setCurrentComputation(previous); // 313
        inCompute = previousInCompute; // 314
      } // 315
    }; // 316
    // 317
    Tracker.Computation.prototype._needsRecompute = function () {
      // 318
      var self = this; // 319
      return self.invalidated && !self.stopped; // 320
    }; // 321
    // 322
    Tracker.Computation.prototype._recompute = function () {
      // 323
      var self = this; // 324
      // 325
      self._recomputing = true; // 326
      try {
        // 327
        if (self._needsRecompute()) {
          // 328
          try {
            // 329
            self._compute(); // 330
          } catch (e) {
            // 331
            if (self._onError) {
              // 332
              self._onError(e); // 333
            } else {
              // 334
              _throwOrLog("recompute", e); // 335
            } // 336
          } // 337
        } // 338
      } finally {
        // 339
        self._recomputing = false; // 340
      } // 341
    }; // 342
    // 343
    /**                                                                                                                   // 344
     * @summary Process the reactive updates for this computation immediately                                             // 345
     * and ensure that the computation is rerun. The computation is rerun only                                            // 346
     * if it is invalidated.                                                                                              // 347
     * @locus Client                                                                                                      // 348
     */ // 349
    Tracker.Computation.prototype.flush = function () {
      // 350
      var self = this; // 351
      // 352
      if (self._recomputing) // 353
        return; // 354
      // 355
      self._recompute(); // 356
    }; // 357
    // 358
    /**                                                                                                                   // 359
     * @summary Causes the function inside this computation to run and                                                    // 360
     * synchronously process all reactive updtes.                                                                         // 361
     * @locus Client                                                                                                      // 362
     */ // 363
    Tracker.Computation.prototype.run = function () {
      // 364
      var self = this; // 365
      self.invalidate(); // 366
      self.flush(); // 367
    }; // 368
    // 369
    //                                                                                                                    // 370
    // http://docs.meteor.com/#tracker_dependency                                                                         // 371
    // 372
    /**                                                                                                                   // 373
     * @summary A Dependency represents an atomic unit of reactive data that a                                            // 374
     * computation might depend on. Reactive data sources such as Session or                                              // 375
     * Minimongo internally create different Dependency objects for different                                             // 376
     * pieces of data, each of which may be depended on by multiple computations.                                         // 377
     * When the data changes, the computations are invalidated.                                                           // 378
     * @class                                                                                                             // 379
     * @instanceName dependency                                                                                           // 380
     */ // 381
    Tracker.Dependency = function () {
      // 382
      this._dependentsById = {}; // 383
    }; // 384
    // 385
    // http://docs.meteor.com/#dependency_depend                                                                          // 386
    //                                                                                                                    // 387
    // Adds `computation` to this set if it is not already                                                                // 388
    // present.  Returns true if `computation` is a new member of the set.                                                // 389
    // If no argument, defaults to currentComputation, or does nothing                                                    // 390
    // if there is no currentComputation.                                                                                 // 391
    // 392
    /**                                                                                                                   // 393
     * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                                                                                                                          // 395
    If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.     // 396
                                                                                                                          // 397
    Returns true if the computation is a new dependent of `dependency` rather than an existing one.                       // 398
     * @locus Client                                                                                                      // 399
     * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
     * @returns {Boolean}                                                                                                 // 401
     */ // 402
    Tracker.Dependency.prototype.depend = function (computation) {
      // 403
      if (!computation) {
        // 404
        if (!Tracker.active) // 405
          return false; // 406
        // 407
        computation = Tracker.currentComputation; // 408
      } // 409
      var self = this; // 410
      var id = computation._id; // 411
      if (!(id in self._dependentsById)) {
        // 412
        self._dependentsById[id] = computation; // 413
        computation.onInvalidate(function () {
          // 414
          delete self._dependentsById[id]; // 415
        }); // 416
        return true; // 417
      } // 418
      return false; // 419
    }; // 420
    // 421
    // http://docs.meteor.com/#dependency_changed                                                                         // 422
    // 423
    /**                                                                                                                   // 424
     * @summary Invalidate all dependent computations immediately and remove them as dependents.                          // 425
     * @locus Client                                                                                                      // 426
     */ // 427
    Tracker.Dependency.prototype.changed = function () {
      // 428
      var self = this; // 429
      for (var id in self._dependentsById) // 430
      self._dependentsById[id].invalidate(); // 431
    }; // 432
    // 433
    // http://docs.meteor.com/#dependency_hasdependents                                                                   // 434
    // 435
    /**                                                                                                                   // 436
     * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
     * @locus Client                                                                                                      // 438
     * @returns {Boolean}                                                                                                 // 439
     */ // 440
    Tracker.Dependency.prototype.hasDependents = function () {
      // 441
      var self = this; // 442
      for (var id in self._dependentsById) // 443
      return true; // 444
      return false; // 445
    }; // 446
    // 447
    // http://docs.meteor.com/#tracker_flush                                                                              // 448
    // 449
    /**                                                                                                                   // 450
     * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.          // 451
     * @locus Client                                                                                                      // 452
     */ // 453
    Tracker.flush = function (options) {
      // 454
      Tracker._runFlush({ finishSynchronously: true, // 455
        throwFirstError: options && options._throwFirstError }); // 456
    }; // 457
    // 458
    /**                                                                                                                   // 459
     * @summary True if we are computing a computation now, either first time or recompute.  This matches Tracker.active unless we are inside Tracker.nonreactive, which nullfies currentComputation even though an enclosing computation may still be running.
     * @locus Client                                                                                                      // 461
     * @returns {Boolean}                                                                                                 // 462
     */ // 463
    Tracker.inFlush = function () {
      // 464
      return inFlush; // 465
    }; // 466
    // 467
    // Run all pending computations and afterFlush callbacks.  If we were not called                                      // 468
    // directly via Tracker.flush, this may return before they're all done to allow                                       // 469
    // the event loop to run a little before continuing.                                                                  // 470
    Tracker._runFlush = function (options) {
      // 471
      // XXX What part of the comment below is still true? (We no longer                                                  // 472
      // have Spark)                                                                                                      // 473
      //                                                                                                                  // 474
      // Nested flush could plausibly happen if, say, a flush causes                                                      // 475
      // DOM mutation, which causes a "blur" event, which runs an                                                         // 476
      // app event handler that calls Tracker.flush.  At the moment                                                       // 477
      // Spark blocks event handlers during DOM mutation anyway,                                                          // 478
      // because the LiveRange tree isn't valid.  And we don't have                                                       // 479
      // any useful notion of a nested flush.                                                                             // 480
      //                                                                                                                  // 481
      // https://app.asana.com/0/159908330244/385138233856                                                                // 482
      if (Tracker.inFlush()) // 483
        throw new Error("Can't call Tracker.flush while flushing"); // 484
      // 485
      if (inCompute) // 486
        throw new Error("Can't flush inside Tracker.autorun"); // 487
      // 488
      options = options || {}; // 489
      // 490
      inFlush = true; // 491
      willFlush = true; // 492
      throwFirstError = !!options.throwFirstError; // 493
      // 494
      var recomputedCount = 0; // 495
      var finishedTry = false; // 496
      try {
        // 497
        while (pendingComputations.length || // 498
        afterFlushCallbacks.length) {
          // 499
          // 500
          // recompute all pending computations                                                                           // 501
          while (pendingComputations.length) {
            // 502
            var comp = pendingComputations.shift(); // 503
            comp._recompute(); // 504
            if (comp._needsRecompute()) {
              // 505
              pendingComputations.unshift(comp); // 506
            } // 507
            // 508
            if (!options.finishSynchronously && ++recomputedCount > 1000) {
              // 509
              finishedTry = true; // 510
              return; // 511
            } // 512
          } // 513
          // 514
          if (afterFlushCallbacks.length) {
            // 515
            // call one afterFlush callback, which may                                                                    // 516
            // invalidate more computations                                                                               // 517
            var func = afterFlushCallbacks.shift(); // 518
            try {
              // 519
              func(); // 520
            } catch (e) {
              // 521
              _throwOrLog("afterFlush", e); // 522
            } // 523
          } // 524
        } // 525
        finishedTry = true; // 526
      } finally {
        // 527
        if (!finishedTry) {
          // 528
          // we're erroring due to throwFirstError being true.                                                            // 529
          inFlush = false; // needed before calling `Tracker.flush()` again                                               // 530
          // finish flushing                                                                                              // 531
          Tracker._runFlush({ // 532
            finishSynchronously: options.finishSynchronously, // 533
            throwFirstError: false // 534
          }); // 535
        } // 536
        willFlush = false; // 537
        inFlush = false; // 538
        if (pendingComputations.length || afterFlushCallbacks.length) {
          // 539
          // We're yielding because we ran a bunch of computations and we aren't                                          // 540
          // required to finish synchronously, so we'd like to give the event loop a                                      // 541
          // chance. We should flush again soon.                                                                          // 542
          if (options.finishSynchronously) {
            // 543
            throw new Error("still have more to do?"); // shouldn't happen                                               // 544
          } // 545
          setTimeout(requireFlush, 10); // 546
        } // 547
      } // 548
    }; // 549
    // 550
    // http://docs.meteor.com/#tracker_autorun                                                                            // 551
    //                                                                                                                    // 552
    // Run f(). Record its dependencies. Rerun it whenever the                                                            // 553
    // dependencies change.                                                                                               // 554
    //                                                                                                                    // 555
    // Returns a new Computation, which is also passed to f.                                                              // 556
    //                                                                                                                    // 557
    // Links the computation to the current computation                                                                   // 558
    // so that it is stopped if the current computation is invalidated.                                                   // 559
    // 560
    /**                                                                                                                   // 561
     * @callback Tracker.ComputationFunction                                                                              // 562
     * @param {Tracker.Computation}                                                                                       // 563
     */ // 564
    /**                                                                                                                   // 565
     * @summary Run a function now and rerun it later whenever its dependencies                                           // 566
     * change. Returns a Computation object that can be used to stop or observe the                                       // 567
     * rerunning.                                                                                                         // 568
     * @locus Client                                                                                                      // 569
     * @param {Tracker.ComputationFunction} runFunc The function to run. It receives                                      // 570
     * one argument: the Computation object that will be returned.                                                        // 571
     * @param {Object} [options]                                                                                          // 572
     * @param {Function} options.onError Optional. The function to run when an error                                      // 573
     * happens in the Computation. The only argument it receives is the Error                                             // 574
     * thrown. Defaults to the error being logged to the console.                                                         // 575
     * @returns {Tracker.Computation}                                                                                     // 576
     */ // 577
    Tracker.autorun = function (f, options) {
      // 578
      if (typeof f !== 'function') // 579
        throw new Error('Tracker.autorun requires a function argument'); // 580
      // 581
      options = options || {}; // 582
      // 583
      constructingComputation = true; // 584
      var c = new Tracker.Computation( // 585
      f, Tracker.currentComputation, options.onError); // 586
      // 587
      if (Tracker.active) // 588
        Tracker.onInvalidate(function () {
          // 589
          c.stop(); // 590
        }); // 591
      // 592
      return c; // 593
    }; // 594
    // 595
    // http://docs.meteor.com/#tracker_nonreactive                                                                        // 596
    //                                                                                                                    // 597
    // Run `f` with no current computation, returning the return value                                                    // 598
    // of `f`.  Used to turn off reactivity for the duration of `f`,                                                      // 599
    // so that reactive data sources accessed by `f` will not result in any                                               // 600
    // computations being invalidated.                                                                                    // 601
    // 602
    /**                                                                                                                   // 603
     * @summary Run a function without tracking dependencies.                                                             // 604
     * @locus Client                                                                                                      // 605
     * @param {Function} func A function to call immediately.                                                             // 606
     */ // 607
    Tracker.nonreactive = function (f) {
      // 608
      var previous = Tracker.currentComputation; // 609
      setCurrentComputation(null); // 610
      try {
        // 611
        return f(); // 612
      } finally {
        // 613
        setCurrentComputation(previous); // 614
      } // 615
    }; // 616
    // 617
    // http://docs.meteor.com/#tracker_oninvalidate                                                                       // 618
    // 619
    /**                                                                                                                   // 620
     * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
     * @locus Client                                                                                                      // 622
     * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
     */ // 624
    Tracker.onInvalidate = function (f) {
      // 625
      if (!Tracker.active) // 626
        throw new Error("Tracker.onInvalidate requires a currentComputation"); // 627
      // 628
      Tracker.currentComputation.onInvalidate(f); // 629
    }; // 630
    // 631
    // http://docs.meteor.com/#tracker_afterflush                                                                         // 632
    // 633
    /**                                                                                                                   // 634
     * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
     * @locus Client                                                                                                      // 636
     * @param {Function} callback A function to call at flush time.                                                       // 637
     */ // 638
    Tracker.afterFlush = function (f) {
      // 639
      afterFlushCallbacks.push(f); // 640
      requireFlush(); // 641
    }; // 642
    // 643
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                    //
    // packages/tracker/deprecated.js                                                                                     //
    //                                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Deprecated functions.                                                                                              // 1
    // 2
    // These functions used to be on the Meteor object (and worked slightly                                               // 3
    // differently).                                                                                                      // 4
    // XXX COMPAT WITH 0.5.7                                                                                              // 5
    Meteor.flush = Tracker.flush; // 6
    Meteor.autorun = Tracker.autorun; // 7
    // 8
    // We used to require a special "autosubscribe" call to reactively subscribe to                                       // 9
    // things. Now, it works with autorun.                                                                                // 10
    // XXX COMPAT WITH 0.5.4                                                                                              // 11
    Meteor.autosubscribe = Tracker.autorun; // 12
    // 13
    // This Tracker API briefly existed in 0.5.8 and 0.5.9                                                                // 14
    // XXX COMPAT WITH 0.5.9                                                                                              // 15
    Tracker.depend = function (d) {
      // 16
      return d.depend(); // 17
    }; // 18
    // 19
    Deps = Tracker; // 20
    // 21
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.tracker = {}, {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var Retry;

  (function () {

    /////////////////////////////////////////////////////////////////////////////
    //                                                                         //
    // packages/retry/retry.js                                                 //
    //                                                                         //
    /////////////////////////////////////////////////////////////////////////////
    //
    // Retry logic with an exponential backoff.                                // 1
    //                                                                         // 2
    // options:                                                                // 3
    //  baseTimeout: time for initial reconnect attempt (ms).                  // 4
    //  exponent: exponential factor to increase timeout each attempt.         // 5
    //  maxTimeout: maximum time between retries (ms).                         // 6
    //  minCount: how many times to reconnect "instantly".                     // 7
    //  minTimeout: time to wait for the first `minCount` retries (ms).        // 8
    //  fuzz: factor to randomize retry times by (to avoid retry storms).      // 9
    // 10
    Retry = function (options) {
      // 11
      var self = this; // 12
      _.extend(self, _.defaults(_.clone(options || {}), { // 13
        baseTimeout: 1000, // 1 second                                         // 14
        exponent: 2.2, // 15
        // The default is high-ish to ensure a server can recover from a       // 16
        // failure caused by load.                                             // 17
        maxTimeout: 5 * 60000, // 5 minutes                                    // 18
        minTimeout: 10, // 19
        minCount: 2, // 20
        fuzz: 0.5 // +- 25%                                                    // 21
      })); // 22
      self.retryTimer = null; // 23
    }; // 24
    // 25
    _.extend(Retry.prototype, { // 26
      // 27
      // Reset a pending retry, if any.                                        // 28
      clear: function () {
        // 29
        var self = this; // 30
        if (self.retryTimer) // 31
          clearTimeout(self.retryTimer); // 32
        self.retryTimer = null; // 33
      }, // 34
      // 35
      // Calculate how long to wait in milliseconds to retry, based on the     // 36
      // `count` of which retry this is.                                       // 37
      _timeout: function (count) {
        // 38
        var self = this; // 39
        // 40
        if (count < self.minCount) // 41
          return self.minTimeout; // 42
        // 43
        var timeout = Math.min( // 44
        self.maxTimeout, // 45
        self.baseTimeout * Math.pow(self.exponent, count)); // 46
        // fuzz the timeout randomly, to avoid reconnect storms when a         // 47
        // server goes down.                                                   // 48
        timeout = timeout * (Random.fraction() * self.fuzz + ( // 49
        1 - self.fuzz / 2)); // 50
        return timeout; // 51
      }, // 52
      // 53
      // Call `fn` after a delay, based on the `count` of which retry this is.
      retryLater: function (count, fn) {
        // 55
        var self = this; // 56
        var timeout = self._timeout(count); // 57
        if (self.retryTimer) // 58
          clearTimeout(self.retryTimer); // 59
        self.retryTimer = Meteor.setTimeout(fn, timeout); // 60
        return timeout; // 61
      } // 62
      // 63
    }); // 64
    // 65
    /////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.retry = {}, {
    Retry: Retry
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var IdMap;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////
    //                                                                            //
    // packages/id-map/id-map.js                                                  //
    //                                                                            //
    ////////////////////////////////////////////////////////////////////////////////
    //
    IdMap = function (idStringify, idParse) {
      // 1
      var self = this; // 2
      self._map = {}; // 3
      self._idStringify = idStringify || JSON.stringify; // 4
      self._idParse = idParse || JSON.parse; // 5
    }; // 6
    // 7
    // Some of these methods are designed to match methods on OrderedDict, since  // 8
    // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
    // (Conceivably, this should be replaced with "UnorderedDict" with a specific
    // set of methods that overlap between the two.)                              // 11
    // 12
    _.extend(IdMap.prototype, { // 13
      get: function (id) {
        // 14
        var self = this; // 15
        var key = self._idStringify(id); // 16
        return self._map[key]; // 17
      }, // 18
      set: function (id, value) {
        // 19
        var self = this; // 20
        var key = self._idStringify(id); // 21
        self._map[key] = value; // 22
      }, // 23
      remove: function (id) {
        // 24
        var self = this; // 25
        var key = self._idStringify(id); // 26
        delete self._map[key]; // 27
      }, // 28
      has: function (id) {
        // 29
        var self = this; // 30
        var key = self._idStringify(id); // 31
        return _.has(self._map, key); // 32
      }, // 33
      empty: function () {
        // 34
        var self = this; // 35
        return _.isEmpty(self._map); // 36
      }, // 37
      clear: function () {
        // 38
        var self = this; // 39
        self._map = {}; // 40
      }, // 41
      // Iterates over the items in the map. Return `false` to break the loop.    // 42
      forEach: function (iterator) {
        // 43
        var self = this; // 44
        // don't use _.each, because we can't break out of it.                    // 45
        var keys = _.keys(self._map); // 46
        for (var i = 0; i < keys.length; i++) {
          // 47
          var breakIfFalse = iterator.call(null, self._map[keys[i]], // 48
          self._idParse(keys[i])); // 49
          if (breakIfFalse === false) // 50
            return; // 51
        } // 52
      }, // 53
      size: function () {
        // 54
        var self = this; // 55
        return _.size(self._map); // 56
      }, // 57
      setDefault: function (id, def) {
        // 58
        var self = this; // 59
        var key = self._idStringify(id); // 60
        if (_.has(self._map, key)) // 61
          return self._map[key]; // 62
        self._map[key] = def; // 63
        return def; // 64
      }, // 65
      // Assumes that values are EJSON-cloneable, and that we don't need to clone
      // IDs (ie, that nobody is going to mutate an ObjectId).                    // 67
      clone: function () {
        // 68
        var self = this; // 69
        var clone = new IdMap(self._idStringify, self._idParse); // 70
        self.forEach(function (value, id) {
          // 71
          clone.set(id, EJSON.clone(value)); // 72
        }); // 73
        return clone; // 74
      } // 75
    }); // 76
    // 77
    // 78
    ////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['id-map'] = {}, {
    IdMap: IdMap
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;

  /* Package-scope variables */
  var Hook;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////
    //                                                                                //
    // packages/callback-hook/hook.js                                                 //
    //                                                                                //
    ////////////////////////////////////////////////////////////////////////////////////
    //
    // XXX This pattern is under development. Do not add more callsites               // 1
    // using this package for now. See:                                               // 2
    // https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f                   // 3
    //                                                                                // 4
    // Encapsulates the pattern of registering callbacks on a hook.                   // 5
    //                                                                                // 6
    // The `each` method of the hook calls its iterator function argument             // 7
    // with each registered callback.  This allows the hook to                        // 8
    // conditionally decide not to call the callback (if, for example, the            // 9
    // observed object has been closed or terminated).                                // 10
    //                                                                                // 11
    // By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be
    // called with the Meteor environment of the calling code that                    // 13
    // registered the callback. Override by passing { bindEnvironment: false }        // 14
    // to the constructor.                                                            // 15
    //                                                                                // 16
    // Registering a callback returns an object with a single `stop`                  // 17
    // method which unregisters the callback.                                         // 18
    //                                                                                // 19
    // The code is careful to allow a callback to be safely unregistered              // 20
    // while the callbacks are being iterated over.                                   // 21
    //                                                                                // 22
    // If the hook is configured with the `exceptionHandler` option, the              // 23
    // handler will be called if a called callback throws an exception.               // 24
    // By default (if the exception handler doesn't itself throw an                   // 25
    // exception, or if the iterator function doesn't return a falsy value            // 26
    // to terminate the calling of callbacks), the remaining callbacks                // 27
    // will still be called.                                                          // 28
    //                                                                                // 29
    // Alternatively, the `debugPrintExceptions` option can be specified              // 30
    // as string describing the callback.  On an exception the string and             // 31
    // the exception will be printed to the console log with                          // 32
    // `Meteor._debug`, and the exception otherwise ignored.                          // 33
    //                                                                                // 34
    // If an exception handler isn't specified, exceptions thrown in the              // 35
    // callback will propagate up to the iterator function, and will                  // 36
    // terminate calling the remaining callbacks if not caught.                       // 37
    // 38
    Hook = function (options) {
      // 39
      var self = this; // 40
      options = options || {}; // 41
      self.nextCallbackId = 0; // 42
      self.callbacks = {}; // 43
      // Whether to wrap callbacks with Meteor.bindEnvironment                        // 44
      self.bindEnvironment = true; // 45
      if (options.bindEnvironment === false) // 46
        self.bindEnvironment = false; // 47
      // 48
      if (options.exceptionHandler) // 49
        self.exceptionHandler = options.exceptionHandler; // 50
      else if (options.debugPrintExceptions) {
          // 51
          if (!_.isString(options.debugPrintExceptions)) // 52
            throw new Error("Hook option debugPrintExceptions should be a string"); // 53
          self.exceptionHandler = options.debugPrintExceptions; // 54
        } // 55
    }; // 56
    // 57
    _.extend(Hook.prototype, { // 58
      register: function (callback) {
        // 59
        var self = this; // 60
        var exceptionHandler = self.exceptionHandler || function (exception) {
          // 61
          // Note: this relies on the undocumented fact that if bindEnvironment's     // 62
          // onException throws, and you are invoking the callback either in the      // 63
          // browser or from within a Fiber in Node, the exception is propagated.     // 64
          throw exception; // 65
        }; // 66
        // 67
        if (self.bindEnvironment) {
          // 68
          callback = Meteor.bindEnvironment(callback, exceptionHandler); // 69
        } else {
          // 70
          callback = dontBindEnvironment(callback, exceptionHandler); // 71
        } // 72
        // 73
        var id = self.nextCallbackId++; // 74
        self.callbacks[id] = callback; // 75
        // 76
        return { // 77
          stop: function () {
            // 78
            delete self.callbacks[id]; // 79
          } // 80
        }; // 81
      }, // 82
      // 83
      // For each registered callback, call the passed iterator function              // 84
      // with the callback.                                                           // 85
      //                                                                              // 86
      // The iterator function can choose whether or not to call the                  // 87
      // callback.  (For example, it might not call the callback if the               // 88
      // observed object has been closed or terminated).                              // 89
      //                                                                              // 90
      // The iteration is stopped if the iterator function returns a falsy            // 91
      // value or throws an exception.                                                // 92
      //                                                                              // 93
      each: function (iterator) {
        // 94
        var self = this; // 95
        // 96
        // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't    // 97
        // run them to completion (and exceptions thrown from onException are not     // 98
        // propagated), so we need to be in a Fiber.                                  // 99
        Meteor._nodeCodeMustBeInFiber(); // 100
        // 101
        var ids = _.keys(self.callbacks); // 102
        for (var i = 0; i < ids.length; ++i) {
          // 103
          var id = ids[i]; // 104
          // check to see if the callback was removed during iteration                // 105
          if (_.has(self.callbacks, id)) {
            // 106
            var callback = self.callbacks[id]; // 107
            // 108
            if (!iterator(callback)) // 109
              break; // 110
          } // 111
        } // 112
      } // 113
    }); // 114
    // 115
    // Copied from Meteor.bindEnvironment and removed all the env stuff.              // 116
    var dontBindEnvironment = function (func, onException, _this) {
      // 117
      if (!onException || typeof onException === 'string') {
        // 118
        var description = onException || "callback of async function"; // 119
        onException = function (error) {
          // 120
          Meteor._debug( // 121
          "Exception in " + description + ":", // 122
          error && error.stack || error // 123
          ); // 124
        }; // 125
      } // 126
      // 127
      return function () /* arguments */{
        // 128
        var args = _.toArray(arguments); // 129
        // 130
        var runAndHandleExceptions = function () {
          // 131
          try {
            // 132
            var ret = func.apply(_this, args); // 133
          } catch (e) {
            // 134
            onException(e); // 135
          } // 136
          return ret; // 137
        }; // 138
        // 139
        return runAndHandleExceptions(); // 140
      }; // 141
    }; // 142
    // 143
    ////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['callback-hook'] = {}, {
    Hook: Hook
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var _ = Package.underscore._;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;

  /* Package-scope variables */
  var DDPCommon;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/namespace.js                                                                  //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                                  // 1
     * @namespace DDPCommon                                                                              // 2
     * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3
     * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4
     * of a ddp client for both client AND server; and the ddp server is the                             // 5
     * implementation of the livedata server and stream server. Common                                   // 6
     * functionality shared between both can be shared under this namespace                              // 7
     */ // 8
    DDPCommon = {}; // 9
    // 10
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/heartbeat.js                                                                  //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Heartbeat options:                                                                                // 1
    //   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2
    //   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3
    //     received, in milliseconds.                                                                    // 4
    //   sendPing: function to call to send a ping on the connection.                                    // 5
    //   onTimeout: function to call to close the connection.                                            // 6
    // 7
    DDPCommon.Heartbeat = function (options) {
      // 8
      var self = this; // 9
      // 10
      self.heartbeatInterval = options.heartbeatInterval; // 11
      self.heartbeatTimeout = options.heartbeatTimeout; // 12
      self._sendPing = options.sendPing; // 13
      self._onTimeout = options.onTimeout; // 14
      self._seenPacket = false; // 15
      // 16
      self._heartbeatIntervalHandle = null; // 17
      self._heartbeatTimeoutHandle = null; // 18
    }; // 19
    // 20
    _.extend(DDPCommon.Heartbeat.prototype, { // 21
      stop: function () {
        // 22
        var self = this; // 23
        self._clearHeartbeatIntervalTimer(); // 24
        self._clearHeartbeatTimeoutTimer(); // 25
      }, // 26
      // 27
      start: function () {
        // 28
        var self = this; // 29
        self.stop(); // 30
        self._startHeartbeatIntervalTimer(); // 31
      }, // 32
      // 33
      _startHeartbeatIntervalTimer: function () {
        // 34
        var self = this; // 35
        self._heartbeatIntervalHandle = Meteor.setInterval( // 36
        _.bind(self._heartbeatIntervalFired, self), // 37
        self.heartbeatInterval // 38
        ); // 39
      }, // 40
      // 41
      _startHeartbeatTimeoutTimer: function () {
        // 42
        var self = this; // 43
        self._heartbeatTimeoutHandle = Meteor.setTimeout( // 44
        _.bind(self._heartbeatTimeoutFired, self), // 45
        self.heartbeatTimeout // 46
        ); // 47
      }, // 48
      // 49
      _clearHeartbeatIntervalTimer: function () {
        // 50
        var self = this; // 51
        if (self._heartbeatIntervalHandle) {
          // 52
          Meteor.clearInterval(self._heartbeatIntervalHandle); // 53
          self._heartbeatIntervalHandle = null; // 54
        } // 55
      }, // 56
      // 57
      _clearHeartbeatTimeoutTimer: function () {
        // 58
        var self = this; // 59
        if (self._heartbeatTimeoutHandle) {
          // 60
          Meteor.clearTimeout(self._heartbeatTimeoutHandle); // 61
          self._heartbeatTimeoutHandle = null; // 62
        } // 63
      }, // 64
      // 65
      // The heartbeat interval timer is fired when we should send a ping.                               // 66
      _heartbeatIntervalFired: function () {
        // 67
        var self = this; // 68
        // don't send ping if we've seen a packet since we last checked,                                 // 69
        // *or* if we have already sent a ping and are awaiting a timeout.                               // 70
        // That shouldn't happen, but it's possible if                                                   // 71
        // `self.heartbeatInterval` is smaller than                                                      // 72
        // `self.heartbeatTimeout`.                                                                      // 73
        if (!self._seenPacket && !self._heartbeatTimeoutHandle) {
          // 74
          self._sendPing(); // 75
          // Set up timeout, in case a pong doesn't arrive in time.                                      // 76
          self._startHeartbeatTimeoutTimer(); // 77
        } // 78
        self._seenPacket = false; // 79
      }, // 80
      // 81
      // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82
      // timed out waiting for the pong.                                                                 // 83
      _heartbeatTimeoutFired: function () {
        // 84
        var self = this; // 85
        self._heartbeatTimeoutHandle = null; // 86
        self._onTimeout(); // 87
      }, // 88
      // 89
      messageReceived: function () {
        // 90
        var self = this; // 91
        // Tell periodic checkin that we have seen a packet, and thus it                                 // 92
        // does not need to send a ping this cycle.                                                      // 93
        self._seenPacket = true; // 94
        // If we were waiting for a pong, we got it.                                                     // 95
        if (self._heartbeatTimeoutHandle) {
          // 96
          self._clearHeartbeatTimeoutTimer(); // 97
        } // 98
      } // 99
    }); // 100
    // 101
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/utils.js                                                                      //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1']; // 1
    // 2
    DDPCommon.parseDDP = function (stringMessage) {
      // 3
      try {
        // 4
        var msg = JSON.parse(stringMessage); // 5
      } catch (e) {
        // 6
        Meteor._debug("Discarding message with invalid JSON", stringMessage); // 7
        return null; // 8
      } // 9
      // DDP messages must be objects.                                                                   // 10
      if (msg === null || typeof msg !== 'object') {
        // 11
        Meteor._debug("Discarding non-object DDP message", stringMessage); // 12
        return null; // 13
      } // 14
      // 15
      // massage msg to get it into "abstract ddp" rather than "wire ddp" format.                        // 16
      // 17
      // switch between "cleared" rep of unsetting fields and "undefined"                                // 18
      // rep of same                                                                                     // 19
      if (_.has(msg, 'cleared')) {
        // 20
        if (!_.has(msg, 'fields')) // 21
          msg.fields = {}; // 22
        _.each(msg.cleared, function (clearKey) {
          // 23
          msg.fields[clearKey] = undefined; // 24
        }); // 25
        delete msg.cleared; // 26
      } // 27
      // 28
      _.each(['fields', 'params', 'result'], function (field) {
        // 29
        if (_.has(msg, field)) // 30
          msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]); // 31
      }); // 32
      // 33
      return msg; // 34
    }; // 35
    // 36
    DDPCommon.stringifyDDP = function (msg) {
      // 37
      var copy = EJSON.clone(msg); // 38
      // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39
      // and cleared' rep                                                                                // 40
      if (_.has(msg, 'fields')) {
        // 41
        var cleared = []; // 42
        _.each(msg.fields, function (value, key) {
          // 43
          if (value === undefined) {
            // 44
            cleared.push(key); // 45
            delete copy.fields[key]; // 46
          } // 47
        }); // 48
        if (!_.isEmpty(cleared)) // 49
          copy.cleared = cleared; // 50
        if (_.isEmpty(copy.fields)) // 51
          delete copy.fields; // 52
      } // 53
      // adjust types to basic                                                                           // 54
      _.each(['fields', 'params', 'result'], function (field) {
        // 55
        if (_.has(copy, field)) // 56
          copy[field] = EJSON._adjustTypesToJSONValue(copy[field]); // 57
      }); // 58
      if (msg.id && typeof msg.id !== 'string') {
        // 59
        throw new Error("Message id is not a string"); // 60
      } // 61
      return JSON.stringify(copy); // 62
    }; // 63
    // 64
    // 65
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/method_invocation.js                                                          //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Instance name is this because it is usually referred to as this inside a                          // 1
    // method definition                                                                                 // 2
    /**                                                                                                  // 3
     * @summary The state for a single invocation of a method, referenced by this                        // 4
     * inside a method definition.                                                                       // 5
     * @param {Object} options                                                                           // 6
     * @instanceName this                                                                                // 7
     * @showInstanceName true                                                                            // 8
     */ // 9
    DDPCommon.MethodInvocation = function (options) {
      // 10
      var self = this; // 11
      // 12
      // true if we're running not the actual method, but a stub (that is,                               // 13
      // if we're on a client (which may be a browser, or in the future a                                // 14
      // server connecting to another server) and presently running a                                    // 15
      // simulation of a server-side method for latency compensation                                     // 16
      // purposes). not currently true except in a client such as a browser,                             // 17
      // since there's usually no point in running stubs unless you have a                               // 18
      // zero-latency connection to the user.                                                            // 19
      // 20
      /**                                                                                                // 21
       * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 22
       * @locus Anywhere                                                                                 // 23
       * @name  isSimulation                                                                             // 24
       * @memberOf DDPCommon.MethodInvocation                                                            // 25
       * @instance                                                                                       // 26
       * @type {Boolean}                                                                                 // 27
       */ // 28
      this.isSimulation = options.isSimulation; // 29
      // 30
      // call this function to allow other method invocations (from the                                  // 31
      // same client) to continue running without waiting for this one to                                // 32
      // complete.                                                                                       // 33
      this._unblock = options.unblock || function () {}; // 34
      this._calledUnblock = false; // 35
      // 36
      // current user id                                                                                 // 37
      // 38
      /**                                                                                                // 39
       * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 40
       * @locus Anywhere                                                                                 // 41
       * @name  userId                                                                                   // 42
       * @memberOf DDPCommon.MethodInvocation                                                            // 43
       * @instance                                                                                       // 44
       */ // 45
      this.userId = options.userId; // 46
      // 47
      // sets current user id in all appropriate server contexts and                                     // 48
      // reruns subscriptions                                                                            // 49
      this._setUserId = options.setUserId || function () {}; // 50
      // 51
      // On the server, the connection this method call came in on.                                      // 52
      // 53
      /**                                                                                                // 54
       * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
       * @locus Server                                                                                   // 56
       * @name  connection                                                                               // 57
       * @memberOf DDPCommon.MethodInvocation                                                            // 58
       * @instance                                                                                       // 59
       */ // 60
      this.connection = options.connection; // 61
      // 62
      // The seed for randomStream value generation                                                      // 63
      this.randomSeed = options.randomSeed; // 64
      // 65
      // This is set by RandomStream.get; and holds the random stream state                              // 66
      this.randomStream = null; // 67
    }; // 68
    // 69
    _.extend(DDPCommon.MethodInvocation.prototype, { // 70
      /**                                                                                                // 71
       * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
       * @locus Server                                                                                   // 73
       * @memberOf DDPCommon.MethodInvocation                                                            // 74
       * @instance                                                                                       // 75
       */ // 76
      unblock: function () {
        // 77
        var self = this; // 78
        self._calledUnblock = true; // 79
        self._unblock(); // 80
      }, // 81
      // 82
      /**                                                                                                // 83
       * @summary Set the logged in user.                                                                // 84
       * @locus Server                                                                                   // 85
       * @memberOf DDPCommon.MethodInvocation                                                            // 86
       * @instance                                                                                       // 87
       * @param {String | null} userId The value that should be returned by `userId` on this connection.
       */ // 89
      setUserId: function (userId) {
        // 90
        var self = this; // 91
        if (self._calledUnblock) // 92
          throw new Error("Can't call setUserId in a method after calling unblock"); // 93
        self.userId = userId; // 94
        self._setUserId(userId); // 95
      } // 96
    }); // 97
    // 98
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                   //
    // packages/ddp-common/random_stream.js                                                              //
    //                                                                                                   //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // RandomStream allows for generation of pseudo-random values, from a seed.                          // 1
    //                                                                                                   // 2
    // We use this for consistent 'random' numbers across the client and server.                         // 3
    // We want to generate probably-unique IDs on the client, and we ideally want                        // 4
    // the server to generate the same IDs when it executes the method.                                  // 5
    //                                                                                                   // 6
    // For generated values to be the same, we must seed ourselves the same way,                         // 7
    // and we must keep track of the current state of our pseudo-random generators.                      // 8
    // We call this state the scope. By default, we use the current DDP method                           // 9
    // invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10
    // If a randomSeed is provided it will be used to seed our random sequences.                         // 11
    // In this way, client and server method calls will generate the same values.                        // 12
    //                                                                                                   // 13
    // We expose multiple named streams; each stream is independent                                      // 14
    // and is seeded differently (but predictably from the name).                                        // 15
    // By using multiple streams, we support reordering of requests,                                     // 16
    // as long as they occur on different streams.                                                       // 17
    //                                                                                                   // 18
    // @param options {Optional Object}                                                                  // 19
    //   seed: Array or value - Seed value(s) for the generator.                                         // 20
    //                          If an array, will be used as-is                                          // 21
    //                          If a value, will be converted to a single-value array                    // 22
    //                          If omitted, a random array will be used as the seed.                     // 23
    DDPCommon.RandomStream = function (options) {
      // 24
      var self = this; // 25
      // 26
      this.seed = [].concat(options.seed || randomToken()); // 27
      // 28
      this.sequences = {}; // 29
    }; // 30
    // 31
    // Returns a random string of sufficient length for a random seed.                                   // 32
    // This is a placeholder function; a similar function is planned                                     // 33
    // for Random itself; when that is added we should remove this function,                             // 34
    // and call Random's randomToken instead.                                                            // 35
    function randomToken() {
      // 36
      return Random.hexString(20); // 37
    }; // 38
    // 39
    // Returns the random stream with the specified name, in the specified                               // 40
    // scope. If a scope is passed, then we use that to seed a (not                                      // 41
    // cryptographically secure) PRNG using the fast Alea algorithm.  If                                 // 42
    // scope is null (or otherwise falsey) then we use a generated seed.                                 // 43
    //                                                                                                   // 44
    // However, scope will normally be the current DDP method invocation,                                // 45
    // so we'll use the stream with the specified name, and we should get                                // 46
    // consistent values on the client and server sides of a method call.                                // 47
    DDPCommon.RandomStream.get = function (scope, name) {
      // 48
      if (!name) {
        // 49
        name = "default"; // 50
      } // 51
      if (!scope) {
        // 52
        // There was no scope passed in; the sequence won't actually be                                  // 53
        // reproducible. but make it fast (and not cryptographically                                     // 54
        // secure) anyways, so that the behavior is similar to what you'd                                // 55
        // get by passing in a scope.                                                                    // 56
        return Random.insecure; // 57
      } // 58
      var randomStream = scope.randomStream; // 59
      if (!randomStream) {
        // 60
        scope.randomStream = randomStream = new DDPCommon.RandomStream({ // 61
          seed: scope.randomSeed // 62
        }); // 63
      } // 64
      return randomStream._sequence(name); // 65
    }; // 66
    // 67
    // 68
    // Creates a randomSeed for passing to a method call.                                                // 69
    // Note that we take enclosing as an argument,                                                       // 70
    // though we expect it to be DDP._CurrentMethodInvocation.get()                                      // 71
    // However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 72
    // invocation may not be the one currently in scope.                                                 // 73
    // If enclosing is null, we'll use Random and values won't be repeatable.                            // 74
    DDPCommon.makeRpcSeed = function (enclosing, methodName) {
      // 75
      var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName); // 76
      return stream.hexString(20); // 77
    }; // 78
    // 79
    _.extend(DDPCommon.RandomStream.prototype, { // 80
      // Get a random sequence with the specified name, creating it if does not exist.                   // 81
      // New sequences are seeded with the seed concatenated with the name.                              // 82
      // By passing a seed into Random.create, we use the Alea generator.                                // 83
      _sequence: function (name) {
        // 84
        var self = this; // 85
        // 86
        var sequence = self.sequences[name] || null; // 87
        if (sequence === null) {
          // 88
          var sequenceSeed = self.seed.concat(name); // 89
          for (var i = 0; i < sequenceSeed.length; i++) {
            // 90
            if (_.isFunction(sequenceSeed[i])) {
              // 91
              sequenceSeed[i] = sequenceSeed[i](); // 92
            } // 93
          } // 94
          self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed); // 95
        } // 96
        return sequence; // 97
      } // 98
    }); // 99
    // 100
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['ddp-common'] = {}, {
    DDPCommon: DDPCommon
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var Reload;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                         //
    // packages/reload/reload.js                                                               //
    //                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**                                                                                        // 1
     * This code does _NOT_ support hot (session-restoring) reloads on                         // 2
     * IE6,7. It only works on browsers with sessionStorage support.                           // 3
     *                                                                                         // 4
     * There are a couple approaches to add IE6,7 support:                                     // 5
     *                                                                                         // 6
     * - use IE's "userData" mechanism in combination with window.name.                        // 7
     * This mostly works, however the problem is that it can not get to the                    // 8
     * data until after DOMReady. This is a problem for us since this API                      // 9
     * relies on the data being ready before API users run. We could                           // 10
     * refactor using Meteor.startup in all API users, but that might slow                     // 11
     * page loads as we couldn't start the stream until after DOMReady.                        // 12
     * Here are some resources on this approach:                                               // 13
     * https://github.com/hugeinc/USTORE.js                                                    // 14
     * http://thudjs.tumblr.com/post/419577524/localstorage-userdata                           // 15
     * http://www.javascriptkit.com/javatutors/domstorage2.shtml                               // 16
     *                                                                                         // 17
     * - POST the data to the server, and have the server send it back on                      // 18
     * page load. This is nice because it sidesteps all the local storage                      // 19
     * compatibility issues, however it is kinda tricky. We can use a unique                   // 20
     * token in the URL, then get rid of it with HTML5 pushstate, but that                     // 21
     * only works on pushstate browsers.                                                       // 22
     *                                                                                         // 23
     * This will all need to be reworked entirely when we add server-side                      // 24
     * HTML rendering. In that case, the server will need to have access to                    // 25
     * the client's session to render properly.                                                // 26
     */ // 27
    // 28
    // XXX when making this API public, also expose a flag for the app                         // 29
    // developer to know whether a hot code push is happening. This is                         // 30
    // useful for apps using `window.onbeforeunload`. See                                      // 31
    // https://github.com/meteor/meteor/pull/657                                               // 32
    // 33
    Reload = {}; // 34
    // 35
    var KEY_NAME = 'Meteor_Reload'; // 36
    // 37
    var old_data = {}; // 38
    // read in old data at startup.                                                            // 39
    var old_json; // 40
    // 41
    // This logic for sessionStorage detection is based on browserstate/history.js             // 42
    var safeSessionStorage = null; // 43
    try {
      // 44
      // This throws a SecurityError on Chrome if cookies & localStorage are                   // 45
      // explicitly disabled                                                                   // 46
      //                                                                                       // 47
      // On Firefox with dom.storage.enabled set to false, sessionStorage is null              // 48
      //                                                                                       // 49
      // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely            // 50
      // on the throw if sessionStorage == null; the alternative is browser                    // 51
      // detection, but this seems better.                                                     // 52
      safeSessionStorage = window.sessionStorage; // 53
      // 54
      // Check we can actually use it                                                          // 55
      if (safeSessionStorage) {
        // 56
        safeSessionStorage.setItem('__dummy__', '1'); // 57
        safeSessionStorage.removeItem('__dummy__'); // 58
      } else {
        // 59
        // Be consistently null, for safety                                                    // 60
        safeSessionStorage = null; // 61
      } // 62
    } catch (e) {
      // 63
      // Expected on chrome with strict security, or if sessionStorage not supported           // 64
      safeSessionStorage = null; // 65
    } // 66
    // 67
    // Exported for test.                                                                      // 68
    Reload._getData = function () {
      // 69
      return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME); // 70
    }; // 71
    // 72
    if (safeSessionStorage) {
      // 73
      old_json = Reload._getData(); // 74
      safeSessionStorage.removeItem(KEY_NAME); // 75
    } else {} // 76
      // Unsupported browser (IE 6,7) or locked down security settings.                        // 77
      // No session resumption.                                                                // 78
      // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");                                    // 79
      // 80
      // 81
    if (!old_json) old_json = '{}'; // 82
    var old_parsed = {}; // 83
    try {
      // 84
      old_parsed = JSON.parse(old_json); // 85
      if (typeof old_parsed !== "object") {
        // 86
        Meteor._debug("Got bad data on reload. Ignoring."); // 87
        old_parsed = {}; // 88
      } // 89
    } catch (err) {
      // 90
      Meteor._debug("Got invalid JSON on reload. Ignoring."); // 91
    } // 92
    // 93
    if (old_parsed.reload && typeof old_parsed.data === "object") {
      // 94
      // Meteor._debug("Restoring reload data.");                                              // 95
      old_data = old_parsed.data; // 96
    } // 97
    // 98
    // 99
    var providers = []; // 100
    // 101
    ////////// External API //////////                                                         // 102
    // 103
    // Packages that support migration should register themselves by calling                   // 104
    // this function. When it's time to migrate, callback will be called                       // 105
    // with one argument, the "retry function," and an optional 'option'                       // 106
    // argument (containing a key 'immediateMigration'). If the package                        // 107
    // is ready to migrate, it should return [true, data], where data is                       // 108
    // its migration data, an arbitrary JSON value (or [true] if it has                        // 109
    // no migration data this time). If the package needs more time                            // 110
    // before it is ready to migrate, it should return false. Then, once                       // 111
    // it is ready to migrating again, it should call the retry                                // 112
    // function. The retry function will return immediately, but will                          // 113
    // schedule the migration to be retried, meaning that every package                        // 114
    // will be polled once again for its migration data. If they are all                       // 115
    // ready this time, then the migration will happen. name must be set if there              // 116
    // is migration data. If 'immediateMigration' is set in the options                        // 117
    // argument, then it doesn't matter whether the package is ready to                        // 118
    // migrate or not; the reload will happen immediately without waiting                      // 119
    // (used for OAuth redirect login).                                                        // 120
    //                                                                                         // 121
    Reload._onMigrate = function (name, callback) {
      // 122
      if (!callback) {
        // 123
        // name not provided, so first arg is callback.                                        // 124
        callback = name; // 125
        name = undefined; // 126
      } // 127
      providers.push({ name: name, callback: callback }); // 128
    }; // 129
    // 130
    // Called by packages when they start up.                                                  // 131
    // Returns the object that was saved, or undefined if none saved.                          // 132
    //                                                                                         // 133
    Reload._migrationData = function (name) {
      // 134
      return old_data[name]; // 135
    }; // 136
    // 137
    // Options are the same as for `Reload._migrate`.                                          // 138
    var pollProviders = function (tryReload, options) {
      // 139
      tryReload = tryReload || function () {}; // 140
      options = options || {}; // 141
      // 142
      var migrationData = {}; // 143
      var remaining = _.clone(providers); // 144
      var allReady = true; // 145
      while (remaining.length) {
        // 146
        var p = remaining.shift(); // 147
        var status = p.callback(tryReload, options); // 148
        if (!status[0]) // 149
          allReady = false; // 150
        if (status.length > 1 && p.name) // 151
          migrationData[p.name] = status[1]; // 152
      }; // 153
      if (allReady || options.immediateMigration) // 154
        return migrationData; // 155
      else // 156
        return null; // 157
    }; // 158
    // 159
    // Options are:                                                                            // 160
    //  - immediateMigration: true if the page will be reloaded immediately                    // 161
    //    regardless of whether packages report that they are ready or not.                    // 162
    Reload._migrate = function (tryReload, options) {
      // 163
      // Make sure each package is ready to go, and collect their                              // 164
      // migration data                                                                        // 165
      var migrationData = pollProviders(tryReload, options); // 166
      if (migrationData === null) // 167
        return false; // not ready yet..                                                       // 168
      // 169
      try {
        // 170
        // Persist the migration data                                                          // 171
        var json = JSON.stringify({ // 172
          data: migrationData, reload: true // 173
        }); // 174
      } catch (err) {
        // 175
        Meteor._debug("Couldn't serialize data for migration", migrationData); // 176
        throw err; // 177
      } // 178
      // 179
      if (safeSessionStorage) {
        // 180
        try {
          // 181
          safeSessionStorage.setItem(KEY_NAME, json); // 182
        } catch (err) {
          // 183
          // We should have already checked this, but just log - don't throw                   // 184
          Meteor._debug("Couldn't save data for migration to sessionStorage", err); // 185
        } // 186
      } else {
        // 187
        Meteor._debug("Browser does not support sessionStorage. Not saving migration state.");
      } // 189
      // 190
      return true; // 191
    }; // 192
    // 193
    // Allows tests to isolate the list of providers.                                          // 194
    Reload._withFreshProvidersForTest = function (f) {
      // 195
      var originalProviders = _.clone(providers); // 196
      providers = []; // 197
      try {
        // 198
        f(); // 199
      } finally {
        // 200
        providers = originalProviders; // 201
      } // 202
    }; // 203
    // 204
    // Migrating reload: reload this page (presumably to pick up a new                         // 205
    // version of the code or assets), but save the program state and                          // 206
    // migrate it over. This function returns immediately. The reload                          // 207
    // will happen at some point in the future once all of the packages                        // 208
    // are ready to migrate.                                                                   // 209
    //                                                                                         // 210
    var reloading = false; // 211
    Reload._reload = function (options) {
      // 212
      options = options || {}; // 213
      // 214
      if (reloading) // 215
        return; // 216
      reloading = true; // 217
      // 218
      var tryReload = function () {
        _.defer(function () {
          // 219
          if (Reload._migrate(tryReload, options)) {
            // 220
            // We'd like to make the browser reload the page using location.replace()            // 221
            // instead of location.reload(), because this avoids validating assets               // 222
            // with the server if we still have a valid cached copy. This doesn't work           // 223
            // when the location contains a hash however, because that wouldn't reload           // 224
            // the page and just scroll to the hash location instead.                            // 225
            if (window.location.hash || window.location.href.endsWith("#")) {
              // 226
              window.location.reload(); // 227
            } else {
              // 228
              window.location.replace(window.location.href); // 229
            } // 230
          } // 231
        });
      }; // 232
      // 233
      tryReload(); // 234
    }; // 235
    // 236
    /////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                         //
    // packages/reload/deprecated.js                                                           //
    //                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Reload functionality used to live on Meteor._reload. Be nice and try not to             // 1
    // break code that uses it, even though it's internal.                                     // 2
    // XXX COMPAT WITH 0.6.4                                                                   // 3
    Meteor._reload = { // 4
      onMigrate: Reload._onMigrate, // 5
      migrationData: Reload._migrationData, // 6
      reload: Reload._reload // 7
    }; // 8
    // 9
    /////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.reload = {}, {
    Reload: Reload
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var EJSON = Package.ejson.EJSON;

  /* Package-scope variables */
  var DiffSequence;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////
    //                                                                                 //
    // packages/diff-sequence/diff.js                                                  //
    //                                                                                 //
    /////////////////////////////////////////////////////////////////////////////////////
    //
    DiffSequence = {}; // 1
    // 2
    // ordered: bool.                                                                  // 3
    // old_results and new_results: collections of documents.                          // 4
    //    if ordered, they are arrays.                                                 // 5
    //    if unordered, they are IdMaps                                                // 6
    DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults, // 7
    observer, options) {
      // 8
      if (ordered) // 9
        DiffSequence.diffQueryOrderedChanges( // 10
        oldResults, newResults, observer, options); // 11
      else // 12
        DiffSequence.diffQueryUnorderedChanges( // 13
        oldResults, newResults, observer, options); // 14
    }; // 15
    // 16
    DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults, // 17
    observer, options) {
      // 18
      options = options || {}; // 19
      var projectionFn = options.projectionFn || EJSON.clone; // 20
      // 21
      if (observer.movedBefore) {
        // 22
        throw new Error("_diffQueryUnordered called with a movedBefore observer!"); // 23
      } // 24
      // 25
      newResults.forEach(function (newDoc, id) {
        // 26
        var oldDoc = oldResults.get(id); // 27
        if (oldDoc) {
          // 28
          if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {
            // 29
            var projectedNew = projectionFn(newDoc); // 30
            var projectedOld = projectionFn(oldDoc); // 31
            var changedFields = // 32
            DiffSequence.makeChangedFields(projectedNew, projectedOld); // 33
            if (!_.isEmpty(changedFields)) {
              // 34
              observer.changed(id, changedFields); // 35
            } // 36
          } // 37
        } else if (observer.added) {
          // 38
          var fields = projectionFn(newDoc); // 39
          delete fields._id; // 40
          observer.added(newDoc._id, fields); // 41
        } // 42
      }); // 43
      // 44
      if (observer.removed) {
        // 45
        oldResults.forEach(function (oldDoc, id) {
          // 46
          if (!newResults.has(id)) // 47
            observer.removed(id); // 48
        }); // 49
      } // 50
    }; // 51
    // 52
    // 53
    DiffSequence.diffQueryOrderedChanges = function (old_results, new_results, // 54
    observer, options) {
      // 55
      options = options || {}; // 56
      var projectionFn = options.projectionFn || EJSON.clone; // 57
      // 58
      var new_presence_of_id = {}; // 59
      _.each(new_results, function (doc) {
        // 60
        if (new_presence_of_id[doc._id]) // 61
          Meteor._debug("Duplicate _id in new_results"); // 62
        new_presence_of_id[doc._id] = true; // 63
      }); // 64
      // 65
      var old_index_of_id = {}; // 66
      _.each(old_results, function (doc, i) {
        // 67
        if (doc._id in old_index_of_id) // 68
          Meteor._debug("Duplicate _id in old_results"); // 69
        old_index_of_id[doc._id] = i; // 70
      }); // 71
      // 72
      // ALGORITHM:                                                                    // 73
      //                                                                               // 74
      // To determine which docs should be considered "moved" (and which               // 75
      // merely change position because of other docs moving) we run                   // 76
      // a "longest common subsequence" (LCS) algorithm.  The LCS of the               // 77
      // old doc IDs and the new doc IDs gives the docs that should NOT be             // 78
      // considered moved.                                                             // 79
      // 80
      // To actually call the appropriate callbacks to get from the old state to the   // 81
      // new state:                                                                    // 82
      // 83
      // First, we call removed() on all the items that only appear in the old         // 84
      // state.                                                                        // 85
      // 86
      // Then, once we have the items that should not move, we walk through the new    // 87
      // results array group-by-group, where a "group" is a set of items that have     // 88
      // moved, anchored on the end by an item that should not move.  One by one, we   // 89
      // move each of those elements into place "before" the anchoring end-of-group    // 90
      // item, and fire changed events on them if necessary.  Then we fire a changed   // 91
      // event on the anchor, and move on to the next group.  There is always at       // 92
      // least one group; the last group is anchored by a virtual "null" id at the     // 93
      // end.                                                                          // 94
      // 95
      // Asymptotically: O(N k) where k is number of ops, or potentially               // 96
      // O(N log N) if inner loop of LCS were made to be binary search.                // 97
      // 98
      // 99
      //////// LCS (longest common sequence, with respect to _id)                      // 100
      // (see Wikipedia article on Longest Increasing Subsequence,                     // 101
      // where the LIS is taken of the sequence of old indices of the                  // 102
      // docs in new_results)                                                          // 103
      //                                                                               // 104
      // unmoved: the output of the algorithm; members of the LCS,                     // 105
      // in the form of indices into new_results                                       // 106
      var unmoved = []; // 107
      // max_seq_len: length of LCS found so far                                       // 108
      var max_seq_len = 0; // 109
      // seq_ends[i]: the index into new_results of the last doc in a                  // 110
      // common subsequence of length of i+1 <= max_seq_len                            // 111
      var N = new_results.length; // 112
      var seq_ends = new Array(N); // 113
      // ptrs:  the common subsequence ending with new_results[n] extends              // 114
      // a common subsequence ending with new_results[ptr[n]], unless                  // 115
      // ptr[n] is -1.                                                                 // 116
      var ptrs = new Array(N); // 117
      // virtual sequence of old indices of new results                                // 118
      var old_idx_seq = function (i_new) {
        // 119
        return old_index_of_id[new_results[i_new]._id]; // 120
      }; // 121
      // for each item in new_results, use it to extend a common subsequence           // 122
      // of length j <= max_seq_len                                                    // 123
      for (var i = 0; i < N; i++) {
        // 124
        if (old_index_of_id[new_results[i]._id] !== undefined) {
          // 125
          var j = max_seq_len; // 126
          // this inner loop would traditionally be a binary search,                   // 127
          // but scanning backwards we will likely find a subseq to extend             // 128
          // pretty soon, bounded for example by the total number of ops.              // 129
          // If this were to be changed to a binary search, we'd still want            // 130
          // to scan backwards a bit as an optimization.                               // 131
          while (j > 0) {
            // 132
            if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i)) // 133
              break; // 134
            j--; // 135
          } // 136
          // 137
          ptrs[i] = j === 0 ? -1 : seq_ends[j - 1]; // 138
          seq_ends[j] = i; // 139
          if (j + 1 > max_seq_len) // 140
            max_seq_len = j + 1; // 141
        } // 142
      } // 143
      // 144
      // pull out the LCS/LIS into unmoved                                             // 145
      var idx = max_seq_len === 0 ? -1 : seq_ends[max_seq_len - 1]; // 146
      while (idx >= 0) {
        // 147
        unmoved.push(idx); // 148
        idx = ptrs[idx]; // 149
      } // 150
      // the unmoved item list is built backwards, so fix that                         // 151
      unmoved.reverse(); // 152
      // 153
      // the last group is always anchored by the end of the result list, which is     // 154
      // an id of "null"                                                               // 155
      unmoved.push(new_results.length); // 156
      // 157
      _.each(old_results, function (doc) {
        // 158
        if (!new_presence_of_id[doc._id]) // 159
          observer.removed && observer.removed(doc._id); // 160
      }); // 161
      // for each group of things in the new_results that is anchored by an unmoved    // 162
      // element, iterate through the things before it.                                // 163
      var startOfGroup = 0; // 164
      _.each(unmoved, function (endOfGroup) {
        // 165
        var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null; // 166
        var oldDoc, newDoc, fields, projectedNew, projectedOld; // 167
        for (var i = startOfGroup; i < endOfGroup; i++) {
          // 168
          newDoc = new_results[i]; // 169
          if (!_.has(old_index_of_id, newDoc._id)) {
            // 170
            fields = projectionFn(newDoc); // 171
            delete fields._id; // 172
            observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
            observer.added && observer.added(newDoc._id, fields); // 174
          } else {
            // 175
            // moved                                                                   // 176
            oldDoc = old_results[old_index_of_id[newDoc._id]]; // 177
            projectedNew = projectionFn(newDoc); // 178
            projectedOld = projectionFn(oldDoc); // 179
            fields = DiffSequence.makeChangedFields(projectedNew, projectedOld); // 180
            if (!_.isEmpty(fields)) {
              // 181
              observer.changed && observer.changed(newDoc._id, fields); // 182
            } // 183
            observer.movedBefore && observer.movedBefore(newDoc._id, groupId); // 184
          } // 185
        } // 186
        if (groupId) {
          // 187
          newDoc = new_results[endOfGroup]; // 188
          oldDoc = old_results[old_index_of_id[newDoc._id]]; // 189
          projectedNew = projectionFn(newDoc); // 190
          projectedOld = projectionFn(oldDoc); // 191
          fields = DiffSequence.makeChangedFields(projectedNew, projectedOld); // 192
          if (!_.isEmpty(fields)) {
            // 193
            observer.changed && observer.changed(newDoc._id, fields); // 194
          } // 195
        } // 196
        startOfGroup = endOfGroup + 1; // 197
      }); // 198
      // 199
      // 200
    }; // 201
    // 202
    // 203
    // General helper for diff-ing two objects.                                        // 204
    // callbacks is an object like so:                                                 // 205
    // { leftOnly: function (key, leftValue) {...},                                    // 206
    //   rightOnly: function (key, rightValue) {...},                                  // 207
    //   both: function (key, leftValue, rightValue) {...},                            // 208
    // }                                                                               // 209
    DiffSequence.diffObjects = function (left, right, callbacks) {
      // 210
      _.each(left, function (leftValue, key) {
        // 211
        if (_.has(right, key)) // 212
          callbacks.both && callbacks.both(key, leftValue, right[key]); // 213
        else // 214
          callbacks.leftOnly && callbacks.leftOnly(key, leftValue); // 215
      }); // 216
      if (callbacks.rightOnly) {
        // 217
        _.each(right, function (rightValue, key) {
          // 218
          if (!_.has(left, key)) // 219
            callbacks.rightOnly(key, rightValue); // 220
        }); // 221
      } // 222
    }; // 223
    // 224
    // 225
    DiffSequence.makeChangedFields = function (newDoc, oldDoc) {
      // 226
      var fields = {}; // 227
      DiffSequence.diffObjects(oldDoc, newDoc, { // 228
        leftOnly: function (key, value) {
          // 229
          fields[key] = undefined; // 230
        }, // 231
        rightOnly: function (key, value) {
          // 232
          fields[key] = value; // 233
        }, // 234
        both: function (key, leftValue, rightValue) {
          // 235
          if (!EJSON.equals(leftValue, rightValue)) // 236
            fields[key] = rightValue; // 237
        } // 238
      }); // 239
      return fields; // 240
    }; // 241
    // 242
    DiffSequence.applyChanges = function (doc, changeFields) {
      // 243
      _.each(changeFields, function (value, key) {
        // 244
        if (value === undefined) // 245
          delete doc[key]; // 246
        else // 247
          doc[key] = value; // 248
      }); // 249
    }; // 250
    // 251
    // 252
    /////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['diff-sequence'] = {}, {
    DiffSequence: DiffSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var MongoID;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                    //
    // packages/mongo-id/id.js                                                                            //
    //                                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    MongoID = {}; // 1
    // 2
    MongoID._looksLikeObjectID = function (str) {
      // 3
      return str.length === 24 && str.match(/^[0-9a-f]*$/); // 4
    }; // 5
    // 6
    MongoID.ObjectID = function (hexString) {
      // 7
      //random-based impl of Mongo ObjectID                                                               // 8
      var self = this; // 9
      if (hexString) {
        // 10
        hexString = hexString.toLowerCase(); // 11
        if (!MongoID._looksLikeObjectID(hexString)) {
          // 12
          throw new Error("Invalid hexadecimal string for creating an ObjectID"); // 13
        } // 14
        // meant to work with _.isEqual(), which relies on structural equality                            // 15
        self._str = hexString; // 16
      } else {
        // 17
        self._str = Random.hexString(24); // 18
      } // 19
    }; // 20
    // 21
    MongoID.ObjectID.prototype.toString = function () {
      // 22
      var self = this; // 23
      return "ObjectID(\"" + self._str + "\")"; // 24
    }; // 25
    // 26
    MongoID.ObjectID.prototype.equals = function (other) {
      // 27
      var self = this; // 28
      return other instanceof MongoID.ObjectID && // 29
      self.valueOf() === other.valueOf(); // 30
    }; // 31
    // 32
    MongoID.ObjectID.prototype.clone = function () {
      // 33
      var self = this; // 34
      return new MongoID.ObjectID(self._str); // 35
    }; // 36
    // 37
    MongoID.ObjectID.prototype.typeName = function () {
      // 38
      return "oid"; // 39
    }; // 40
    // 41
    MongoID.ObjectID.prototype.getTimestamp = function () {
      // 42
      var self = this; // 43
      return parseInt(self._str.substr(0, 8), 16); // 44
    }; // 45
    // 46
    MongoID.ObjectID.prototype.valueOf = // 47
    MongoID.ObjectID.prototype.toJSONValue = // 48
    MongoID.ObjectID.prototype.toHexString = // 49
    function () {
      return this._str;
    }; // 50
    // 51
    EJSON.addType("oid", function (str) {
      // 52
      return new MongoID.ObjectID(str); // 53
    }); // 54
    // 55
    MongoID.idStringify = function (id) {
      // 56
      if (id instanceof MongoID.ObjectID) {
        // 57
        return id.valueOf(); // 58
      } else if (typeof id === 'string') {
        // 59
        if (id === "") {
          // 60
          return id; // 61
        } else if (id.substr(0, 1) === "-" || // escape previously dashed strings                         // 62
        id.substr(0, 1) === "~" || // escape escaped numbers, true, false                      // 63
        MongoID._looksLikeObjectID(id) || // escape object-id-form strings                     // 64
        id.substr(0, 1) === '{') {
          // escape object-form strings, for maybe implementing later
          return "-" + id; // 66
        } else {
          // 67
          return id; // other strings go through unchanged.                                               // 68
        } // 69
      } else if (id === undefined) {
        // 70
        return '-'; // 71
      } else if (typeof id === 'object' && id !== null) {
        // 72
        throw new Error("Meteor does not currently support objects other than ObjectID as ids"); // 73
      } else {
        // Numbers, true, false, null                                                              // 74
        return "~" + JSON.stringify(id); // 75
      } // 76
    }; // 77
    // 78
    // 79
    MongoID.idParse = function (id) {
      // 80
      if (id === "") {
        // 81
        return id; // 82
      } else if (id === '-') {
        // 83
        return undefined; // 84
      } else if (id.substr(0, 1) === '-') {
        // 85
        return id.substr(1); // 86
      } else if (id.substr(0, 1) === '~') {
        // 87
        return JSON.parse(id.substr(1)); // 88
      } else if (MongoID._looksLikeObjectID(id)) {
        // 89
        return new MongoID.ObjectID(id); // 90
      } else {
        // 91
        return id; // 92
      } // 93
    }; // 94
    // 95
    // 96
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['mongo-id'] = {}, {
    MongoID: MongoID
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

    /* Imports */
    var Meteor = Package.meteor.Meteor;
    var global = Package.meteor.global;
    var meteorEnv = Package.meteor.meteorEnv;
    var check = Package.check.check;
    var Match = Package.check.Match;
    var Random = Package.random.Random;
    var EJSON = Package.ejson.EJSON;
    var _ = Package.underscore._;
    var Tracker = Package.tracker.Tracker;
    var Deps = Package.tracker.Deps;
    var Retry = Package.retry.Retry;
    var IdMap = Package['id-map'].IdMap;
    var Hook = Package['callback-hook'].Hook;
    var DDPCommon = Package['ddp-common'].DDPCommon;
    var DiffSequence = Package['diff-sequence'].DiffSequence;
    var MongoID = Package['mongo-id'].MongoID;
    var meteorInstall = Package.modules.meteorInstall;
    var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
    var Promise = Package.promise.Promise;
    var Symbol = Package['ecmascript-runtime-client'].Symbol;
    var Map = Package['ecmascript-runtime-client'].Map;
    var Set = Package['ecmascript-runtime-client'].Set;

    /* Package-scope variables */
    var SockJS, toSockjsUrl, toWebsocketUrl, allConnections, DDP;

    var _require2 = meteorInstall({ "node_modules": { "meteor": { "ddp-client": { "sockjs-0.3.4.js": function (_require) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/sockjs-0.3.4.js                                                                                 //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var _typeof2 = _require("babel-runtime/helpers/typeof"); //
                        //
                        var _typeof3 = _interopRequireDefault(_typeof2); //
                        //
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : { "default": obj };
                        } //
                        //
                        // XXX METEOR changes in <METEOR>                                                                                      // 1
                        /* SockJS client, version 0.3.4, http://sockjs.org, MIT License                                                        // 3
                                                                                                                                               //
                        Copyright (c) 2011-2012 VMware, Inc.                                                                                   //
                                                                                                                                               //
                        Permission is hereby granted, free of charge, to any person obtaining a copy                                           //
                        of this software and associated documentation files (the "Software"), to deal                                          //
                        in the Software without restriction, including without limitation the rights                                           //
                        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                              //
                        copies of the Software, and to permit persons to whom the Software is                                                  //
                        furnished to do so, subject to the following conditions:                                                               //
                                                                                                                                               //
                        The above copyright notice and this permission notice shall be included in                                             //
                        all copies or substantial portions of the Software.                                                                    //
                                                                                                                                               //
                        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                             //
                        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                               //
                        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                            //
                        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                                 //
                        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                          //
                        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                              //
                        THE SOFTWARE.                                                                                                          //
                        */ // <METEOR> Commented out JSO implementation (use json package instead).                                            //
                        // JSON2 by Douglas Crockford (minified).                                                                              // 27
                        // var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
                        // </METEOR>                                                                                                           // 29
                        //     [*] Including lib/index.js                                                                                      // 31
                        // Public object                                                                                                       // 32
                        SockJS = function () {
                            // 33
                            var _document = document; // 34
                            var _window = window; // 35
                            var utils = {}; //         [*] Including lib/reventtarget.js                                                       // 36
                            /*                                                                                                                 // 40
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ /* Simplified implementation of DOM2 EventTarget.                                                              //
                                 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget                                    //
                                 */ //
                            //
                            var REventTarget = function () {}; // 51
                            //
                            REventTarget.prototype.addEventListener = function (eventType, listener) {
                                // 52
                                if (!this._listeners) {
                                    // 53
                                    this._listeners = {}; // 54
                                } // 55
                                //
                                if (!(eventType in this._listeners)) {
                                    // 56
                                    this._listeners[eventType] = []; // 57
                                } // 58
                                //
                                var arr = this._listeners[eventType]; // 59
                                //
                                if (utils.arrIndexOf(arr, listener) === -1) {
                                    // 60
                                    arr.push(listener); // 61
                                } // 62
                                //
                                return; // 63
                            }; // 64
                            //
                            REventTarget.prototype.removeEventListener = function (eventType, listener) {
                                // 66
                                if (!(this._listeners && eventType in this._listeners)) {
                                    // 67
                                    return; // 68
                                } // 69
                                //
                                var arr = this._listeners[eventType]; // 70
                                var idx = utils.arrIndexOf(arr, listener); // 71
                                //
                                if (idx !== -1) {
                                    // 72
                                    if (arr.length > 1) {
                                        // 73
                                        this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1)); // 74
                                    } else {
                                        // 75
                                        delete this._listeners[eventType]; // 76
                                    } // 77
                                    //
                                    return; // 78
                                } // 79
                                //
                                return; // 80
                            }; // 81
                            //
                            REventTarget.prototype.dispatchEvent = function (event) {
                                // 83
                                var t = event.type; // 84
                                var args = Array.prototype.slice.call(arguments, 0); // 85
                                //
                                if (this['on' + t]) {
                                    // 86
                                    this['on' + t].apply(this, args); // 87
                                } // 88
                                //
                                if (this._listeners && t in this._listeners) {
                                    // 89
                                    for (var i = 0; i < this._listeners[t].length; i++) {
                                        // 90
                                        this._listeners[t][i].apply(this, args); // 91
                                    } // 92
                                } // 93
                            }; //         [*] End of lib/reventtarget.js                                                                       // 94
                            //         [*] Including lib/simpleevent.js                                                                        // 98
                            /*                                                                                                                 // 99
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var SimpleEvent = function (type, obj) {
                                // 107
                                this.type = type; // 108
                                //
                                if (typeof obj !== 'undefined') {
                                    // 109
                                    for (var k in meteorBabelHelpers.sanitizeForInObject(obj)) {
                                        // 110
                                        if (!obj.hasOwnProperty(k)) continue; // 111
                                        this[k] = obj[k]; // 112
                                    } // 113
                                } // 114
                            }; // 115
                            //
                            SimpleEvent.prototype.toString = function () {
                                // 117
                                var r = []; // 118
                                //
                                for (var k in meteorBabelHelpers.sanitizeForInObject(this)) {
                                    // 119
                                    if (!this.hasOwnProperty(k)) continue; // 120
                                    var v = this[k]; // 121
                                    if (typeof v === 'function') v = '[function]'; // 122
                                    r.push(k + '=' + v); // 123
                                } // 124
                                //
                                return 'SimpleEvent(' + r.join(', ') + ')'; // 125
                            }; //         [*] End of lib/simpleevent.js                                                                        // 126
                            //         [*] Including lib/eventemitter.js                                                                       // 130
                            /*                                                                                                                 // 131
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var EventEmitter = function (events) {
                                // 139
                                var that = this; // 140
                                that._events = events || []; // 141
                                that._listeners = {}; // 142
                            }; // 143
                            //
                            EventEmitter.prototype.emit = function (type) {
                                // 144
                                var that = this; // 145
                                //
                                that._verifyType(type); // 146
                                //
                                if (that._nuked) return; // 147
                                var args = Array.prototype.slice.call(arguments, 1); // 149
                                //
                                if (that['on' + type]) {
                                    // 150
                                    that['on' + type].apply(that, args); // 151
                                } // 152
                                //
                                if (type in that._listeners) {
                                    // 153
                                    for (var i = 0; i < that._listeners[type].length; i++) {
                                        // 154
                                        that._listeners[type][i].apply(that, args); // 155
                                    } // 156
                                } // 157
                            }; // 158
                            //
                            EventEmitter.prototype.on = function (type, callback) {
                                // 160
                                var that = this; // 161
                                //
                                that._verifyType(type); // 162
                                //
                                if (that._nuked) return; // 163
                                //
                                if (!(type in that._listeners)) {
                                    // 165
                                    that._listeners[type] = []; // 166
                                } // 167
                                //
                                that._listeners[type].push(callback); // 168
                            }; // 169
                            //
                            EventEmitter.prototype._verifyType = function (type) {
                                // 171
                                var that = this; // 172
                                //
                                if (utils.arrIndexOf(that._events, type) === -1) {
                                    // 173
                                    utils.log('Event ' + JSON.stringify(type) + ' not listed ' + JSON.stringify(that._events) + ' in ' + that);
                                } // 177
                            }; // 178
                            //
                            EventEmitter.prototype.nuke = function () {
                                // 180
                                var that = this; // 181
                                that._nuked = true; // 182
                                //
                                for (var i = 0; i < that._events.length; i++) {
                                    // 183
                                    delete that[that._events[i]]; // 184
                                } // 185
                                //
                                that._listeners = {}; // 186
                            }; //         [*] End of lib/eventemitter.js                                                                       // 187
                            //         [*] Including lib/utils.js                                                                              // 191
                            /*                                                                                                                 // 192
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_'; // 200
                            //
                            utils.random_string = function (length, max) {
                                // 201
                                max = max || random_string_chars.length; // 202
                                var i,
                                    // 203
                                ret = []; // 203
                                //
                                for (i = 0; i < length; i++) {
                                    // 204
                                    ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1)); // 205
                                } // 206
                                //
                                return ret.join(''); // 207
                            }; // 208
                            //
                            utils.random_number = function (max) {
                                // 209
                                return Math.floor(Math.random() * max); // 210
                            }; // 211
                            //
                            utils.random_number_string = function (max) {
                                // 212
                                var t = ('' + (max - 1)).length; // 213
                                var p = Array(t + 1).join('0'); // 214
                                return (p + utils.random_number(max)).slice(-t); // 215
                            }; // Assuming that url looks like: http://asdasd:111/asd                                                          // 216
                            //
                            //
                            utils.getOrigin = function (url) {
                                // 219
                                url += '/'; // 220
                                var parts = url.split('/').slice(0, 3); // 221
                                return parts.join('/'); // 222
                            }; // 223
                            //
                            utils.isSameOriginUrl = function (url_a, url_b) {
                                // 225
                                // location.origin would do, but it's not always available.                                                    // 226
                                if (!url_b) url_b = _window.location.href; // 227
                                return url_a.split('/').slice(0, 3).join('/') === url_b.split('/').slice(0, 3).join('/'); // 229
                            }; // <METEOR>                                                                                                     // 232
                            // https://github.com/sockjs/sockjs-client/issues/79                                                               // 235
                            //
                            //
                            utils.isSameOriginScheme = function (url_a, url_b) {
                                // 236
                                if (!url_b) url_b = _window.location.href; // 237
                                return url_a.split(':')[0] === url_b.split(':')[0]; // 239
                            }; // </METEOR>                                                                                                    // 242
                            //
                            //
                            utils.getParentDomain = function (url) {
                                // 246
                                // ipv4 ip address                                                                                             // 247
                                if (/^[0-9.]*$/.test(url)) return url; // ipv6 ip address                                                      // 248
                                //
                                if (/^\[/.test(url)) return url; // no dots                                                                    // 250
                                //
                                if (!/[.]/.test(url)) return url; // 252
                                var parts = url.split('.').slice(1); // 254
                                return parts.join('.'); // 255
                            }; // 256
                            //
                            utils.objectExtend = function (dst, src) {
                                // 258
                                for (var k in meteorBabelHelpers.sanitizeForInObject(src)) {
                                    // 259
                                    if (src.hasOwnProperty(k)) {
                                        // 260
                                        dst[k] = src[k]; // 261
                                    } // 262
                                } // 263
                                //
                                return dst; // 264
                            }; // 265
                            //
                            var WPrefix = '_jp'; // 267
                            //
                            utils.polluteGlobalNamespace = function () {
                                // 269
                                if (!(WPrefix in _window)) {
                                    // 270
                                    _window[WPrefix] = {}; // 271
                                } // 272
                            }; // 273
                            //
                            utils.closeFrame = function (code, reason) {
                                // 275
                                return 'c' + JSON.stringify([code, reason]); // 276
                            }; // 277
                            //
                            utils.userSetCode = function (code) {
                                // 279
                                return code === 1000 || code >= 3000 && code <= 4999; // 280
                            }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/                                       // 281
                            // and RFC 2988.                                                                                                   // 284
                            //
                            //
                            utils.countRTO = function (rtt) {
                                // 285
                                var rto; // 286
                                //
                                if (rtt > 100) {
                                    // 287
                                    rto = 3 * rtt; // rto > 300msec                                                                            // 288
                                } else {
                                    // 289
                                    rto = rtt + 200; // 200msec < rto <= 300msec                                                               // 290
                                } // 291
                                //
                                return rto; // 292
                            }; // 293
                            //
                            utils.log = function () {
                                // 295
                                if (_window.console && console.log && console.log.apply) {
                                    // 296
                                    console.log.apply(console, arguments); // 297
                                } // 298
                            }; // 299
                            //
                            utils.bind = function (fun, that) {
                                // 301
                                if (fun.bind) {
                                    // 302
                                    return fun.bind(that); // 303
                                } else {
                                    // 304
                                    return function () {
                                        // 305
                                        return fun.apply(that, arguments); // 306
                                    }; // 307
                                } // 308
                            }; // 309
                            //
                            utils.flatUrl = function (url) {
                                // 311
                                return url.indexOf('?') === -1 && url.indexOf('#') === -1; // 312
                            }; // `relativeTo` is an optional absolute URL. If provided, `url` will be                                         // 313
                            // interpreted relative to `relativeTo`. Defaults to `document.location`.                                          // 316
                            // <METEOR>                                                                                                        // 317
                            //
                            //
                            utils.amendUrl = function (url, relativeTo) {
                                // 318
                                var baseUrl; // 319
                                //
                                if (relativeTo === undefined) {
                                    // 320
                                    baseUrl = _document.location; // 321
                                } else {
                                    // 322
                                    var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo); // 323
                                    //
                                    if (protocolMatch) {
                                        // 324
                                        var protocol = protocolMatch[0].toLowerCase(); // 325
                                        var rest = relativeTo.substring(protocol.length); // 326
                                        var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest); // 327
                                        if (hostMatch) var host = hostMatch[0]; // 328
                                    } // 330
                                    //
                                    if (!protocol || !host) throw new Error("relativeTo must be an absolute url"); // 331
                                    baseUrl = { // 333
                                        protocol: protocol, // 334
                                        host: host // 335
                                    }; // 333
                                } // 337
                                //
                                if (!url) {
                                    // 338
                                    throw new Error('Wrong url for SockJS'); // 339
                                } // 340
                                //
                                if (!utils.flatUrl(url)) {
                                    // 341
                                    throw new Error('Only basic urls are supported in SockJS'); // 342
                                } //  '//abc' --> 'http://abc'                                                                                 // 343
                                //
                                //
                                if (url.indexOf('//') === 0) {
                                    // 346
                                    url = baseUrl.protocol + url; // 347
                                } // '/abc' --> 'http://localhost:1234/abc'                                                                    // 348
                                //
                                //
                                if (url.indexOf('/') === 0) {
                                    // 350
                                    url = baseUrl.protocol + '//' + baseUrl.host + url; // 351
                                } // </METEOR>                                                                                                 // 352
                                // strip trailing slashes                                                                                      // 354
                                //
                                //
                                url = url.replace(/[/]+$/, ''); // We have a full url here, with proto and host. For some browsers             // 355
                                // http://localhost:80/ is not in the same origin as http://localhost/                                         // 358
                                // Remove explicit :80 or :443 in such cases. See #74                                                          // 359
                                //
                                var parts = url.split("/"); // 360
                                //
                                if (parts[0] === "http:" && /:80$/.test(parts[2]) || parts[0] === "https:" && /:443$/.test(parts[2])) {
                                    // 361
                                    parts[2] = parts[2].replace(/:(80|443)$/, ""); // 363
                                } // 364
                                //
                                url = parts.join("/"); // 365
                                return url; // 366
                            }; // IE doesn't support [].indexOf.                                                                               // 367
                            //
                            //
                            utils.arrIndexOf = function (arr, obj) {
                                // 370
                                for (var i = 0; i < arr.length; i++) {
                                    // 371
                                    if (arr[i] === obj) {
                                        // 372
                                        return i; // 373
                                    } // 374
                                } // 375
                                //
                                return -1; // 376
                            }; // 377
                            //
                            utils.arrSkip = function (arr, obj) {
                                // 379
                                var idx = utils.arrIndexOf(arr, obj); // 380
                                //
                                if (idx === -1) {
                                    // 381
                                    return arr.slice(); // 382
                                } else {
                                    // 383
                                    var dst = arr.slice(0, idx); // 384
                                    return dst.concat(arr.slice(idx + 1)); // 385
                                } // 386
                            }; // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df                                // 387
                            //
                            //
                            utils.isArray = Array.isArray || function (value) {
                                // 390
                                return {}.toString.call(value).indexOf('Array') >= 0; // 391
                            }; // 392
                            //
                            utils.delay = function (t, fun) {
                                // 394
                                if (typeof t === 'function') {
                                    // 395
                                    fun = t; // 396
                                    t = 0; // 397
                                } // 398
                                //
                                return setTimeout(fun, t); // 399
                            }; // Chars worth escaping, as defined by Douglas Crockford:                                                       // 400
                            //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196       // 404
                            //
                            //
                            var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                                json_lookup = { // 405
                                "\0": "\\u0000", // 407
                                "\x01": "\\u0001", // 407
                                "\x02": "\\u0002", // 407
                                "\x03": "\\u0003", // 407
                                "\x04": "\\u0004", // 408
                                "\x05": "\\u0005", // 408
                                "\x06": "\\u0006", // 408
                                "\x07": "\\u0007", // 408
                                "\b": "\\b", // 409
                                "\t": "\\t", // 409
                                "\n": "\\n", // 409
                                "\x0B": "\\u000b", // 409
                                "\f": "\\f", // 409
                                "\r": "\\r", // 409
                                "\x0E": "\\u000e", // 410
                                "\x0F": "\\u000f", // 410
                                "\x10": "\\u0010", // 410
                                "\x11": "\\u0011", // 410
                                "\x12": "\\u0012", // 411
                                "\x13": "\\u0013", // 411
                                "\x14": "\\u0014", // 411
                                "\x15": "\\u0015", // 411
                                "\x16": "\\u0016", // 412
                                "\x17": "\\u0017", // 412
                                "\x18": "\\u0018", // 412
                                "\x19": "\\u0019", // 412
                                "\x1A": "\\u001a", // 413
                                "\x1B": "\\u001b", // 413
                                "\x1C": "\\u001c", // 413
                                "\x1D": "\\u001d", // 413
                                "\x1E": "\\u001e", // 414
                                "\x1F": "\\u001f", // 414
                                "\"": "\\\"", // 414
                                "\\": "\\\\", // 414
                                "\x7F": "\\u007f", // 415
                                "\x80": "\\u0080", // 415
                                "\x81": "\\u0081", // 415
                                "\x82": "\\u0082", // 415
                                "\x83": "\\u0083", // 416
                                "\x84": "\\u0084", // 416
                                "\x85": "\\u0085", // 416
                                "\x86": "\\u0086", // 416
                                "\x87": "\\u0087", // 417
                                "\x88": "\\u0088", // 417
                                "\x89": "\\u0089", // 417
                                "\x8A": "\\u008a", // 417
                                "\x8B": "\\u008b", // 418
                                "\x8C": "\\u008c", // 418
                                "\x8D": "\\u008d", // 418
                                "\x8E": "\\u008e", // 418
                                "\x8F": "\\u008f", // 419
                                "\x90": "\\u0090", // 419
                                "\x91": "\\u0091", // 419
                                "\x92": "\\u0092", // 419
                                "\x93": "\\u0093", // 420
                                "\x94": "\\u0094", // 420
                                "\x95": "\\u0095", // 420
                                "\x96": "\\u0096", // 420
                                "\x97": "\\u0097", // 421
                                "\x98": "\\u0098", // 421
                                "\x99": "\\u0099", // 421
                                "\x9A": "\\u009a", // 421
                                "\x9B": "\\u009b", // 422
                                "\x9C": "\\u009c", // 422
                                "\x9D": "\\u009d", // 422
                                "\x9E": "\\u009e", // 422
                                "\x9F": "\\u009f", // 423
                                "\xAD": "\\u00ad", // 423
                                "\u0600": "\\u0600", // 423
                                "\u0601": "\\u0601", // 423
                                "\u0602": "\\u0602", // 424
                                "\u0603": "\\u0603", // 424
                                "\u0604": "\\u0604", // 424
                                "\u070F": "\\u070f", // 424
                                "\u17B4": "\\u17b4", // 425
                                "\u17B5": "\\u17b5", // 425
                                "\u200C": "\\u200c", // 425
                                "\u200D": "\\u200d", // 425
                                "\u200E": "\\u200e", // 426
                                "\u200F": "\\u200f", // 426
                                "\u2028": "\\u2028", // 426
                                "\u2029": "\\u2029", // 426
                                "\u202A": "\\u202a", // 427
                                "\u202B": "\\u202b", // 427
                                "\u202C": "\\u202c", // 427
                                "\u202D": "\\u202d", // 427
                                "\u202E": "\\u202e", // 428
                                "\u202F": "\\u202f", // 428
                                "\u2060": "\\u2060", // 428
                                "\u2061": "\\u2061", // 428
                                "\u2062": "\\u2062", // 429
                                "\u2063": "\\u2063", // 429
                                "\u2064": "\\u2064", // 429
                                "\u2065": "\\u2065", // 429
                                "\u2066": "\\u2066", // 430
                                "\u2067": "\\u2067", // 430
                                "\u2068": "\\u2068", // 430
                                "\u2069": "\\u2069", // 430
                                "\u206A": "\\u206a", // 431
                                "\u206B": "\\u206b", // 431
                                "\u206C": "\\u206c", // 431
                                "\u206D": "\\u206d", // 431
                                "\u206E": "\\u206e", // 432
                                "\u206F": "\\u206f", // 432
                                "\uFEFF": "\\ufeff", // 432
                                "\uFFF0": "\\ufff0", // 432
                                "\uFFF1": "\\ufff1", // 433
                                "\uFFF2": "\\ufff2", // 433
                                "\uFFF3": "\\ufff3", // 433
                                "\uFFF4": "\\ufff4", // 433
                                "\uFFF5": "\\ufff5", // 434
                                "\uFFF6": "\\ufff6", // 434
                                "\uFFF7": "\\ufff7", // 434
                                "\uFFF8": "\\ufff8", // 434
                                "\uFFF9": "\\ufff9", // 435
                                "\uFFFA": "\\ufffa", // 435
                                "\uFFFB": "\\ufffb", // 435
                                "\uFFFC": "\\ufffc", // 435
                                "\uFFFD": "\\ufffd", // 436
                                "\uFFFE": "\\ufffe", // 436
                                "\uFFFF": "\\uffff" // 436
                            }; // Some extra characters that Chrome gets wrong, and substitutes with                                           // 406
                            // something else on the wire.                                                                                     // 439
                            //
                            var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
                                extra_lookup; // JSON Quote string. Use native implementation when possible.                                   // 440
                            //
                            var JSONQuote = JSON && JSON.stringify || function (string) {
                                // 444
                                json_escapable.lastIndex = 0; // 445
                                //
                                if (json_escapable.test(string)) {
                                    // 446
                                    string = string.replace(json_escapable, function (a) {
                                        // 447
                                        return json_lookup[a]; // 448
                                    }); // 449
                                } // 450
                                //
                                return '"' + string + '"'; // 451
                            }; // This may be quite slow, so let's delay until user actually uses bad                                          // 452
                            // characters.                                                                                                     // 455
                            //
                            //
                            var unroll_lookup = function (escapable) {
                                // 456
                                var i; // 457
                                var unrolled = {}; // 458
                                var c = []; // 459
                                //
                                for (i = 0; i < 65536; i++) {
                                    // 460
                                    c.push(String.fromCharCode(i)); // 461
                                } // 462
                                //
                                escapable.lastIndex = 0; // 463
                                c.join('').replace(escapable, function (a) {
                                    // 464
                                    unrolled[a] = "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); // 465
                                    return ''; // 466
                                }); // 467
                                escapable.lastIndex = 0; // 468
                                return unrolled; // 469
                            }; // Quote string, also taking care of unicode characters that browsers                                           // 470
                            // often break. Especially, take care of unicode surrogates:                                                       // 473
                            //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates                                        // 474
                            //
                            //
                            utils.quote = function (string) {
                                // 475
                                var quoted = JSONQuote(string); // In most cases this should be very fast and good enough.                     // 476
                                //
                                extra_escapable.lastIndex = 0; // 479
                                //
                                if (!extra_escapable.test(quoted)) {
                                    // 480
                                    return quoted; // 481
                                } // 482
                                //
                                if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable); // 484
                                return quoted.replace(extra_escapable, function (a) {
                                    // 486
                                    return extra_lookup[a]; // 487
                                }); // 488
                            }; // 489
                            //
                            var _all_protocols = ['websocket', 'xdr-streaming', 'xhr-streaming', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];
                            //
                            utils.probeProtocols = function () {
                                // 501
                                var probed = {}; // 502
                                //
                                for (var i = 0; i < _all_protocols.length; i++) {
                                    // 503
                                    var protocol = _all_protocols[i]; // User can have a typo in protocol name.                                // 504
                                    //
                                    probed[protocol] = SockJS[protocol] && SockJS[protocol].enabled(); // 506
                                } // 508
                                //
                                return probed; // 509
                            }; // 510
                            //
                            utils.detectProtocols = function (probed, protocols_whitelist, info) {
                                // 512
                                var pe = {},
                                    // 513
                                protocols = []; // 513
                                if (!protocols_whitelist) protocols_whitelist = _all_protocols; // 515
                                //
                                for (var i = 0; i < protocols_whitelist.length; i++) {
                                    // 516
                                    var protocol = protocols_whitelist[i]; // 517
                                    pe[protocol] = probed[protocol]; // 518
                                } // 519
                                //
                                var maybe_push = function (protos) {
                                    // 520
                                    var proto = protos.shift(); // 521
                                    //
                                    if (pe[proto]) {
                                        // 522
                                        protocols.push(proto); // 523
                                    } else {
                                        // 524
                                        if (protos.length > 0) {
                                            // 525
                                            maybe_push(protos); // 526
                                        } // 527
                                    } // 528
                                }; // 1. Websocket                                                                                             // 529
                                //
                                //
                                if (info.websocket !== false) {
                                    // 532
                                    maybe_push(['websocket']); // 533
                                } // 2. Streaming                                                                                              // 534
                                //
                                //
                                if (pe['xhr-streaming'] && !info.null_origin) {
                                    // 537
                                    protocols.push('xhr-streaming'); // 538
                                } else {
                                    // 539
                                    if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {
                                        // 540
                                        protocols.push('xdr-streaming'); // 541
                                    } else {
                                        // 542
                                        maybe_push(['iframe-eventsource', 'iframe-htmlfile']); // 543
                                    } // 545
                                } // 3. Polling                                                                                                // 546
                                //
                                //
                                if (pe['xhr-polling'] && !info.null_origin) {
                                    // 549
                                    protocols.push('xhr-polling'); // 550
                                } else {
                                    // 551
                                    if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {
                                        // 552
                                        protocols.push('xdr-polling'); // 553
                                    } else {
                                        // 554
                                        maybe_push(['iframe-xhr-polling', 'jsonp-polling']); // 555
                                    } // 557
                                } // 558
                                //
                                return protocols; // 559
                            }; //         [*] End of lib/utils.js                                                                              // 560
                            //         [*] Including lib/dom.js                                                                                // 564
                            /*                                                                                                                 // 565
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // May be used by htmlfile jsonp and transports.                                                               //
                            //
                            //
                            var MPrefix = '_sockjs_global'; // 574
                            //
                            utils.createHook = function () {
                                // 575
                                var window_id = 'a' + utils.random_string(8); // 576
                                //
                                if (!(MPrefix in _window)) {
                                    // 577
                                    var map = {}; // 578
                                    //
                                    _window[MPrefix] = function (window_id) {
                                        // 579
                                        if (!(window_id in map)) {
                                            // 580
                                            map[window_id] = { // 581
                                                id: window_id, // 582
                                                del: function () {
                                                    // 583
                                                    delete map[window_id]; // 583
                                                } // 583
                                            }; // 581
                                        } // 585
                                        //
                                        return map[window_id]; // 586
                                    }; // 587
                                } // 588
                                //
                                return _window[MPrefix](window_id); // 589
                            }; // 590
                            //
                            utils.attachMessage = function (listener) {
                                // 594
                                utils.attachEvent('message', listener); // 595
                            }; // 596
                            //
                            utils.attachEvent = function (event, listener) {
                                // 597
                                if (typeof _window.addEventListener !== 'undefined') {
                                    // 598
                                    _window.addEventListener(event, listener, false); // 599
                                } else {
                                    // 600
                                    // IE quirks.                                                                                              // 601
                                    // According to: http://stevesouders.com/misc/test-postmessage.php                                         // 602
                                    // the message gets delivered only to 'document', not 'window'.                                            // 603
                                    _document.attachEvent("on" + event, listener); // I get 'window' for ie8.                                  // 604
                                    //
                                    //
                                    _window.attachEvent("on" + event, listener); // 606
                                } // 607
                            }; // 608
                            //
                            utils.detachMessage = function (listener) {
                                // 610
                                utils.detachEvent('message', listener); // 611
                            }; // 612
                            //
                            utils.detachEvent = function (event, listener) {
                                // 613
                                if (typeof _window.addEventListener !== 'undefined') {
                                    // 614
                                    _window.removeEventListener(event, listener, false); // 615
                                } else {
                                    // 616
                                    _document.detachEvent("on" + event, listener); // 617
                                    //
                                    _window.detachEvent("on" + event, listener); // 618
                                } // 619
                            }; // 620
                            //
                            var on_unload = {}; // Things registered after beforeunload are to be called immediately.                          // 623
                            //
                            var after_unload = false; // 625
                            //
                            var trigger_unload_callbacks = function () {
                                // 627
                                for (var ref in meteorBabelHelpers.sanitizeForInObject(on_unload)) {
                                    // 628
                                    on_unload[ref](); // 629
                                    delete on_unload[ref]; // 630
                                } // 631
                                //
                                ; // 631
                            }; // 632
                            //
                            var unload_triggered = function () {
                                // 634
                                if (after_unload) return; // 635
                                after_unload = true; // 636
                                trigger_unload_callbacks(); // 637
                            }; // 'unload' alone is not reliable in opera within an iframe, but we                                             // 638
                            // can't use `beforeunload` as IE fires it on javascript: links.                                                   // 641
                            //
                            //
                            utils.attachEvent('unload', unload_triggered); // 642
                            //
                            utils.unload_add = function (listener) {
                                // 644
                                var ref = utils.random_string(8); // 645
                                on_unload[ref] = listener; // 646
                                //
                                if (after_unload) {
                                    // 647
                                    utils.delay(trigger_unload_callbacks); // 648
                                } // 649
                                //
                                return ref; // 650
                            }; // 651
                            //
                            utils.unload_del = function (ref) {
                                // 652
                                if (ref in on_unload) delete on_unload[ref]; // 653
                            }; // 655
                            //
                            utils.createIframe = function (iframe_url, error_callback) {
                                // 658
                                var iframe = _document.createElement('iframe'); // 659
                                //
                                var tref, unload_ref; // 660
                                //
                                var unattach = function () {
                                    // 661
                                    clearTimeout(tref); // Explorer had problems with that.                                                    // 662
                                    //
                                    try {
                                        // 664
                                        iframe.onload = null; // 664
                                    } catch (x) {} // 664
                                    //
                                    iframe.onerror = null; // 665
                                }; // 666
                                //
                                var cleanup = function () {
                                    // 667
                                    if (iframe) {
                                        // 668
                                        unattach(); // This timeout makes chrome fire onbeforeunload event                                     // 669
                                        // within iframe. Without the timeout it goes straight to                                              // 671
                                        // onunload.                                                                                           // 672
                                        //
                                        setTimeout(function () {
                                            // 673
                                            if (iframe) {
                                                // 674
                                                iframe.parentNode.removeChild(iframe); // 675
                                            } // 676
                                            //
                                            iframe = null; // 677
                                        }, 0); // 678
                                        utils.unload_del(unload_ref); // 679
                                    } // 680
                                }; // 681
                                //
                                var onerror = function (r) {
                                    // 682
                                    if (iframe) {
                                        // 683
                                        cleanup(); // 684
                                        error_callback(r); // 685
                                    } // 686
                                }; // 687
                                //
                                var post = function (msg, origin) {
                                    // 688
                                    try {
                                        // 689
                                        // When the iframe is not loaded, IE raises an exception                                               // 690
                                        // on 'contentWindow'.                                                                                 // 691
                                        if (iframe && iframe.contentWindow) {
                                            // 692
                                            iframe.contentWindow.postMessage(msg, origin); // 693
                                        } // 694
                                    } catch (x) {} // 695
                                    //
                                    ; // 695
                                }; // 696
                                //
                                iframe.src = iframe_url; // 698
                                iframe.style.display = 'none'; // 699
                                iframe.style.position = 'absolute'; // 700
                                //
                                iframe.onerror = function () {
                                    // 701
                                    onerror('onerror'); // 701
                                }; // 701
                                //
                                iframe.onload = function () {
                                    // 702
                                    // `onload` is triggered before scripts on the iframe are                                                  // 703
                                    // executed. Give it few seconds to actually load stuff.                                                   // 704
                                    clearTimeout(tref); // 705
                                    tref = setTimeout(function () {
                                        // 706
                                        onerror('onload timeout'); // 706
                                    }, 2000); // 706
                                }; // 707
                                //
                                _document.body.appendChild(iframe); // 708
                                //
                                tref = setTimeout(function () {
                                    // 709
                                    onerror('timeout'); // 709
                                }, 15000); // 709
                                unload_ref = utils.unload_add(cleanup); // 710
                                return { // 711
                                    post: post, // 712
                                    cleanup: cleanup, // 713
                                    loaded: unattach // 714
                                }; // 711
                            }; // 716
                            //
                            utils.createHtmlfile = function (iframe_url, error_callback) {
                                // 718
                                var doc = new ActiveXObject('htmlfile'); // 719
                                var tref, unload_ref; // 720
                                var iframe; // 721
                                //
                                var unattach = function () {
                                    // 722
                                    clearTimeout(tref); // 723
                                }; // 724
                                //
                                var cleanup = function () {
                                    // 725
                                    if (doc) {
                                        // 726
                                        unattach(); // 727
                                        utils.unload_del(unload_ref); // 728
                                        iframe.parentNode.removeChild(iframe); // 729
                                        iframe = doc = null; // 730
                                        CollectGarbage(); // 731
                                    } // 732
                                }; // 733
                                //
                                var onerror = function (r) {
                                    // 734
                                    if (doc) {
                                        // 735
                                        cleanup(); // 736
                                        error_callback(r); // 737
                                    } // 738
                                }; // 739
                                //
                                var post = function (msg, origin) {
                                    // 740
                                    try {
                                        // 741
                                        // When the iframe is not loaded, IE raises an exception                                               // 742
                                        // on 'contentWindow'.                                                                                 // 743
                                        if (iframe && iframe.contentWindow) {
                                            // 744
                                            iframe.contentWindow.postMessage(msg, origin); // 745
                                        } // 746
                                    } catch (x) {} // 747
                                    //
                                    ; // 747
                                }; // 748
                                //
                                doc.open(); // 750
                                doc.write('<html><s' + 'cript>' + 'document.domain="' + document.domain + '";' + '</s' + 'cript></html>'); // 751
                                doc.close(); // 754
                                doc.parentWindow[WPrefix] = _window[WPrefix]; // 755
                                var c = doc.createElement('div'); // 756
                                doc.body.appendChild(c); // 757
                                iframe = doc.createElement('iframe'); // 758
                                c.appendChild(iframe); // 759
                                iframe.src = iframe_url; // 760
                                tref = setTimeout(function () {
                                    // 761
                                    onerror('timeout'); // 761
                                }, 15000); // 761
                                unload_ref = utils.unload_add(cleanup); // 762
                                return { // 763
                                    post: post, // 764
                                    cleanup: cleanup, // 765
                                    loaded: unattach // 766
                                }; // 763
                            }; //         [*] End of lib/dom.js                                                                                // 768
                            //         [*] Including lib/dom2.js                                                                               // 772
                            /*                                                                                                                 // 773
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var AbstractXHRObject = function () {}; // 781
                            //
                            AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']); // 782
                            //
                            AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
                                // 784
                                var that = this; // 785
                                //
                                try {
                                    // 787
                                    that.xhr = new XMLHttpRequest(); // 788
                                } catch (x) {} // 789
                                //
                                ; // 789
                                //
                                if (!that.xhr) {
                                    // 791
                                    try {
                                        // 792
                                        that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP'); // 793
                                    } catch (x) {} // 794
                                    //
                                    ; // 794
                                } // 795
                                //
                                if (_window.ActiveXObject || _window.XDomainRequest) {
                                    // 796
                                    // IE8 caches even POSTs                                                                                   // 797
                                    url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date(); // 798
                                } // Explorer tends to keep connection open, even after the                                                    // 799
                                // tab gets closed: http://bugs.jquery.com/ticket/5280                                                         // 802
                                //
                                //
                                that.unload_ref = utils.unload_add(function () {
                                    // 803
                                    that._cleanup(true); // 803
                                }); // 803
                                //
                                try {
                                    // 804
                                    that.xhr.open(method, url, true); // 805
                                } catch (e) {
                                    // 806
                                    // IE raises an exception on wrong port.                                                                   // 807
                                    that.emit('finish', 0, ''); // 808
                                    //
                                    that._cleanup(); // 809
                                    //
                                    return; // 810
                                } // 811
                                //
                                ; // 811
                                //
                                if (!opts || !opts.no_credentials) {
                                    // 813
                                    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :                                     // 814
                                    // "This never affects same-site requests."                                                                // 815
                                    that.xhr.withCredentials = 'true'; // 816
                                } // 817
                                //
                                if (opts && opts.headers) {
                                    // 818
                                    for (var key in meteorBabelHelpers.sanitizeForInObject(opts.headers)) {
                                        // 819
                                        that.xhr.setRequestHeader(key, opts.headers[key]); // 820
                                    } // 821
                                } // 822
                                //
                                that.xhr.onreadystatechange = function () {
                                    // 824
                                    if (that.xhr) {
                                        // 825
                                        var x = that.xhr; // 826
                                        //
                                        switch (x.readyState) {// 827
                                            case 3:
                                                // 828
                                                // IE doesn't like peeking into responseText or status                                         // 829
                                                // on Microsoft.XMLHTTP and readystate=3                                                       // 830
                                                try {
                                                    // 831
                                                    var status = x.status; // 832
                                                    var text = x.responseText; // 833
                                                } catch (x) {} // 834
                                                //
                                                ; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                               // 834
                                                //
                                                if (status === 1223) status = 204; // IE does return readystate == 3 for 404 answers.          // 836
                                                //
                                                if (text && text.length > 0) {
                                                    // 839
                                                    that.emit('chunk', status, text); // 840
                                                } // 841
                                                //
                                                break; // 842
                                            //
                                            case 4:
                                                // 843
                                                var status = x.status; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450          // 844
                                                //
                                                if (status === 1223) status = 204; // 846
                                                that.emit('finish', status, x.responseText); // 848
                                                //
                                                that._cleanup(false); // 849
                                                //
                                                break; // 850
                                        } // 827
                                    } // 852
                                }; // 853
                                //
                                that.xhr.send(payload); // 854
                            }; // 855
                            //
                            AbstractXHRObject.prototype._cleanup = function (abort) {
                                // 857
                                var that = this; // 858
                                if (!that.xhr) return; // 859
                                utils.unload_del(that.unload_ref); // IE needs this field to be a function                                     // 860
                                //
                                that.xhr.onreadystatechange = function () {}; // 863
                                //
                                if (abort) {
                                    // 865
                                    try {
                                        // 866
                                        that.xhr.abort(); // 867
                                    } catch (x) {} // 868
                                    //
                                    ; // 868
                                } // 869
                                //
                                that.unload_ref = that.xhr = null; // 870
                            }; // 871
                            //
                            AbstractXHRObject.prototype.close = function () {
                                // 873
                                var that = this; // 874
                                that.nuke(); // 875
                                //
                                that._cleanup(true); // 876
                            }; // 877
                            //
                            var XHRCorsObject = utils.XHRCorsObject = function () {
                                // 879
                                var that = this,
                                    // 880
                                args = arguments; // 880
                                utils.delay(function () {
                                    // 881
                                    that._start.apply(that, args); // 881
                                }); // 881
                            }; // 882
                            //
                            XHRCorsObject.prototype = new AbstractXHRObject(); // 883
                            //
                            var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {
                                // 885
                                var that = this; // 886
                                utils.delay(function () {
                                    // 887
                                    that._start(method, url, payload, { // 888
                                        no_credentials: true // 889
                                    }); // 888
                                }); // 891
                            }; // 892
                            //
                            XHRLocalObject.prototype = new AbstractXHRObject(); // References:                                                 // 893
                            //   http://ajaxian.com/archives/100-line-ajax-wrapper                                                             // 898
                            //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx                                                // 899
                            //
                            var XDRObject = utils.XDRObject = function (method, url, payload) {
                                // 900
                                var that = this; // 901
                                utils.delay(function () {
                                    // 902
                                    that._start(method, url, payload); // 902
                                }); // 902
                            }; // 903
                            //
                            XDRObject.prototype = new EventEmitter(['chunk', 'finish']); // 904
                            //
                            XDRObject.prototype._start = function (method, url, payload) {
                                // 905
                                var that = this; // 906
                                var xdr = new XDomainRequest(); // IE caches even POSTs                                                        // 907
                                //
                                url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date(); // 909
                                //
                                var onerror = xdr.ontimeout = xdr.onerror = function () {
                                    // 911
                                    that.emit('finish', 0, ''); // 912
                                    //
                                    that._cleanup(false); // 913
                                }; // 914
                                //
                                xdr.onprogress = function () {
                                    // 915
                                    that.emit('chunk', 200, xdr.responseText); // 916
                                }; // 917
                                //
                                xdr.onload = function () {
                                    // 918
                                    that.emit('finish', 200, xdr.responseText); // 919
                                    //
                                    that._cleanup(false); // 920
                                }; // 921
                                //
                                that.xdr = xdr; // 922
                                that.unload_ref = utils.unload_add(function () {
                                    // 923
                                    that._cleanup(true); // 923
                                }); // 923
                                //
                                try {
                                    // 924
                                    // Fails with AccessDenied if port number is bogus                                                         // 925
                                    that.xdr.open(method, url); // 926
                                    that.xdr.send(payload); // 927
                                } catch (x) {
                                    // 928
                                    onerror(); // 929
                                } // 930
                            }; // 931
                            //
                            XDRObject.prototype._cleanup = function (abort) {
                                // 933
                                var that = this; // 934
                                if (!that.xdr) return; // 935
                                utils.unload_del(that.unload_ref); // 936
                                that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress = that.xdr.onload = null; // 938
                                //
                                if (abort) {
                                    // 940
                                    try {
                                        // 941
                                        that.xdr.abort(); // 942
                                    } catch (x) {} // 943
                                    //
                                    ; // 943
                                } // 944
                                //
                                that.unload_ref = that.xdr = null; // 945
                            }; // 946
                            //
                            XDRObject.prototype.close = function () {
                                // 948
                                var that = this; // 949
                                that.nuke(); // 950
                                //
                                that._cleanup(true); // 951
                            }; // 1. Is natively via XHR                                                                                       // 952
                            // 2. Is natively via XDR                                                                                          // 955
                            // 3. Nope, but postMessage is there so it should work via the Iframe.                                             // 956
                            // 4. Nope, sorry.                                                                                                 // 957
                            //
                            //
                            utils.isXHRCorsCapable = function () {
                                // 958
                                if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {
                                    // 959
                                    return 1; // 960
                                } // XDomainRequest doesn't work if page is served from file://                                                // 961
                                //
                                //
                                if (_window.XDomainRequest && _document.domain) {
                                    // 963
                                    return 2; // 964
                                } // 965
                                //
                                if (IframeTransport.enabled()) {
                                    // 966
                                    return 3; // 967
                                } // 968
                                //
                                return 4; // 969
                            }; //         [*] End of lib/dom2.js                                                                               // 970
                            //         [*] Including lib/sockjs.js                                                                             // 974
                            /*                                                                                                                 // 975
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var SockJS = function (url, dep_protocols_whitelist, options) {
                                // 983
                                if (!(this instanceof SockJS)) {
                                    // 984
                                    // makes `new` optional                                                                                    // 985
                                    return new SockJS(url, dep_protocols_whitelist, options); // 986
                                } // 987
                                //
                                var that = this,
                                    // 989
                                protocols_whitelist; // 989
                                that._options = { // 990
                                    devel: false, // 990
                                    debug: false, // 990
                                    protocols_whitelist: [], // 990
                                    info: undefined, // 991
                                    rtt: undefined // 991
                                }; // 990
                                //
                                if (options) {
                                    // 992
                                    utils.objectExtend(that._options, options); // 993
                                } // 994
                                //
                                that._base_url = utils.amendUrl(url); // 995
                                that._server = that._options.server || utils.random_number_string(1000); // 996
                                //
                                if (that._options.protocols_whitelist && that._options.protocols_whitelist.length) {
                                    // 997
                                    protocols_whitelist = that._options.protocols_whitelist; // 999
                                } else {
                                    // 1000
                                    // Deprecated API                                                                                          // 1001
                                    if (typeof dep_protocols_whitelist === 'string' && dep_protocols_whitelist.length > 0) {
                                        // 1002
                                        protocols_whitelist = [dep_protocols_whitelist]; // 1004
                                    } else if (utils.isArray(dep_protocols_whitelist)) {
                                        // 1005
                                        protocols_whitelist = dep_protocols_whitelist; // 1006
                                    } else {
                                        // 1007
                                        protocols_whitelist = null; // 1008
                                    } // 1009
                                    //
                                    if (protocols_whitelist) {
                                        // 1010
                                        that._debug('Deprecated API: Use "protocols_whitelist" option ' + 'instead of supplying protocol list as a second ' + 'parameter to SockJS constructor.');
                                    } // 1014
                                } // 1015
                                //
                                that._protocols = []; // 1016
                                that.protocol = null; // 1017
                                that.readyState = SockJS.CONNECTING; // 1018
                                that._ir = createInfoReceiver(that._base_url); // 1019
                                //
                                that._ir.onfinish = function (info, rtt) {
                                    // 1020
                                    that._ir = null; // 1021
                                    //
                                    if (info) {
                                        // 1022
                                        if (that._options.info) {
                                            // 1023
                                            // Override if user supplies the option                                                            // 1024
                                            info = utils.objectExtend(info, that._options.info); // 1025
                                        } // 1026
                                        //
                                        if (that._options.rtt) {
                                            // 1027
                                            rtt = that._options.rtt; // 1028
                                        } // 1029
                                        //
                                        that._applyInfo(info, rtt, protocols_whitelist); // 1030
                                        //
                                        that._didClose(); // 1031
                                    } else {
                                        // 1032
                                        that._didClose(1002, 'Can\'t connect to server', true); // 1033
                                    } // 1034
                                }; // 1035
                            }; // Inheritance                                                                                                  // 1036
                            //
                            //
                            SockJS.prototype = new REventTarget(); // 1038
                            SockJS.version = "0.3.4"; // 1040
                            SockJS.CONNECTING = 0; // 1042
                            SockJS.OPEN = 1; // 1043
                            SockJS.CLOSING = 2; // 1044
                            SockJS.CLOSED = 3; // 1045
                            //
                            SockJS.prototype._debug = function () {
                                // 1047
                                if (this._options.debug) utils.log.apply(utils, arguments); // 1048
                            }; // 1050
                            //
                            SockJS.prototype._dispatchOpen = function () {
                                // 1052
                                var that = this; // 1053
                                //
                                if (that.readyState === SockJS.CONNECTING) {
                                    // 1054
                                    if (that._transport_tref) {
                                        // 1055
                                        clearTimeout(that._transport_tref); // 1056
                                        that._transport_tref = null; // 1057
                                    } // 1058
                                    //
                                    that.readyState = SockJS.OPEN; // 1059
                                    that.dispatchEvent(new SimpleEvent("open")); // 1060
                                } else {
                                    // 1061
                                    // The server might have been restarted, and lost track of our                                             // 1062
                                    // connection.                                                                                             // 1063
                                    that._didClose(1006, "Server lost session"); // 1064
                                } // 1065
                            }; // 1066
                            //
                            SockJS.prototype._dispatchMessage = function (data) {
                                // 1068
                                var that = this; // 1069
                                if (that.readyState !== SockJS.OPEN) return; // 1070
                                that.dispatchEvent(new SimpleEvent("message", { // 1072
                                    data: data // 1072
                                })); // 1072
                            }; // 1073
                            //
                            SockJS.prototype._dispatchHeartbeat = function (data) {
                                // 1075
                                var that = this; // 1076
                                if (that.readyState !== SockJS.OPEN) return; // 1077
                                that.dispatchEvent(new SimpleEvent('heartbeat', {})); // 1079
                            }; // 1080
                            //
                            SockJS.prototype._didClose = function (code, reason, force) {
                                // 1082
                                var that = this; // 1083
                                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN && that.readyState !== SockJS.CLOSING) throw new Error('INVALID_STATE_ERR');
                                //
                                if (that._ir) {
                                    // 1088
                                    that._ir.nuke(); // 1089
                                    //
                                    that._ir = null; // 1090
                                } // 1091
                                //
                                if (that._transport) {
                                    // 1093
                                    that._transport.doCleanup(); // 1094
                                    //
                                    that._transport = null; // 1095
                                } // 1096
                                //
                                var close_event = new SimpleEvent("close", { // 1098
                                    code: code, // 1099
                                    reason: reason, // 1100
                                    wasClean: utils.userSetCode(code) // 1101
                                }); // 1098
                                //
                                if (!utils.userSetCode(code) && that.readyState === SockJS.CONNECTING && !force) {
                                    // 1103
                                    if (that._try_next_protocol(close_event)) {
                                        // 1105
                                        return; // 1106
                                    } // 1107
                                    //
                                    close_event = new SimpleEvent("close", { // 1108
                                        code: 2000, // 1108
                                        reason: "All transports failed", // 1109
                                        wasClean: false, // 1110
                                        last_event: close_event // 1111
                                    }); // 1108
                                } // 1112
                                //
                                that.readyState = SockJS.CLOSED; // 1113
                                utils.delay(function () {
                                    // 1115
                                    that.dispatchEvent(close_event); // 1116
                                }); // 1117
                            }; // 1118
                            //
                            SockJS.prototype._didMessage = function (data) {
                                // 1120
                                var that = this; // 1121
                                var type = data.slice(0, 1); // 1122
                                //
                                switch (type) {// 1123
                                    case 'o':
                                        // 1124
                                        that._dispatchOpen(); // 1125
                                        //
                                        break; // 1126
                                    //
                                    case 'a':
                                        // 1127
                                        var payload = JSON.parse(data.slice(1) || '[]'); // 1128
                                        //
                                        for (var i = 0; i < payload.length; i++) {
                                            // 1129
                                            that._dispatchMessage(payload[i]); // 1130
                                        } // 1131
                                        //
                                        break; // 1132
                                    //
                                    case 'm':
                                        // 1133
                                        var payload = JSON.parse(data.slice(1) || 'null'); // 1134
                                        //
                                        that._dispatchMessage(payload); // 1135
                                        //
                                        break; // 1136
                                    //
                                    case 'c':
                                        // 1137
                                        var payload = JSON.parse(data.slice(1) || '[]'); // 1138
                                        //
                                        that._didClose(payload[0], payload[1]); // 1139
                                        //
                                        break; // 1140
                                    //
                                    case 'h':
                                        // 1141
                                        that._dispatchHeartbeat(); // 1142
                                        //
                                        break; // 1143
                                } // 1123
                            }; // 1145
                            //
                            SockJS.prototype._try_next_protocol = function (close_event) {
                                // 1147
                                var that = this; // 1148
                                //
                                if (that.protocol) {
                                    // 1149
                                    that._debug('Closed transport:', that.protocol, '' + close_event); // 1150
                                    //
                                    that.protocol = null; // 1151
                                } // 1152
                                //
                                if (that._transport_tref) {
                                    // 1153
                                    clearTimeout(that._transport_tref); // 1154
                                    that._transport_tref = null; // 1155
                                } // 1156
                                //
                                while (1) {
                                    // 1158
                                    var protocol = that.protocol = that._protocols.shift(); // 1159
                                    //
                                    if (!protocol) {
                                        // 1160
                                        return false; // 1161
                                    } // Some protocols require access to `body`, what if were in                                              // 1162
                                    // the `head`?                                                                                             // 1164
                                    //
                                    //
                                    if (SockJS[protocol] && SockJS[protocol].need_body === true && (!_document.body || typeof _document.readyState !== 'undefined' && _document.readyState !== 'complete')) {
                                        that._protocols.unshift(protocol); // 1170
                                        //
                                        that.protocol = 'waiting-for-load'; // 1171
                                        utils.attachEvent('load', function () {
                                            // 1172
                                            that._try_next_protocol(); // 1173
                                        }); // 1174
                                        return true; // 1175
                                    } // 1176
                                    //
                                    if (!SockJS[protocol] || !SockJS[protocol].enabled(that._options)) {
                                        // 1178
                                        that._debug('Skipping transport:', protocol); // 1180
                                    } else {
                                        // 1181
                                        var roundTrips = SockJS[protocol].roundTrips || 1; // 1182
                                        var to = (that._options.rto || 0) * roundTrips || 5000; // 1183
                                        that._transport_tref = utils.delay(to, function () {
                                            // 1184
                                            if (that.readyState === SockJS.CONNECTING) {
                                                // 1185
                                                // I can't understand how it is possible to run                                                // 1186
                                                // this timer, when the state is CLOSED, but                                                   // 1187
                                                // apparently in IE everythin is possible.                                                     // 1188
                                                that._didClose(2007, "Transport timeouted"); // 1189
                                            } // 1190
                                        }); // 1191
                                        var connid = utils.random_string(8); // 1193
                                        var trans_url = that._base_url + '/' + that._server + '/' + connid; // 1194
                                        //
                                        that._debug('Opening transport:', protocol, ' url:' + trans_url, ' RTO:' + that._options.rto); // 1195
                                        //
                                        that._transport = new SockJS[protocol](that, trans_url, that._base_url); // 1197
                                        return true; // 1199
                                    } // 1200
                                } // 1201
                            }; // 1202
                            //
                            SockJS.prototype.close = function (code, reason) {
                                // 1204
                                var that = this; // 1205
                                if (code && !utils.userSetCode(code)) throw new Error("INVALID_ACCESS_ERR"); // 1206
                                //
                                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN) {
                                    // 1208
                                    return false; // 1210
                                } // 1211
                                //
                                that.readyState = SockJS.CLOSING; // 1212
                                //
                                that._didClose(code || 1000, reason || "Normal closure"); // 1213
                                //
                                return true; // 1214
                            }; // 1215
                            //
                            SockJS.prototype.send = function (data) {
                                // 1217
                                var that = this; // 1218
                                if (that.readyState === SockJS.CONNECTING) throw new Error('INVALID_STATE_ERR'); // 1219
                                //
                                if (that.readyState === SockJS.OPEN) {
                                    // 1221
                                    that._transport.doSend(utils.quote('' + data)); // 1222
                                } // 1223
                                //
                                return true; // 1224
                            }; // 1225
                            //
                            SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {
                                // 1227
                                var that = this; // 1228
                                that._options.info = info; // 1229
                                that._options.rtt = rtt; // 1230
                                that._options.rto = utils.countRTO(rtt); // 1231
                                that._options.info.null_origin = !_document.domain; // Servers can override base_url, eg to provide a randomized domain name and
                                // avoid browser per-domain connection limits.                                                                 // 1234
                                //
                                if (info.base_url) // <METEOR>                                                                                 // 1235
                                    that._base_url = utils.amendUrl(info.base_url, that._base_url); // </METEOR>                               // 1237
                                //
                                var probed = utils.probeProtocols(); // 1239
                                that._protocols = utils.detectProtocols(probed, protocols_whitelist, info); // <METEOR>                        // 1240
                                // https://github.com/sockjs/sockjs-client/issues/79                                                           // 1242
                                // Hack to avoid XDR when using different protocols                                                            // 1243
                                // We're on IE trying to do cross-protocol. jsonp only.                                                        // 1244
                                //
                                if (!utils.isSameOriginScheme(that._base_url) && 2 === utils.isXHRCorsCapable()) {
                                    // 1245
                                    that._protocols = ['jsonp-polling']; // 1247
                                } // </METEOR>                                                                                                 // 1248
                                //
                            }; //         [*] End of lib/sockjs.js                                                                             // 1250
                            //         [*] Including lib/trans-websocket.js                                                                    // 1254
                            /*                                                                                                                 // 1255
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {
                                // 1263
                                var that = this; // 1264
                                var url = trans_url + '/websocket'; // 1265
                                //
                                if (url.slice(0, 5) === 'https') {
                                    // 1266
                                    url = 'wss' + url.slice(5); // 1267
                                } else {
                                    // 1268
                                    url = 'ws' + url.slice(4); // 1269
                                } // 1270
                                //
                                that.ri = ri; // 1271
                                that.url = url; // 1272
                                var Constructor = _window.WebSocket || _window.MozWebSocket; // 1273
                                that.ws = new Constructor(that.url); // 1275
                                //
                                that.ws.onmessage = function (e) {
                                    // 1276
                                    that.ri._didMessage(e.data); // 1277
                                }; // Firefox has an interesting bug. If a websocket connection is                                             // 1278
                                // created after onunload, it stays alive even when user                                                       // 1280
                                // navigates away from the page. In such situation let's lie -                                                 // 1281
                                // let's not open the ws connection at all. See:                                                               // 1282
                                // https://github.com/sockjs/sockjs-client/issues/28                                                           // 1283
                                // https://bugzilla.mozilla.org/show_bug.cgi?id=696085                                                         // 1284
                                //
                                //
                                that.unload_ref = utils.unload_add(function () {
                                    // 1285
                                    that.ws.close(); // 1285
                                }); // 1285
                                //
                                that.ws.onclose = function () {
                                    // 1286
                                    that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken")); // 1287
                                }; // 1288
                            }; // 1289
                            //
                            WebSocketTransport.prototype.doSend = function (data) {
                                // 1291
                                this.ws.send('[' + data + ']'); // 1292
                            }; // 1293
                            //
                            WebSocketTransport.prototype.doCleanup = function () {
                                // 1295
                                var that = this; // 1296
                                var ws = that.ws; // 1297
                                //
                                if (ws) {
                                    // 1298
                                    ws.onmessage = ws.onclose = null; // 1299
                                    ws.close(); // 1300
                                    utils.unload_del(that.unload_ref); // 1301
                                    that.unload_ref = that.ri = that.ws = null; // 1302
                                } // 1303
                            }; // 1304
                            //
                            WebSocketTransport.enabled = function () {
                                // 1306
                                return !!(_window.WebSocket || _window.MozWebSocket); // 1307
                            }; // In theory, ws should require 1 round trip. But in chrome, this is                                            // 1308
                            // not very stable over SSL. Most likely a ws connection requires a                                                // 1311
                            // separate SSL connection, in which case 2 round trips are an                                                     // 1312
                            // absolute minumum.                                                                                               // 1313
                            //
                            //
                            WebSocketTransport.roundTrips = 2; //         [*] End of lib/trans-websocket.js                                    // 1314
                            //         [*] Including lib/trans-sender.js                                                                       // 1318
                            /*                                                                                                                 // 1319
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var BufferedSender = function () {}; // 1327
                            //
                            BufferedSender.prototype.send_constructor = function (sender) {
                                // 1328
                                var that = this; // 1329
                                that.send_buffer = []; // 1330
                                that.sender = sender; // 1331
                            }; // 1332
                            //
                            BufferedSender.prototype.doSend = function (message) {
                                // 1333
                                var that = this; // 1334
                                that.send_buffer.push(message); // 1335
                                //
                                if (!that.send_stop) {
                                    // 1336
                                    that.send_schedule(); // 1337
                                } // 1338
                            }; // For polling transports in a situation when in the message callback,                                          // 1339
                            // new message is being send. If the sending connection was started                                                // 1342
                            // before receiving one, it is possible to saturate the network and                                                // 1343
                            // timeout due to the lack of receiving socket. To avoid that we delay                                             // 1344
                            // sending messages by some small time, in order to let receiving                                                  // 1345
                            // connection be started beforehand. This is only a halfmeasure and                                                // 1346
                            // does not fix the big problem, but it does make the tests go more                                                // 1347
                            // stable on slow networks.                                                                                        // 1348
                            //
                            //
                            BufferedSender.prototype.send_schedule_wait = function () {
                                // 1349
                                var that = this; // 1350
                                var tref; // 1351
                                //
                                that.send_stop = function () {
                                    // 1352
                                    that.send_stop = null; // 1353
                                    clearTimeout(tref); // 1354
                                }; // 1355
                                //
                                tref = utils.delay(25, function () {
                                    // 1356
                                    that.send_stop = null; // 1357
                                    that.send_schedule(); // 1358
                                }); // 1359
                            }; // 1360
                            //
                            BufferedSender.prototype.send_schedule = function () {
                                // 1362
                                var that = this; // 1363
                                //
                                if (that.send_buffer.length > 0) {
                                    // 1364
                                    var payload = '[' + that.send_buffer.join(',') + ']'; // 1365
                                    that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {
                                        // 1366
                                        that.send_stop = null; // 1367
                                        //
                                        if (success === false) {
                                            // 1368
                                            that.ri._didClose(1006, 'Sending error ' + abort_reason); // 1369
                                        } else {
                                            // 1370
                                            that.send_schedule_wait(); // 1371
                                        } // 1372
                                    }); // 1373
                                    that.send_buffer = []; // 1374
                                } // 1375
                            }; // 1376
                            //
                            BufferedSender.prototype.send_destructor = function () {
                                // 1378
                                var that = this; // 1379
                                //
                                if (that._send_stop) {
                                    // 1380
                                    that._send_stop(); // 1381
                                } // 1382
                                //
                                that._send_stop = null; // 1383
                            }; // 1384
                            //
                            var jsonPGenericSender = function (url, payload, callback) {
                                // 1386
                                var that = this; // 1387
                                //
                                if (!('_send_form' in that)) {
                                    // 1389
                                    var form = that._send_form = _document.createElement('form'); // 1390
                                    //
                                    var area = that._send_area = _document.createElement('textarea'); // 1391
                                    //
                                    area.name = 'd'; // 1392
                                    form.style.display = 'none'; // 1393
                                    form.style.position = 'absolute'; // 1394
                                    form.method = 'POST'; // 1395
                                    form.enctype = 'application/x-www-form-urlencoded'; // 1396
                                    form.acceptCharset = "UTF-8"; // 1397
                                    form.appendChild(area); // 1398
                                    //
                                    _document.body.appendChild(form); // 1399
                                } // 1400
                                //
                                var form = that._send_form; // 1401
                                var area = that._send_area; // 1402
                                var id = 'a' + utils.random_string(8); // 1403
                                form.target = id; // 1404
                                form.action = url + '/jsonp_send?i=' + id; // 1405
                                var iframe; // 1407
                                //
                                try {
                                    // 1408
                                    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)                                     // 1409
                                    iframe = _document.createElement('<iframe name="' + id + '">'); // 1410
                                } catch (x) {
                                    // 1411
                                    iframe = _document.createElement('iframe'); // 1412
                                    iframe.name = id; // 1413
                                } // 1414
                                //
                                iframe.id = id; // 1415
                                form.appendChild(iframe); // 1416
                                iframe.style.display = 'none'; // 1417
                                //
                                try {
                                    // 1419
                                    area.value = payload; // 1420
                                } catch (e) {
                                    // 1421
                                    utils.log('Your browser is seriously broken. Go home! ' + e.message); // 1422
                                } // 1423
                                //
                                form.submit(); // 1424
                                //
                                var completed = function (e) {
                                    // 1426
                                    if (!iframe.onerror) return; // 1427
                                    iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
                                    // immediately, thus this timeout.                                                                         // 1430
                                    //
                                    utils.delay(500, function () {
                                        // 1431
                                        iframe.parentNode.removeChild(iframe); // 1432
                                        iframe = null; // 1433
                                    }); // 1434
                                    area.value = ''; // It is not possible to detect if the iframe succeeded or                                // 1435
                                    // failed to submit our form.                                                                              // 1437
                                    //
                                    callback(true); // 1438
                                }; // 1439
                                //
                                iframe.onerror = iframe.onload = completed; // 1440
                                //
                                iframe.onreadystatechange = function (e) {
                                    // 1441
                                    if (iframe.readyState == 'complete') completed(); // 1442
                                }; // 1443
                                //
                                return completed; // 1444
                            }; // 1445
                            //
                            var createAjaxSender = function (AjaxObject) {
                                // 1447
                                return function (url, payload, callback) {
                                    // 1448
                                    var xo = new AjaxObject('POST', url + '/xhr_send', payload); // 1449
                                    //
                                    xo.onfinish = function (status, text) {
                                        // 1450
                                        callback(status === 200 || status === 204, 'http status ' + status); // 1451
                                    }; // 1453
                                    //
                                    return function (abort_reason) {
                                        // 1454
                                        callback(false, abort_reason); // 1455
                                    }; // 1456
                                }; // 1457
                            }; //         [*] End of lib/trans-sender.js                                                                       // 1458
                            //         [*] Including lib/trans-jsonp-receiver.js                                                               // 1462
                            /*                                                                                                                 // 1463
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // Parts derived from Socket.io:                                                                               //
                            //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js                // 1472
                            // and jQuery-JSONP:                                                                                               // 1473
                            //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js                              // 1474
                            //
                            //
                            var jsonPGenericReceiver = function (url, callback) {
                                // 1475
                                var tref; // 1476
                                //
                                var script = _document.createElement('script'); // 1477
                                //
                                var script2; // Opera synchronous load trick.                                                                  // 1478
                                //
                                var close_script = function (frame) {
                                    // 1479
                                    if (script2) {
                                        // 1480
                                        script2.parentNode.removeChild(script2); // 1481
                                        script2 = null; // 1482
                                    } // 1483
                                    //
                                    if (script) {
                                        // 1484
                                        clearTimeout(tref); // Unfortunately, you can't really abort script loading of                         // 1485
                                        // the script.                                                                                         // 1487
                                        //
                                        script.parentNode.removeChild(script); // 1488
                                        script.onreadystatechange = script.onerror = script.onload = script.onclick = null; // 1489
                                        script = null; // 1491
                                        callback(frame); // 1492
                                        callback = null; // 1493
                                    } // 1494
                                }; // IE9 fires 'error' event after orsc or before, in random order.                                           // 1495
                                //
                                //
                                var loaded_okay = false; // 1498
                                var error_timer = null; // 1499
                                script.id = 'a' + utils.random_string(8); // 1501
                                script.src = url; // 1502
                                script.type = 'text/javascript'; // 1503
                                script.charset = 'UTF-8'; // 1504
                                //
                                script.onerror = function (e) {
                                    // 1505
                                    if (!error_timer) {
                                        // 1506
                                        // Delay firing close_script.                                                                          // 1507
                                        error_timer = setTimeout(function () {
                                            // 1508
                                            if (!loaded_okay) {
                                                // 1509
                                                close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onerror)")); // 1510
                                            } // 1513
                                        }, 1000); // 1514
                                    } // 1515
                                }; // 1516
                                //
                                script.onload = function (e) {
                                    // 1517
                                    close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)")); // 1518
                                }; // 1519
                                //
                                script.onreadystatechange = function (e) {
                                    // 1521
                                    if (/loaded|closed/.test(script.readyState)) {
                                        // 1522
                                        if (script && script.htmlFor && script.onclick) {
                                            // 1523
                                            loaded_okay = true; // 1524
                                            //
                                            try {
                                                // 1525
                                                // In IE, actually execute the script.                                                         // 1526
                                                script.onclick(); // 1527
                                            } catch (x) {} // 1528
                                        } // 1529
                                        //
                                        if (script) {
                                            // 1530
                                            close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)")); // 1531
                                        } // 1532
                                    } // 1533
                                }; // IE: event/htmlFor/onclick trick.                                                                         // 1534
                                // One can't rely on proper order for onreadystatechange. In order to                                          // 1536
                                // make sure, set a 'htmlFor' and 'event' properties, so that                                                  // 1537
                                // script code will be installed as 'onclick' handler for the                                                  // 1538
                                // script object. Later, onreadystatechange, manually execute this                                             // 1539
                                // code. FF and Chrome doesn't work with 'event' and 'htmlFor'                                                 // 1540
                                // set. For reference see:                                                                                     // 1541
                                //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html                                     // 1542
                                // Also, read on that about script ordering:                                                                   // 1543
                                //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order                                                // 1544
                                //
                                //
                                if (typeof script.async === 'undefined' && _document.attachEvent) {
                                    // 1545
                                    // According to mozilla docs, in recent browsers script.async defaults                                     // 1546
                                    // to 'true', so we may use it to detect a good browser:                                                   // 1547
                                    // https://developer.mozilla.org/en/HTML/Element/script                                                    // 1548
                                    if (!/opera/i.test(navigator.userAgent)) {
                                        // 1549
                                        // Naively assume we're in IE                                                                          // 1550
                                        try {
                                            // 1551
                                            script.htmlFor = script.id; // 1552
                                            script.event = "onclick"; // 1553
                                        } catch (x) {} // 1554
                                        //
                                        script.async = true; // 1555
                                    } else {
                                        // 1556
                                        // Opera, second sync script hack                                                                      // 1557
                                        script2 = _document.createElement('script'); // 1558
                                        script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
                                        script.async = script2.async = false; // 1560
                                    } // 1561
                                } // 1562
                                //
                                if (typeof script.async !== 'undefined') {
                                    // 1563
                                    script.async = true; // 1564
                                } // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.                                 // 1565
                                //
                                //
                                tref = setTimeout(function () {
                                    // 1568
                                    close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)")); // 1569
                                }, 35000); // 1570
                                //
                                var head = _document.getElementsByTagName('head')[0]; // 1572
                                //
                                head.insertBefore(script, head.firstChild); // 1573
                                //
                                if (script2) {
                                    // 1574
                                    head.insertBefore(script2, head.firstChild); // 1575
                                } // 1576
                                //
                                return close_script; // 1577
                            }; //         [*] End of lib/trans-jsonp-receiver.js                                                               // 1578
                            //         [*] Including lib/trans-jsonp-polling.js                                                                // 1582
                            /*                                                                                                                 // 1583
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // The simplest and most robust transport, using the well-know cross                                           //
                            // domain hack - JSONP. This transport is quite inefficient - one                                                  // 1592
                            // mssage could use up to one http request. But at least it works almost                                           // 1593
                            // everywhere.                                                                                                     // 1594
                            // Known limitations:                                                                                              // 1595
                            //   o you will get a spinning cursor                                                                              // 1596
                            //   o for Konqueror a dumb timer is needed to detect errors                                                       // 1597
                            //
                            //
                            var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {
                                // 1600
                                utils.polluteGlobalNamespace(); // 1601
                                var that = this; // 1602
                                that.ri = ri; // 1603
                                that.trans_url = trans_url; // 1604
                                that.send_constructor(jsonPGenericSender); // 1605
                                //
                                that._schedule_recv(); // 1606
                            }; // Inheritnace                                                                                                  // 1607
                            //
                            //
                            JsonPTransport.prototype = new BufferedSender(); // 1610
                            //
                            JsonPTransport.prototype._schedule_recv = function () {
                                // 1612
                                var that = this; // 1613
                                //
                                var callback = function (data) {
                                    // 1614
                                    that._recv_stop = null; // 1615
                                    //
                                    if (data) {
                                        // 1616
                                        // no data - heartbeat;                                                                                // 1617
                                        if (!that._is_closing) {
                                            // 1618
                                            that.ri._didMessage(data); // 1619
                                        } // 1620
                                    } // The message can be a close message, and change is_closing state.                                      // 1621
                                    //
                                    //
                                    if (!that._is_closing) {
                                        // 1623
                                        that._schedule_recv(); // 1624
                                    } // 1625
                                }; // 1626
                                //
                                that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp', jsonPGenericReceiver, callback); // 1627
                            }; // 1629
                            //
                            JsonPTransport.enabled = function () {
                                // 1631
                                return true; // 1632
                            }; // 1633
                            //
                            JsonPTransport.need_body = true; // 1635
                            //
                            JsonPTransport.prototype.doCleanup = function () {
                                // 1638
                                var that = this; // 1639
                                that._is_closing = true; // 1640
                                //
                                if (that._recv_stop) {
                                    // 1641
                                    that._recv_stop(); // 1642
                                } // 1643
                                //
                                that.ri = that._recv_stop = null; // 1644
                                that.send_destructor(); // 1645
                            }; // Abstract away code that handles global namespace pollution.                                                  // 1646
                            //
                            //
                            var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {
                                // 1650
                                var id = 'a' + utils.random_string(6); // 1651
                                var url_id = url + '?c=' + escape(WPrefix + '.' + id); // Unfortunately it is not possible to abort loading of the
                                // script. We need to keep track of frake close frames.                                                        // 1655
                                //
                                var aborting = 0; // Callback will be called exactly once.                                                     // 1656
                                //
                                var callback = function (frame) {
                                    // 1659
                                    switch (aborting) {// 1660
                                        case 0:
                                            // 1661
                                            // Normal behaviour - delete hook _and_ emit message.                                              // 1662
                                            delete _window[WPrefix][id]; // 1663
                                            user_callback(frame); // 1664
                                            break; // 1665
                                        //
                                        case 1:
                                            // 1666
                                            // Fake close frame - emit but don't delete hook.                                                  // 1667
                                            user_callback(frame); // 1668
                                            aborting = 2; // 1669
                                            break; // 1670
                                        //
                                        case 2:
                                            // 1671
                                            // Got frame after connection was closed, delete hook, don't emit.                                 // 1672
                                            delete _window[WPrefix][id]; // 1673
                                            break; // 1674
                                    } // 1660
                                }; // 1676
                                //
                                var close_script = constructReceiver(url_id, callback); // 1678
                                _window[WPrefix][id] = close_script; // 1679
                                //
                                var stop = function () {
                                    // 1680
                                    if (_window[WPrefix][id]) {
                                        // 1681
                                        aborting = 1; // 1682
                                        //
                                        _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read")); // 1683
                                    } // 1684
                                }; // 1685
                                //
                                return stop; // 1686
                            }; //         [*] End of lib/trans-jsonp-polling.js                                                                // 1687
                            //         [*] Including lib/trans-xhr.js                                                                          // 1691
                            /*                                                                                                                 // 1692
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var AjaxBasedTransport = function () {}; // 1700
                            //
                            AjaxBasedTransport.prototype = new BufferedSender(); // 1701
                            //
                            AjaxBasedTransport.prototype.run = function (ri, trans_url, url_suffix, Receiver, AjaxObject) {
                                // 1703
                                var that = this; // 1705
                                that.ri = ri; // 1706
                                that.trans_url = trans_url; // 1707
                                that.send_constructor(createAjaxSender(AjaxObject)); // 1708
                                that.poll = new Polling(ri, Receiver, trans_url + url_suffix, AjaxObject); // 1709
                            }; // 1711
                            //
                            AjaxBasedTransport.prototype.doCleanup = function () {
                                // 1713
                                var that = this; // 1714
                                //
                                if (that.poll) {
                                    // 1715
                                    that.poll.abort(); // 1716
                                    that.poll = null; // 1717
                                } // 1718
                            }; // xhr-streaming                                                                                                // 1719
                            //
                            //
                            var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {
                                // 1722
                                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject); // 1723
                            }; // 1724
                            //
                            XhrStreamingTransport.prototype = new AjaxBasedTransport(); // 1726
                            //
                            XhrStreamingTransport.enabled = function () {
                                // 1728
                                // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but                                                   // 1729
                                // doesn't do streaming.                                                                                       // 1730
                                return _window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest() && !/opera/i.test(navigator.userAgent);
                            }; // 1734
                            //
                            XhrStreamingTransport.roundTrips = 2; // preflight, ajax                                                           // 1735
                            // Safari gets confused when a streaming ajax request is started                                                   // 1737
                            // before onload. This causes the load indicator to spin indefinetely.                                             // 1738
                            //
                            XhrStreamingTransport.need_body = true; // According to:                                                           // 1739
                            //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests            // 1743
                            //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/                                         // 1744
                            // xdr-streaming                                                                                                   // 1747
                            //
                            var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {
                                // 1748
                                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject); // 1749
                            }; // 1750
                            //
                            XdrStreamingTransport.prototype = new AjaxBasedTransport(); // 1752
                            //
                            XdrStreamingTransport.enabled = function () {
                                // 1754
                                return !!_window.XDomainRequest; // 1755
                            }; // 1756
                            //
                            XdrStreamingTransport.roundTrips = 2; // preflight, ajax                                                           // 1757
                            // xhr-polling                                                                                                     // 1761
                            //
                            var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {
                                // 1762
                                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject); // 1763
                            }; // 1764
                            //
                            XhrPollingTransport.prototype = new AjaxBasedTransport(); // 1766
                            XhrPollingTransport.enabled = XhrStreamingTransport.enabled; // 1768
                            XhrPollingTransport.roundTrips = 2; // preflight, ajax                                                             // 1769
                            // xdr-polling                                                                                                     // 1772
                            //
                            var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {
                                // 1773
                                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject); // 1774
                            }; // 1775
                            //
                            XdrPollingTransport.prototype = new AjaxBasedTransport(); // 1777
                            XdrPollingTransport.enabled = XdrStreamingTransport.enabled; // 1779
                            XdrPollingTransport.roundTrips = 2; // preflight, ajax                                                             // 1780
                            //         [*] End of lib/trans-xhr.js                                                                             // 1781
                            //         [*] Including lib/trans-iframe.js                                                                       // 1784
                            /*                                                                                                                 // 1785
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // Few cool transports do work only for same-origin. In order to make                                          //
                            // them working cross-domain we shall use iframe, served form the                                                  // 1794
                            // remote domain. New browsers, have capabilities to communicate with                                              // 1795
                            // cross domain iframe, using postMessage(). In IE it was implemented                                              // 1796
                            // from IE 8+, but of course, IE got some details wrong:                                                           // 1797
                            //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx                                               // 1798
                            //    http://stevesouders.com/misc/test-postmessage.php                                                            // 1799
                            //
                            var IframeTransport = function () {}; // 1801
                            //
                            IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {
                                // 1803
                                var that = this; // 1804
                                that.ri = ri; // 1805
                                that.origin = utils.getOrigin(base_url); // 1806
                                that.base_url = base_url; // 1807
                                that.trans_url = trans_url; // 1808
                                var iframe_url = base_url + '/iframe.html'; // 1810
                                //
                                if (that.ri._options.devel) {
                                    // 1811
                                    iframe_url += '?t=' + +new Date(); // 1812
                                } // 1813
                                //
                                that.window_id = utils.random_string(8); // 1814
                                iframe_url += '#' + that.window_id; // 1815
                                that.iframeObj = utils.createIframe(iframe_url, function (r) {
                                    // 1817
                                    that.ri._didClose(1006, "Unable to load an iframe (" + r + ")"); // 1818
                                }); // 1819
                                that.onmessage_cb = utils.bind(that.onmessage, that); // 1821
                                utils.attachMessage(that.onmessage_cb); // 1822
                            }; // 1823
                            //
                            IframeTransport.prototype.doCleanup = function () {
                                // 1825
                                var that = this; // 1826
                                //
                                if (that.iframeObj) {
                                    // 1827
                                    utils.detachMessage(that.onmessage_cb); // 1828
                                    //
                                    try {
                                        // 1829
                                        // When the iframe is not loaded, IE raises an exception                                               // 1830
                                        // on 'contentWindow'.                                                                                 // 1831
                                        if (that.iframeObj.iframe.contentWindow) {
                                            // 1832
                                            that.postMessage('c'); // 1833
                                        } // 1834
                                    } catch (x) {} // 1835
                                    //
                                    that.iframeObj.cleanup(); // 1836
                                    that.iframeObj = null; // 1837
                                    that.onmessage_cb = that.iframeObj = null; // 1838
                                } // 1839
                            }; // 1840
                            //
                            IframeTransport.prototype.onmessage = function (e) {
                                // 1842
                                var that = this; // 1843
                                if (e.origin !== that.origin) return; // 1844
                                var window_id = e.data.slice(0, 8); // 1845
                                var type = e.data.slice(8, 9); // 1846
                                var data = e.data.slice(9); // 1847
                                if (window_id !== that.window_id) return; // 1849
                                //
                                switch (type) {// 1851
                                    case 's':
                                        // 1852
                                        that.iframeObj.loaded(); // 1853
                                        that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));
                                        break; // 1855
                                    //
                                    case 't':
                                        // 1856
                                        that.ri._didMessage(data); // 1857
                                        //
                                        break; // 1858
                                } // 1851
                            }; // 1860
                            //
                            IframeTransport.prototype.postMessage = function (type, data) {
                                // 1862
                                var that = this; // 1863
                                that.iframeObj.post(that.window_id + type + (data || ''), that.origin); // 1864
                            }; // 1865
                            //
                            IframeTransport.prototype.doSend = function (message) {
                                // 1867
                                this.postMessage('m', message); // 1868
                            }; // 1869
                            //
                            IframeTransport.enabled = function () {
                                // 1871
                                // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with                                 // 1872
                                // huge delay, or not at all.                                                                                  // 1873
                                var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1; // 1874
                                return (typeof _window.postMessage === 'function' || (0, _typeof3.default)(_window.postMessage) === 'object') && !konqueror;
                            }; //         [*] End of lib/trans-iframe.js                                                                       // 1877
                            //         [*] Including lib/trans-iframe-within.js                                                                // 1881
                            /*                                                                                                                 // 1882
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var curr_window_id; // 1890
                            //
                            var postMessage = function (type, data) {
                                // 1892
                                if (parent !== _window) {
                                    // 1893
                                    parent.postMessage(curr_window_id + type + (data || ''), '*'); // 1894
                                } else {
                                    // 1895
                                    utils.log("Can't postMessage, no parent window.", type, data); // 1896
                                } // 1897
                            }; // 1898
                            //
                            var FacadeJS = function () {}; // 1900
                            //
                            FacadeJS.prototype._didClose = function (code, reason) {
                                // 1901
                                postMessage('t', utils.closeFrame(code, reason)); // 1902
                            }; // 1903
                            //
                            FacadeJS.prototype._didMessage = function (frame) {
                                // 1904
                                postMessage('t', frame); // 1905
                            }; // 1906
                            //
                            FacadeJS.prototype._doSend = function (data) {
                                // 1907
                                this._transport.doSend(data); // 1908
                            }; // 1909
                            //
                            FacadeJS.prototype._doCleanup = function () {
                                // 1910
                                this._transport.doCleanup(); // 1911
                            }; // 1912
                            //
                            utils.parent_origin = undefined; // 1914
                            //
                            SockJS.bootstrap_iframe = function () {
                                // 1916
                                var facade; // 1917
                                curr_window_id = _document.location.hash.slice(1); // 1918
                                //
                                var onMessage = function (e) {
                                    // 1919
                                    if (e.source !== parent) return; // 1920
                                    if (typeof utils.parent_origin === 'undefined') utils.parent_origin = e.origin; // 1921
                                    if (e.origin !== utils.parent_origin) return; // 1923
                                    var window_id = e.data.slice(0, 8); // 1925
                                    var type = e.data.slice(8, 9); // 1926
                                    var data = e.data.slice(9); // 1927
                                    if (window_id !== curr_window_id) return; // 1928
                                    //
                                    switch (type) {// 1929
                                        case 's':
                                            // 1930
                                            var p = JSON.parse(data); // 1931
                                            var version = p[0]; // 1932
                                            var protocol = p[1]; // 1933
                                            var trans_url = p[2]; // 1934
                                            var base_url = p[3]; // 1935
                                            //
                                            if (version !== SockJS.version) {
                                                // 1936
                                                utils.log("Incompatibile SockJS! Main site uses:" + " \"" + version + "\", the iframe:" + " \"" + SockJS.version + "\".");
                                            } // 1940
                                            //
                                            if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {
                                                // 1941
                                                utils.log("Only basic urls are supported in SockJS"); // 1942
                                                return; // 1943
                                            } // 1944
                                            //
                                            if (!utils.isSameOriginUrl(trans_url) || !utils.isSameOriginUrl(base_url)) {
                                                // 1946
                                                utils.log("Can't connect to different domain from within an " + "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) + ")");
                                                return; // 1951
                                            } // 1952
                                            //
                                            facade = new FacadeJS(); // 1953
                                            facade._transport = new FacadeJS[protocol](facade, trans_url, base_url); // 1954
                                            break; // 1955
                                        //
                                        case 'm':
                                            // 1956
                                            facade._doSend(data); // 1957
                                            //
                                            break; // 1958
                                        //
                                        case 'c':
                                            // 1959
                                            if (facade) facade._doCleanup(); // 1960
                                            facade = null; // 1962
                                            break; // 1963
                                    } // 1929
                                }; // alert('test ticker');                                                                                    // 1965
                                // facade = new FacadeJS();                                                                                    // 1968
                                // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');    // 1969
                                //
                                //
                                utils.attachMessage(onMessage); // Start                                                                       // 1971
                                //
                                postMessage('s'); // 1974
                            }; //         [*] End of lib/trans-iframe-within.js                                                                // 1975
                            //         [*] Including lib/info.js                                                                               // 1979
                            /*                                                                                                                 // 1980
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var InfoReceiver = function (base_url, AjaxObject) {
                                // 1988
                                var that = this; // 1989
                                utils.delay(function () {
                                    // 1990
                                    that.doXhr(base_url, AjaxObject); // 1990
                                }); // 1990
                            }; // 1991
                            //
                            InfoReceiver.prototype = new EventEmitter(['finish']); // 1993
                            //
                            InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {
                                // 1995
                                var that = this; // 1996
                                var t0 = new Date().getTime(); // <METEOR>                                                                     // 1997
                                // https://github.com/sockjs/sockjs-client/pull/129                                                            // 2000
                                // var xo = new AjaxObject('GET', base_url + '/info');                                                         // 2001
                                //
                                var xo = new AjaxObject( // add cachebusting parameter to url to work around a chrome bug:                     // 2003
                                // https://code.google.com/p/chromium/issues/detail?id=263981                                                  // 2005
                                // or misbehaving proxies.                                                                                     // 2006
                                'GET', base_url + '/info?cb=' + utils.random_string(10)); // </METEOR>                                         // 2007
                                //
                                var tref = utils.delay(8000, function () {
                                    // 2010
                                    xo.ontimeout(); // 2011
                                }); // 2011
                                //
                                xo.onfinish = function (status, text) {
                                    // 2013
                                    clearTimeout(tref); // 2014
                                    tref = null; // 2015
                                    //
                                    if (status === 200) {
                                        // 2016
                                        var rtt = new Date().getTime() - t0; // 2017
                                        var info = JSON.parse(text); // 2018
                                        if ((typeof info === "undefined" ? "undefined" : (0, _typeof3.default)(info)) !== 'object') info = {};
                                        that.emit('finish', info, rtt); // 2020
                                    } else {
                                        // 2021
                                        that.emit('finish'); // 2022
                                    } // 2023
                                }; // 2024
                                //
                                xo.ontimeout = function () {
                                    // 2025
                                    xo.close(); // 2026
                                    that.emit('finish'); // 2027
                                }; // 2028
                            }; // 2029
                            //
                            var InfoReceiverIframe = function (base_url) {
                                // 2031
                                var that = this; // 2032
                                //
                                var go = function () {
                                    // 2033
                                    var ifr = new IframeTransport(); // 2034
                                    ifr.protocol = 'w-iframe-info-receiver'; // 2035
                                    //
                                    var fun = function (r) {
                                        // 2036
                                        if (typeof r === 'string' && r.substr(0, 1) === 'm') {
                                            // 2037
                                            var d = JSON.parse(r.substr(1)); // 2038
                                            var info = d[0],
                                                // 2039
                                            rtt = d[1]; // 2039
                                            that.emit('finish', info, rtt); // 2040
                                        } else {
                                            // 2041
                                            that.emit('finish'); // 2042
                                        } // 2043
                                        //
                                        ifr.doCleanup(); // 2044
                                        ifr = null; // 2045
                                    }; // 2046
                                    //
                                    var mock_ri = { // 2047
                                        _options: {}, // 2048
                                        _didClose: fun, // 2049
                                        _didMessage: fun // 2050
                                    }; // 2047
                                    ifr.i_constructor(mock_ri, base_url, base_url); // 2052
                                }; // 2053
                                //
                                if (!_document.body) {
                                    // 2054
                                    utils.attachEvent('load', go); // 2055
                                } else {
                                    // 2056
                                    go(); // 2057
                                } // 2058
                            }; // 2059
                            //
                            InfoReceiverIframe.prototype = new EventEmitter(['finish']); // 2060
                            //
                            var InfoReceiverFake = function () {
                                // 2063
                                // It may not be possible to do cross domain AJAX to get the info                                              // 2064
                                // data, for example for IE7. But we want to run JSONP, so let's                                               // 2065
                                // fake the response, with rtt=2s (rto=6s).                                                                    // 2066
                                var that = this; // 2067
                                utils.delay(function () {
                                    // 2068
                                    that.emit('finish', {}, 2000); // 2069
                                }); // 2070
                            }; // 2071
                            //
                            InfoReceiverFake.prototype = new EventEmitter(['finish']); // 2072
                            //
                            var createInfoReceiver = function (base_url) {
                                // 2074
                                if (utils.isSameOriginUrl(base_url)) {
                                    // 2075
                                    // If, for some reason, we have SockJS locally - there's no                                                // 2076
                                    // need to start up the complex machinery. Just use ajax.                                                  // 2077
                                    return new InfoReceiver(base_url, utils.XHRLocalObject); // 2078
                                } // 2079
                                //
                                switch (utils.isXHRCorsCapable()) {// 2080
                                    case 1:
                                        // 2081
                                        // XHRLocalObject -> no_credentials=true                                                               // 2082
                                        return new InfoReceiver(base_url, utils.XHRLocalObject); // 2083
                                    //
                                    case 2:
                                        // 2084
                                        // <METEOR>                                                                                            // 2085
                                        // https://github.com/sockjs/sockjs-client/issues/79                                                   // 2086
                                        // XDR doesn't work across different schemes                                                           // 2087
                                        // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
                                        if (utils.isSameOriginScheme(base_url)) return new InfoReceiver(base_url, utils.XDRObject);else return new InfoReceiverFake();
                                    // </METEOR>                                                                                               // 2093
                                    //
                                    case 3:
                                        // 2094
                                        // Opera                                                                                               // 2095
                                        return new InfoReceiverIframe(base_url); // 2096
                                    //
                                    default:
                                        // 2097
                                        // IE 7                                                                                                // 2098
                                        return new InfoReceiverFake(); // 2099
                                } // 2080
                                //
                                ; // 2100
                            }; // 2101
                            //
                            var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {
                                // 2104
                                var ir = new InfoReceiver(base_url, utils.XHRLocalObject); // 2105
                                //
                                ir.onfinish = function (info, rtt) {
                                    // 2106
                                    ri._didMessage('m' + JSON.stringify([info, rtt])); // 2107
                                    //
                                    ri._didClose(); // 2108
                                }; // 2109
                            }; // 2110
                            //
                            WInfoReceiverIframe.prototype.doCleanup = function () {}; //         [*] End of lib/info.js                        // 2111
                            //         [*] Including lib/trans-iframe-eventsource.js                                                           // 2115
                            /*                                                                                                                 // 2116
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {
                                // 2124
                                var that = this; // 2125
                                that.protocol = 'w-iframe-eventsource'; // 2126
                                that.i_constructor.apply(that, arguments); // 2127
                            }; // 2128
                            //
                            EventSourceIframeTransport.prototype = new IframeTransport(); // 2130
                            //
                            EventSourceIframeTransport.enabled = function () {
                                // 2132
                                return 'EventSource' in _window && IframeTransport.enabled(); // 2133
                            }; // 2134
                            //
                            EventSourceIframeTransport.need_body = true; // 2136
                            EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource                                        // 2137
                            // w-iframe-eventsource                                                                                            // 2140
                            //
                            var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {
                                // 2141
                                this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject); // 2142
                            }; // 2143
                            //
                            EventSourceTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-eventsource.js   // 2144
                            //         [*] Including lib/trans-iframe-xhr-polling.js                                                           // 2148
                            /*                                                                                                                 // 2149
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {
                                // 2157
                                var that = this; // 2158
                                that.protocol = 'w-iframe-xhr-polling'; // 2159
                                that.i_constructor.apply(that, arguments); // 2160
                            }; // 2161
                            //
                            XhrPollingIframeTransport.prototype = new IframeTransport(); // 2163
                            //
                            XhrPollingIframeTransport.enabled = function () {
                                // 2165
                                return _window.XMLHttpRequest && IframeTransport.enabled(); // 2166
                            }; // 2167
                            //
                            XhrPollingIframeTransport.need_body = true; // 2169
                            XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr                                                 // 2170
                            // w-iframe-xhr-polling                                                                                            // 2173
                            //
                            var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {
                                // 2174
                                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject); // 2175
                            }; // 2176
                            //
                            XhrPollingITransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-xhr-polling.js   // 2178
                            //         [*] Including lib/trans-iframe-htmlfile.js                                                              // 2182
                            /*                                                                                                                 // 2183
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // This transport generally works in any browser, but will cause a                                             //
                            // spinning cursor to appear in any browser other than IE.                                                         // 2192
                            // We may test this transport in all browsers - why not, but in                                                    // 2193
                            // production it should be only run in IE.                                                                         // 2194
                            //
                            var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {
                                // 2196
                                var that = this; // 2197
                                that.protocol = 'w-iframe-htmlfile'; // 2198
                                that.i_constructor.apply(that, arguments); // 2199
                            }; // Inheritance.                                                                                                 // 2200
                            //
                            //
                            HtmlFileIframeTransport.prototype = new IframeTransport(); // 2203
                            //
                            HtmlFileIframeTransport.enabled = function () {
                                // 2205
                                return IframeTransport.enabled(); // 2206
                            }; // 2207
                            //
                            HtmlFileIframeTransport.need_body = true; // 2209
                            HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile                                              // 2210
                            // w-iframe-htmlfile                                                                                               // 2213
                            //
                            var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {
                                // 2214
                                this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject); // 2215
                            }; // 2216
                            //
                            HtmlFileTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-htmlfile.js         // 2217
                            //         [*] Including lib/trans-polling.js                                                                      // 2221
                            /*                                                                                                                 // 2222
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var Polling = function (ri, Receiver, recv_url, AjaxObject) {
                                // 2230
                                var that = this; // 2231
                                that.ri = ri; // 2232
                                that.Receiver = Receiver; // 2233
                                that.recv_url = recv_url; // 2234
                                that.AjaxObject = AjaxObject; // 2235
                                //
                                that._scheduleRecv(); // 2236
                            }; // 2237
                            //
                            Polling.prototype._scheduleRecv = function () {
                                // 2239
                                var that = this; // 2240
                                var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject); // 2241
                                var msg_counter = 0; // 2242
                                //
                                poll.onmessage = function (e) {
                                    // 2243
                                    msg_counter += 1; // 2244
                                    //
                                    that.ri._didMessage(e.data); // 2245
                                }; // 2246
                                //
                                poll.onclose = function (e) {
                                    // 2247
                                    that.poll = poll = poll.onmessage = poll.onclose = null; // 2248
                                    //
                                    if (!that.poll_is_closing) {
                                        // 2249
                                        if (e.reason === 'permanent') {
                                            // 2250
                                            that.ri._didClose(1006, 'Polling error (' + e.reason + ')'); // 2251
                                        } else {
                                            // 2252
                                            that._scheduleRecv(); // 2253
                                        } // 2254
                                    } // 2255
                                }; // 2256
                            }; // 2257
                            //
                            Polling.prototype.abort = function () {
                                // 2259
                                var that = this; // 2260
                                that.poll_is_closing = true; // 2261
                                //
                                if (that.poll) {
                                    // 2262
                                    that.poll.abort(); // 2263
                                } // 2264
                            }; //         [*] End of lib/trans-polling.js                                                                      // 2265
                            //         [*] Including lib/trans-receiver-eventsource.js                                                         // 2269
                            /*                                                                                                                 // 2270
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var EventSourceReceiver = function (url) {
                                // 2278
                                var that = this; // 2279
                                var es = new EventSource(url); // 2280
                                //
                                es.onmessage = function (e) {
                                    // 2281
                                    that.dispatchEvent(new SimpleEvent('message', { // 2282
                                        'data': unescape(e.data) // 2283
                                    })); // 2283
                                }; // 2284
                                //
                                that.es_close = es.onerror = function (e, abort_reason) {
                                    // 2285
                                    // ES on reconnection has readyState = 0 or 1.                                                             // 2286
                                    // on network error it's CLOSED = 2                                                                        // 2287
                                    var reason = abort_reason ? 'user' : es.readyState !== 2 ? 'network' : 'permanent'; // 2288
                                    that.es_close = es.onmessage = es.onerror = null; // EventSource reconnects automatically.                 // 2290
                                    //
                                    es.close(); // 2292
                                    es = null; // Safari and chrome < 15 crash if we close window before                                       // 2293
                                    // waiting for ES cleanup. See:                                                                            // 2295
                                    //   https://code.google.com/p/chromium/issues/detail?id=89155                                             // 2296
                                    //
                                    utils.delay(200, function () {
                                        // 2297
                                        that.dispatchEvent(new SimpleEvent('close', { // 2298
                                            reason: reason // 2298
                                        })); // 2298
                                    }); // 2299
                                }; // 2300
                            }; // 2301
                            //
                            EventSourceReceiver.prototype = new REventTarget(); // 2303
                            //
                            EventSourceReceiver.prototype.abort = function () {
                                // 2305
                                var that = this; // 2306
                                //
                                if (that.es_close) {
                                    // 2307
                                    that.es_close({}, true); // 2308
                                } // 2309
                            }; //         [*] End of lib/trans-receiver-eventsource.js                                                         // 2310
                            //         [*] Including lib/trans-receiver-htmlfile.js                                                            // 2314
                            /*                                                                                                                 // 2315
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var _is_ie_htmlfile_capable; // 2323
                            //
                            var isIeHtmlfileCapable = function () {
                                // 2324
                                if (_is_ie_htmlfile_capable === undefined) {
                                    // 2325
                                    if ('ActiveXObject' in _window) {
                                        // 2326
                                        try {
                                            // 2327
                                            _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile'); // 2328
                                        } catch (x) {} // 2329
                                    } else {
                                        // 2330
                                        _is_ie_htmlfile_capable = false; // 2331
                                    } // 2332
                                } // 2333
                                //
                                return _is_ie_htmlfile_capable; // 2334
                            }; // 2335
                            //
                            var HtmlfileReceiver = function (url) {
                                // 2338
                                var that = this; // 2339
                                utils.polluteGlobalNamespace(); // 2340
                                that.id = 'a' + utils.random_string(6, 26); // 2342
                                url += (url.indexOf('?') === -1 ? '?' : '&') + 'c=' + escape(WPrefix + '.' + that.id); // 2343
                                var constructor = isIeHtmlfileCapable() ? utils.createHtmlfile : utils.createIframe; // 2346
                                var iframeObj; // 2349
                                _window[WPrefix][that.id] = { // 2350
                                    start: function () {
                                        // 2351
                                        iframeObj.loaded(); // 2352
                                    }, // 2353
                                    message: function (data) {
                                        // 2354
                                        that.dispatchEvent(new SimpleEvent('message', { // 2355
                                            'data': data // 2355
                                        })); // 2355
                                    }, // 2356
                                    stop: function () {
                                        // 2357
                                        that.iframe_close({}, 'network'); // 2358
                                    } // 2359
                                }; // 2350
                                //
                                that.iframe_close = function (e, abort_reason) {
                                    // 2361
                                    iframeObj.cleanup(); // 2362
                                    that.iframe_close = iframeObj = null; // 2363
                                    delete _window[WPrefix][that.id]; // 2364
                                    that.dispatchEvent(new SimpleEvent('close', { // 2365
                                        reason: abort_reason // 2365
                                    })); // 2365
                                }; // 2366
                                //
                                iframeObj = constructor(url, function (e) {
                                    // 2367
                                    that.iframe_close({}, 'permanent'); // 2368
                                }); // 2369
                            }; // 2370
                            //
                            HtmlfileReceiver.prototype = new REventTarget(); // 2372
                            //
                            HtmlfileReceiver.prototype.abort = function () {
                                // 2374
                                var that = this; // 2375
                                //
                                if (that.iframe_close) {
                                    // 2376
                                    that.iframe_close({}, 'user'); // 2377
                                } // 2378
                            }; //         [*] End of lib/trans-receiver-htmlfile.js                                                            // 2379
                            //         [*] Including lib/trans-receiver-xhr.js                                                                 // 2383
                            /*                                                                                                                 // 2384
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ //
                            //
                            var XhrReceiver = function (url, AjaxObject) {
                                // 2392
                                var that = this; // 2393
                                var buf_pos = 0; // 2394
                                that.xo = new AjaxObject('POST', url, null); // 2396
                                //
                                that.xo.onchunk = function (status, text) {
                                    // 2397
                                    if (status !== 200) return; // 2398
                                    //
                                    while (1) {
                                        // 2399
                                        var buf = text.slice(buf_pos); // 2400
                                        var p = buf.indexOf('\n'); // 2401
                                        if (p === -1) break; // 2402
                                        buf_pos += p + 1; // 2403
                                        var msg = buf.slice(0, p); // 2404
                                        that.dispatchEvent(new SimpleEvent('message', { // 2405
                                            data: msg // 2405
                                        })); // 2405
                                    } // 2406
                                }; // 2407
                                //
                                that.xo.onfinish = function (status, text) {
                                    // 2408
                                    that.xo.onchunk(status, text); // 2409
                                    that.xo = null; // 2410
                                    var reason = status === 200 ? 'network' : 'permanent'; // 2411
                                    that.dispatchEvent(new SimpleEvent('close', { // 2412
                                        reason: reason // 2412
                                    })); // 2412
                                }; // 2413
                            }; // 2414
                            //
                            XhrReceiver.prototype = new REventTarget(); // 2416
                            //
                            XhrReceiver.prototype.abort = function () {
                                // 2418
                                var that = this; // 2419
                                //
                                if (that.xo) {
                                    // 2420
                                    that.xo.close(); // 2421
                                    that.dispatchEvent(new SimpleEvent('close', { // 2422
                                        reason: 'user' // 2422
                                    })); // 2422
                                    that.xo = null; // 2423
                                } // 2424
                            }; //         [*] End of lib/trans-receiver-xhr.js                                                                 // 2425
                            //         [*] Including lib/test-hooks.js                                                                         // 2429
                            /*                                                                                                                 // 2430
                             * ***** BEGIN LICENSE BLOCK *****                                                                                 //
                             * Copyright (c) 2011-2012 VMware, Inc.                                                                            //
                             *                                                                                                                 //
                             * For the license see COPYING.                                                                                    //
                             * ***** END LICENSE BLOCK *****                                                                                   //
                             */ // For testing                                                                                                 //
                            //
                            //
                            SockJS.getUtils = function () {
                                // 2439
                                return utils; // 2440
                            }; // 2441
                            //
                            SockJS.getIframeTransport = function () {
                                // 2443
                                return IframeTransport; // 2444
                            }; //         [*] End of lib/test-hooks.js                                                                         // 2445
                            //
                            //
                            return SockJS; // 2448
                        }(); // 2449
                        //
                        if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1); // AMD compliance                                       // 2450
                        //
                        if (typeof define === 'function' && define.amd) {
                            // 2453
                            define('sockjs', [], function () {
                                // 2454
                                return SockJS; // 2454
                            }); // 2454
                        } //     [*] End of lib/index.js                                                                                       // 2455
                        // [*] End of lib/all.js                                                                                               // 2458
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "stream_client_sockjs.js": function (_require3, _exports2, _module) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/stream_client_sockjs.js                                                                         //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module.watch(_require3("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // @param url {String} URL to Meteor app                                                                               // 3
                        //   "http://subdomain.meteor.com/" or "/" or                                                                          // 4
                        //   "ddp+sockjs://foo-**.meteor.com/sockjs"                                                                           // 5
                        LivedataTest.ClientStream = function (url, options) {
                            // 6
                            var self = this; // 7
                            self.options = _.extend({ // 8
                                retry: true // 9
                            }, options); // 8
                            //
                            self._initCommon(self.options); //// Constants                                                                       // 11
                            // how long between hearing heartbeat from the server until we declare                                               // 16
                            // the connection dead. heartbeats come every 45s (stream_server.js)                                                 // 17
                            //                                                                                                                   // 18
                            // NOTE: this is a older timeout mechanism. We now send heartbeats at                                                // 19
                            // the DDP level (https://github.com/meteor/meteor/pull/1865), and                                                   // 20
                            // expect those timeouts to kill a non-responsive connection before                                                  // 21
                            // this timeout fires. This is kept around for compatibility (when                                                   // 22
                            // talking to a server that doesn't support DDP heartbeats) and can be                                               // 23
                            // removed later.                                                                                                    // 24
                            //
                            //
                            self.HEARTBEAT_TIMEOUT = 100 * 1000; // 25
                            self.rawUrl = url; // 27
                            self.socket = null; // 28
                            self.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.                       // 30
                            // (IE8 does not support addEventListener)                                                                           // 33
                            //
                            if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener("online", _.bind(self._online, self), false /* useCapture. make FF3.6 happy. */); //// Kickoff!
                            //
                            self._launchConnection(); // 39
                        }; // 40
                        //
                        _.extend(LivedataTest.ClientStream.prototype, { // 42
                            // data is a utf8 string. Data sent while not connected is dropped on                                                // 44
                            // the floor, and it is up the user of this API to retransmit lost                                                   // 45
                            // messages on 'reset'                                                                                               // 46
                            send: function (data) {
                                // 47
                                var self = this; // 48
                                //
                                if (self.currentStatus.connected) {
                                    // 49
                                    self.socket.send(data); // 50
                                } // 51
                            }, // 52
                            // Changes where this connection points                                                                              // 54
                            _changeUrl: function (url) {
                                // 55
                                var self = this; // 56
                                self.rawUrl = url; // 57
                            }, // 58
                            _connected: function () {
                                // 60
                                var self = this; // 61
                                //
                                if (self.connectionTimer) {
                                    // 63
                                    clearTimeout(self.connectionTimer); // 64
                                    self.connectionTimer = null; // 65
                                } // 66
                                //
                                if (self.currentStatus.connected) {
                                    // 68
                                    // already connected. do nothing. this probably shouldn't happen.                                                // 69
                                    return; // 70
                                } // update status                                                                                                 // 71
                                //
                                //
                                self.currentStatus.status = "connected"; // 74
                                self.currentStatus.connected = true; // 75
                                self.currentStatus.retryCount = 0; // 76
                                self.statusChanged(); // fire resets. This must come after status change so that clients                           // 77
                                // can call send from within a reset callback.                                                                     // 80
                                //
                                _.each(self.eventCallbacks.reset, function (callback) {
                                    // 81
                                    callback(); // 81
                                }); // 81
                            }, // 83
                            _cleanup: function (maybeError) {
                                // 85
                                var self = this; // 86
                                //
                                self._clearConnectionAndHeartbeatTimers(); // 88
                                //
                                if (self.socket) {
                                    // 89
                                    self.socket.onmessage = self.socket.onclose = self.socket.onerror = self.socket.onheartbeat = function () {}; // 90
                                    //
                                    self.socket.close(); // 92
                                    self.socket = null; // 93
                                } // 94
                                //
                                _.each(self.eventCallbacks.disconnect, function (callback) {
                                    // 96
                                    callback(maybeError); // 97
                                }); // 98
                            }, // 99
                            _clearConnectionAndHeartbeatTimers: function () {
                                // 101
                                var self = this; // 102
                                //
                                if (self.connectionTimer) {
                                    // 103
                                    clearTimeout(self.connectionTimer); // 104
                                    self.connectionTimer = null; // 105
                                } // 106
                                //
                                if (self.heartbeatTimer) {
                                    // 107
                                    clearTimeout(self.heartbeatTimer); // 108
                                    self.heartbeatTimer = null; // 109
                                } // 110
                            }, // 111
                            _heartbeat_timeout: function () {
                                // 113
                                var self = this; // 114
                                //
                                Meteor._debug("Connection timeout. No sockjs heartbeat received."); // 115
                                //
                                self._lostConnection(new DDP.ConnectionError("Heartbeat timed out")); // 116
                            }, // 117
                            _heartbeat_received: function () {
                                // 119
                                var self = this; // If we've already permanently shut down this stream, the timeout is                             // 120
                                // already cleared, and we don't need to set it again.                                                             // 122
                                //
                                if (self._forcedToDisconnect) return; // 123
                                if (self.heartbeatTimer) clearTimeout(self.heartbeatTimer); // 125
                                self.heartbeatTimer = setTimeout(_.bind(self._heartbeat_timeout, self), self.HEARTBEAT_TIMEOUT); // 127
                            }, // 130
                            _sockjsProtocolsWhitelist: function () {
                                // 132
                                // only allow polling protocols. no streaming.  streaming                                                          // 133
                                // makes safari spin.                                                                                              // 134
                                var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain
                                // proxies. this seems to be resolved with iOS 6. eg                                                               // 139
                                // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.                                        // 140
                                //                                                                                                                 // 141
                                // iOS <4 doesn't support websockets at all so sockjs will just                                                    // 142
                                // immediately fall back to http                                                                                   // 143
                                //
                                var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);
                                if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist); // 148
                                return protocolsWhitelist; // 151
                            }, // 152
                            _launchConnection: function () {
                                // 154
                                var self = this; // 155
                                //
                                self._cleanup(); // cleanup the old socket, if there was one.                                                      // 156
                                //
                                //
                                var options = _.extend({ // 158
                                    protocols_whitelist: self._sockjsProtocolsWhitelist() // 159
                                }, self.options._sockjsOptions); // Convert raw URL to SockJS URL each time we open a connection, so that we       // 158
                                // can connect to random hostnames and get around browser per-host                                                 // 163
                                // connection limits.                                                                                              // 164
                                //
                                //
                                self.socket = new SockJS(toSockjsUrl(self.rawUrl), undefined, options); // 165
                                //
                                self.socket.onopen = function (data) {
                                    // 166
                                    self._connected(); // 167
                                }; // 168
                                //
                                self.socket.onmessage = function (data) {
                                    // 169
                                    self._heartbeat_received(); // 170
                                    //
                                    if (self.currentStatus.connected) _.each(self.eventCallbacks.message, function (callback) {
                                        // 172
                                        callback(data.data); // 174
                                    }); // 175
                                }; // 176
                                //
                                self.socket.onclose = function () {
                                    // 177
                                    self._lostConnection(); // 178
                                }; // 179
                                //
                                self.socket.onerror = function () {
                                    // 180
                                    // XXX is this ever called?                                                                                      // 181
                                    Meteor._debug("stream error", _.toArray(arguments), new Date().toDateString()); // 182
                                }; // 183
                                //
                                self.socket.onheartbeat = function () {
                                    // 185
                                    self._heartbeat_received(); // 186
                                }; // 187
                                //
                                if (self.connectionTimer) clearTimeout(self.connectionTimer); // 189
                                self.connectionTimer = setTimeout(function () {
                                    // 191
                                    self._lostConnection(new DDP.ConnectionError("DDP connection timed out")); // 192
                                }, self.CONNECT_TIMEOUT); // 194
                            } // 195
                        }); // 42
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "stream_client_common.js": function (_require4, _exports3, _module2) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/stream_client_common.js                                                                         //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module2.watch(_require4("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                             // 3
                        var startsWith = function (str, starts) {
                            // 4
                            return str.length >= starts.length && str.substring(0, starts.length) === starts; // 5
                        }; // 7
                        //
                        var endsWith = function (str, ends) {
                            // 8
                            return str.length >= ends.length && str.substring(str.length - ends.length) === ends; // 9
                        }; // @param url {String} URL to Meteor app, eg:                                                                       // 11
                        //   "/" or "madewith.meteor.com" or "https://foo.meteor.com"                                                          // 14
                        //   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                                 // 15
                        // @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.                                    // 16
                        // for scheme "http" and subPath "sockjs"                                                                              // 17
                        //   "http://subdomain.meteor.com/sockjs" or "/sockjs"                                                                 // 18
                        //   or "https://ddp--1234-foo.meteor.com/sockjs"                                                                      // 19
                        //
                        //
                        var translateUrl = function (url, newSchemeBase, subPath) {
                            // 20
                            if (!newSchemeBase) {
                                // 21
                                newSchemeBase = "http"; // 22
                            } // 23
                            //
                            var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//); // 25
                            var httpUrlMatch = url.match(/^http(s?):\/\//); // 26
                            var newScheme; // 27
                            //
                            if (ddpUrlMatch) {
                                // 28
                                // Remove scheme and split off the host.                                                                           // 29
                                var urlAfterDDP = url.substr(ddpUrlMatch[0].length); // 30
                                newScheme = ddpUrlMatch[1] === "i" ? newSchemeBase : newSchemeBase + "s"; // 31
                                var slashPos = urlAfterDDP.indexOf('/'); // 32
                                var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos); // 33
                                var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This
                                // allows different stream connections to connect to different hostnames                                           // 38
                                // and avoid browser per-hostname connection limits.                                                               // 39
                                //
                                host = host.replace(/\*/g, function () {
                                    // 40
                                    return Math.floor(Random.fraction() * 10); // 41
                                }); // 42
                                return newScheme + '://' + host + rest; // 44
                            } else if (httpUrlMatch) {
                                // 45
                                newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + "s"; // 46
                                var urlAfterHttp = url.substr(httpUrlMatch[0].length); // 47
                                url = newScheme + "://" + urlAfterHttp; // 48
                            } // Prefix FQDNs but not relative URLs                                                                              // 49
                            //
                            //
                            if (url.indexOf("://") === -1 && !startsWith(url, "/")) {
                                // 52
                                url = newSchemeBase + "://" + url; // 53
                            } // XXX This is not what we should be doing: if I have a site                                                       // 54
                            // deployed at "/foo", then DDP.connect("/") should actually connect                                                 // 57
                            // to "/", not to "/foo". "/" is an absolute path. (Contrast: if                                                     // 58
                            // deployed at "/foo", it would be reasonable for DDP.connect("bar")                                                 // 59
                            // to connect to "/foo/bar").                                                                                        // 60
                            //                                                                                                                   // 61
                            // We should make this properly honor absolute paths rather than                                                     // 62
                            // forcing the path to be relative to the site root. Simultaneously,                                                 // 63
                            // we should set DDP_DEFAULT_CONNECTION_URL to include the site                                                      // 64
                            // root. See also client_convenience.js #RationalizingRelativeDDPURLs                                                // 65
                            //
                            //
                            url = Meteor._relativeToSiteRootUrl(url); // 66
                            if (endsWith(url, "/")) return url + subPath;else return url + "/" + subPath; // 68
                        }; // 72
                        //
                        toSockjsUrl = function (url) {
                            // 74
                            return translateUrl(url, "http", "sockjs"); // 75
                        }; // 76
                        //
                        toWebsocketUrl = function (url) {
                            // 78
                            var ret = translateUrl(url, "ws", "websocket"); // 79
                            return ret; // 80
                        }; // 81
                        //
                        LivedataTest.toSockjsUrl = toSockjsUrl; // 83
                        //
                        _.extend(LivedataTest.ClientStream.prototype, { // 86
                            // Register for callbacks.                                                                                           // 88
                            on: function (name, callback) {
                                // 89
                                var self = this; // 90
                                if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error("unknown event type: " + name);
                                if (!self.eventCallbacks[name]) self.eventCallbacks[name] = []; // 95
                                self.eventCallbacks[name].push(callback); // 97
                            }, // 98
                            _initCommon: function (options) {
                                // 101
                                var self = this; // 102
                                options = options || {}; //// Constants                                                                            // 103
                                // how long to wait until we declare the connection attempt                                                        // 107
                                // failed.                                                                                                         // 108
                                //
                                self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000; // 109
                                self.eventCallbacks = {}; // name -> [callback]                                                                    // 111
                                //
                                self._forcedToDisconnect = false; //// Reactive status                                                             // 113
                                //
                                self.currentStatus = { // 116
                                    status: "connecting", // 117
                                    connected: false, // 118
                                    retryCount: 0 // 119
                                }; // 116
                                self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency(); // 123
                                //
                                self.statusChanged = function () {
                                    // 124
                                    if (self.statusListeners) self.statusListeners.changed(); // 125
                                }; //// Retry logic                                                                                                // 127
                                //
                                //
                                self._retry = new Retry(); // 130
                                self.connectionTimer = null; // 131
                            }, // 133
                            // Trigger a reconnect.                                                                                              // 135
                            reconnect: function (options) {
                                // 136
                                var self = this; // 137
                                options = options || {}; // 138
                                //
                                if (options.url) {
                                    // 140
                                    self._changeUrl(options.url); // 141
                                } // 142
                                //
                                if (options._sockjsOptions) {
                                    // 144
                                    self.options._sockjsOptions = options._sockjsOptions; // 145
                                } // 146
                                //
                                if (self.currentStatus.connected) {
                                    // 148
                                    if (options._force || options.url) {
                                        // 149
                                        // force reconnect.                                                                                            // 150
                                        self._lostConnection(new DDP.ForcedReconnectError()); // 151
                                    } // else, noop.                                                                                                 // 152
                                    //
                                    //
                                    return; // 153
                                } // if we're mid-connection, stop it.                                                                             // 154
                                //
                                //
                                if (self.currentStatus.status === "connecting") {
                                    // 157
                                    // Pretend it's a clean close.                                                                                   // 158
                                    self._lostConnection(); // 159
                                } // 160
                                //
                                self._retry.clear(); // 162
                                //
                                self.currentStatus.retryCount -= 1; // don't count manual retries                                                  // 163
                                //
                                self._retryNow(); // 164
                            }, // 165
                            disconnect: function (options) {
                                // 167
                                var self = this; // 168
                                options = options || {}; // Failed is permanent. If we're failed, don't let people go back                         // 169
                                // online by calling 'disconnect' then 'reconnect'.                                                                // 172
                                //
                                if (self._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream      // 173
                                // is forced to disconnect, it can never reconnect. This is for                                                    // 177
                                // error cases such as ddp version mismatch, where trying again                                                    // 178
                                // won't fix the problem.                                                                                          // 179
                                //
                                if (options._permanent) {
                                    // 180
                                    self._forcedToDisconnect = true; // 181
                                } // 182
                                //
                                self._cleanup(); // 184
                                //
                                self._retry.clear(); // 185
                                //
                                self.currentStatus = { // 187
                                    status: options._permanent ? "failed" : "offline", // 188
                                    connected: false, // 189
                                    retryCount: 0 // 190
                                }; // 187
                                if (options._permanent && options._error) self.currentStatus.reason = options._error; // 193
                                self.statusChanged(); // 196
                            }, // 197
                            // maybeError is set unless it's a clean protocol-level close.                                                       // 199
                            _lostConnection: function (maybeError) {
                                // 200
                                var self = this; // 201
                                //
                                self._cleanup(maybeError); // 203
                                //
                                self._retryLater(maybeError); // sets status. no need to do it here.                                               // 204
                                //
                            }, // 205
                            // fired when we detect that we've gone online. try to reconnect                                                     // 207
                            // immediately.                                                                                                      // 208
                            _online: function () {
                                // 209
                                // if we've requested to be offline by disconnecting, don't reconnect.                                             // 210
                                if (this.currentStatus.status != "offline") this.reconnect(); // 211
                            }, // 213
                            _retryLater: function (maybeError) {
                                // 215
                                var self = this; // 216
                                var timeout = 0; // 218
                                //
                                if (self.options.retry || maybeError && maybeError.errorType === "DDP.ForcedReconnectError") {
                                    // 219
                                    timeout = self._retry.retryLater(self.currentStatus.retryCount, _.bind(self._retryNow, self)); // 221
                                    self.currentStatus.status = "waiting"; // 225
                                    self.currentStatus.retryTime = new Date().getTime() + timeout; // 226
                                } else {
                                    // 227
                                    self.currentStatus.status = "failed"; // 228
                                    delete self.currentStatus.retryTime; // 229
                                } // 230
                                //
                                self.currentStatus.connected = false; // 232
                                self.statusChanged(); // 233
                            }, // 234
                            _retryNow: function () {
                                // 236
                                var self = this; // 237
                                if (self._forcedToDisconnect) return; // 239
                                self.currentStatus.retryCount += 1; // 242
                                self.currentStatus.status = "connecting"; // 243
                                self.currentStatus.connected = false; // 244
                                delete self.currentStatus.retryTime; // 245
                                self.statusChanged(); // 246
                                //
                                self._launchConnection(); // 248
                            }, // 249
                            // Get current status. Reactive.                                                                                     // 252
                            status: function () {
                                // 253
                                var self = this; // 254
                                if (self.statusListeners) self.statusListeners.depend(); // 255
                                return self.currentStatus; // 257
                            } // 258
                        }); // 86
                        //
                        DDP.ConnectionError = Meteor.makeErrorType("DDP.ConnectionError", function (message) {
                            // 261
                            var self = this; // 263
                            self.message = message; // 264
                        }); // 265
                        DDP.ForcedReconnectError = Meteor.makeErrorType("DDP.ForcedReconnectError", function () {}); // 267
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "livedata_common.js": function (_require5, _exports4, _module3) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/livedata_common.js                                                                              //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module3.watch(_require5("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        LivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS; // This is private but it's used in a few places. accounts-base uses
                        // it to get the current user. Meteor.setTimeout and friends clear                                                     // 6
                        // it. We can probably find a better way to factor this.                                                               // 7
                        //
                        DDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable(); // 8
                        DDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable(); // XXX: Keep DDP._CurrentInvocation for backwards-compatibility.
                        //
                        DDP._CurrentInvocation = DDP._CurrentMethodInvocation; // 12
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "random_stream.js": function (_require6, _exports5, _module4) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/random_stream.js                                                                                //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0; // 1
                        _module4.watch(_require6("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // Returns the named sequence of pseudo-random values.                                                                 // 3
                        // The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce                                    // 4
                        // consistent values for method calls on the client and server.                                                        // 5
                        DDP.randomStream = function (name) {
                            // 6
                            var scope = DDP._CurrentMethodInvocation.get(); // 7
                            //
                            return DDPCommon.RandomStream.get(scope, name); // 8
                        }; // 9
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "livedata_connection.js": function (_require7, _exports6, _module5) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/livedata_connection.js                                                                          //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var _typeof2 = _require7("babel-runtime/helpers/typeof"); //
                        //
                        var _typeof3 = _interopRequireDefault(_typeof2); //
                        //
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : { "default": obj };
                        } //
                        //
                        var DDP = void 0,
                            // 1
                        LivedataTest = void 0; // 1
                        _module5.watch(_require7("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            }, // 1
                            LivedataTest: function (v) {
                                // 1
                                LivedataTest = v; // 1
                            } // 1
                        }, 0); // 1
                        var MongoIDMap = void 0; // 1
                        _module5.watch(_require7("./id_map.js"), { // 1
                            MongoIDMap: function (v) {
                                // 1
                                MongoIDMap = v; // 1
                            } // 1
                        }, 1); // 1
                        //
                        if (Meteor.isServer) {
                            // 4
                            var Fiber = Npm.require('fibers'); // 5
                            //
                            var Future = Npm.require('fibers/future'); // 6
                        } // @param url {String|Object} URL to Meteor app,                                                                     // 7
                        //   or an object as a test hook (see code)                                                                            // 10
                        // Options:                                                                                                            // 11
                        //   reloadWithOutstanding: is it OK to reload if there are outstanding methods?                                       // 12
                        //   headers: extra headers to send on the websockets connection, for                                                  // 13
                        //     server-to-server DDP only                                                                                       // 14
                        //   _sockjsOptions: Specifies options to pass through to the sockjs client                                            // 15
                        //   onDDPNegotiationVersionFailure: callback when version negotiation fails.                                          // 16
                        //                                                                                                                     // 17
                        // XXX There should be a way to destroy a DDP connection, causing all                                                  // 18
                        // outstanding method calls to fail.                                                                                   // 19
                        //                                                                                                                     // 20
                        // XXX Our current way of handling failure and reconnection is great                                                   // 21
                        // for an app (where we want to tolerate being disconnected as an                                                      // 22
                        // expect state, and keep trying forever to reconnect) but cumbersome                                                  // 23
                        // for something like a command line tool that wants to make a                                                         // 24
                        // connection, call a method, and print an error if connection                                                         // 25
                        // fails. We should have better usability in the latter case (while                                                    // 26
                        // still transparently reconnecting if it's just a transient failure                                                   // 27
                        // or the server migrating us).                                                                                        // 28
                        //
                        //
                        var Connection = function (url, options) {
                            // 29
                            var self = this; // 30
                            options = _.extend({ // 31
                                onConnected: function () {}, // 32
                                onDDPVersionNegotiationFailure: function (description) {
                                    // 33
                                    Meteor._debug(description); // 34
                                }, // 35
                                heartbeatInterval: 17500, // 36
                                heartbeatTimeout: 15000, // 37
                                npmFayeOptions: {}, // 38
                                // These options are only for testing.                                                                             // 39
                                reloadWithOutstanding: false, // 40
                                supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS, // 41
                                retry: true, // 42
                                respondToPings: true, // 43
                                // When updates are coming within this ms interval, batch them together.                                           // 44
                                bufferedWritesInterval: 5, // 45
                                // Flush buffers immediately if writes are happening continuously for more than this many ms.                      // 46
                                bufferedWritesMaxAge: 500 // 47
                            }, options); // If set, called when we reconnect, queuing method calls _before_ the                                  // 31
                            // existing outstanding ones.                                                                                        // 51
                            // NOTE: This feature has been preserved for backwards compatibility. The                                            // 52
                            // preferred method of setting a callback on reconnect is to use                                                     // 53
                            // DDP.onReconnect.                                                                                                  // 54
                            //
                            self.onReconnect = null; // as a test hook, allow passing a stream instead of a url.                                 // 55
                            //
                            if ((typeof url === "undefined" ? "undefined" : (0, _typeof3.default)(url)) === "object") {
                                // 58
                                self._stream = url; // 59
                            } else {
                                // 60
                                self._stream = new LivedataTest.ClientStream(url, { // 61
                                    retry: options.retry, // 62
                                    headers: options.headers, // 63
                                    _sockjsOptions: options._sockjsOptions, // 64
                                    // Used to keep some tests quiet, or for other cases in which                                                    // 65
                                    // the right thing to do with connection errors is to silently                                                   // 66
                                    // fail (e.g. sending package usage stats). At some point we                                                     // 67
                                    // should have a real API for handling client-stream-level                                                       // 68
                                    // errors.                                                                                                       // 69
                                    _dontPrintErrors: options._dontPrintErrors, // 70
                                    connectTimeoutMs: options.connectTimeoutMs, // 71
                                    npmFayeOptions: options.npmFayeOptions // 72
                                }); // 61
                            } // 74
                            //
                            self._lastSessionId = null; // 76
                            self._versionSuggestion = null; // The last proposed DDP version.                                                    // 77
                            //
                            self._version = null; // The DDP version agreed on by client and server.                                             // 78
                            //
                            self._stores = {}; // name -> object with methods                                                                    // 79
                            //
                            self._methodHandlers = {}; // name -> func                                                                           // 80
                            //
                            self._nextMethodId = 1; // 81
                            self._supportedDDPVersions = options.supportedDDPVersions; // 82
                            self._heartbeatInterval = options.heartbeatInterval; // 84
                            self._heartbeatTimeout = options.heartbeatTimeout; // Tracks methods which the user has tried to call but which have not yet
                            // called their user callback (ie, they are waiting on their result or for all                                       // 88
                            // of their writes to be written to the local cache). Map from method ID to                                          // 89
                            // MethodInvoker object.                                                                                             // 90
                            //
                            self._methodInvokers = {}; // Tracks methods which the user has called but whose result messages have not            // 91
                            // arrived yet.                                                                                                      // 94
                            //                                                                                                                   // 95
                            // _outstandingMethodBlocks is an array of blocks of methods. Each block                                             // 96
                            // represents a set of methods that can run at the same time. The first block                                        // 97
                            // represents the methods which are currently in flight; subsequent blocks                                           // 98
                            // must wait for previous blocks to be fully finished before they can be sent                                        // 99
                            // to the server.                                                                                                    // 100
                            //                                                                                                                   // 101
                            // Each block is an object with the following fields:                                                                // 102
                            // - methods: a list of MethodInvoker objects                                                                        // 103
                            // - wait: a boolean; if true, this block had a single method invoked with                                           // 104
                            //         the "wait" option                                                                                         // 105
                            //                                                                                                                   // 106
                            // There will never be adjacent blocks with wait=false, because the only thing                                       // 107
                            // that makes methods need to be serialized is a wait method.                                                        // 108
                            //                                                                                                                   // 109
                            // Methods are removed from the first block when their "result" is                                                   // 110
                            // received. The entire first block is only removed when all of the in-flight                                        // 111
                            // methods have received their results (so the "methods" list is empty) *AND*                                        // 112
                            // all of the data written by those methods are visible in the local cache. So                                       // 113
                            // it is possible for the first block's methods list to be empty, if we are                                          // 114
                            // still waiting for some objects to quiesce.                                                                        // 115
                            //                                                                                                                   // 116
                            // Example:                                                                                                          // 117
                            //  _outstandingMethodBlocks = [                                                                                     // 118
                            //    {wait: false, methods: []},                                                                                    // 119
                            //    {wait: true, methods: [<MethodInvoker for 'login'>]},                                                          // 120
                            //    {wait: false, methods: [<MethodInvoker for 'foo'>,                                                             // 121
                            //                            <MethodInvoker for 'bar'>]}]                                                           // 122
                            // This means that there were some methods which were sent to the server and                                         // 123
                            // which have returned their results, but some of the data written by                                                // 124
                            // the methods may not be visible in the local cache. Once all that data is                                          // 125
                            // visible, we will send a 'login' method. Once the login method has returned                                        // 126
                            // and all the data is visible (including re-running subs if userId changes),                                        // 127
                            // we will send the 'foo' and 'bar' methods in parallel.                                                             // 128
                            //
                            self._outstandingMethodBlocks = []; // method ID -> array of objects with keys 'collection' and 'id', listing        // 129
                            // documents written by a given method's stub. keys are associated with                                              // 132
                            // methods whose stub wrote at least one document, and whose data-done message                                       // 133
                            // has not yet been received.                                                                                        // 134
                            //
                            self._documentsWrittenByStub = {}; // collection -> IdMap of "server document" object. A "server document" has:      // 135
                            // - "document": the version of the document according the                                                           // 137
                            //   server (ie, the snapshot before a stub wrote it, amended by any changes                                         // 138
                            //   received from the server)                                                                                       // 139
                            //   It is undefined if we think the document does not exist                                                         // 140
                            // - "writtenByStubs": a set of method IDs whose stubs wrote to the document                                         // 141
                            //   whose "data done" messages have not yet been processed                                                          // 142
                            //
                            self._serverDocuments = {}; // Array of callbacks to be called after the next update of the local                    // 143
                            // cache. Used for:                                                                                                  // 146
                            //  - Calling methodInvoker.dataVisible and sub ready callbacks after                                                // 147
                            //    the relevant data is flushed.                                                                                  // 148
                            //  - Invoking the callbacks of "half-finished" methods after reconnect                                              // 149
                            //    quiescence. Specifically, methods whose result was received over the old                                       // 150
                            //    connection (so we don't re-send it) but whose data had not been made                                           // 151
                            //    visible.                                                                                                       // 152
                            //
                            self._afterUpdateCallbacks = []; // In two contexts, we buffer all incoming data messages and then process them      // 153
                            // all at once in a single update:                                                                                   // 156
                            //   - During reconnect, we buffer all data messages until all subs that had                                         // 157
                            //     been ready before reconnect are ready again, and all methods that are                                         // 158
                            //     active have returned their "data done message"; then                                                          // 159
                            //   - During the execution of a "wait" method, we buffer all data messages                                          // 160
                            //     until the wait method gets its "data done" message. (If the wait method                                       // 161
                            //     occurs during reconnect, it doesn't get any special handling.)                                                // 162
                            // all data messages are processed in one update.                                                                    // 163
                            //                                                                                                                   // 164
                            // The following fields are used for this "quiescence" process.                                                      // 165
                            // This buffers the messages that aren't being processed yet.                                                        // 167
                            //
                            self._messagesBufferedUntilQuiescence = []; // Map from method ID -> true. Methods are removed from this when their  // 168
                            // "data done" message is received, and we will not quiesce until it is                                              // 170
                            // empty.                                                                                                            // 171
                            //
                            self._methodsBlockingQuiescence = {}; // map from sub ID -> true for subs that were ready (ie, called the sub        // 172
                            // ready callback) before reconnect but haven't become ready again yet                                               // 174
                            //
                            self._subsBeingRevived = {}; // map from sub._id -> true                                                             // 175
                            // if true, the next data update should reset all stores. (set during                                                // 176
                            // reconnect.)                                                                                                       // 177
                            //
                            self._resetStores = false; // name -> array of updates for (yet to be created) collections                           // 178
                            //
                            self._updatesForUnknownStores = {}; // if we're blocking a migration, the retry func                                 // 181
                            //
                            self._retryMigrate = null; // 183
                            self.__flushBufferedWrites = Meteor.bindEnvironment(self._flushBufferedWrites, "flushing DDP buffered writes", self); // Collection name -> array of messages.
                            //
                            self._bufferedWrites = {}; // When current buffer of updates must be flushed at, in ms timestamp.                    // 188
                            //
                            self._bufferedWritesFlushAt = null; // Timeout handle for the next processing of all pending writes                  // 190
                            //
                            self._bufferedWritesFlushHandle = null; // 192
                            self._bufferedWritesInterval = options.bufferedWritesInterval; // 194
                            self._bufferedWritesMaxAge = options.bufferedWritesMaxAge; // metadata for subscriptions.  Map from sub ID to object with keys:
                            //   - id                                                                                                            // 198
                            //   - name                                                                                                          // 199
                            //   - params                                                                                                        // 200
                            //   - inactive (if true, will be cleaned up if not reused in re-run)                                                // 201
                            //   - ready (has the 'ready' message been received?)                                                                // 202
                            //   - readyCallback (an optional callback to call when ready)                                                       // 203
                            //   - errorCallback (an optional callback to call if the sub terminates with                                        // 204
                            //                    an error, XXX COMPAT WITH 1.0.3.1)                                                             // 205
                            //   - stopCallback (an optional callback to call when the sub terminates                                            // 206
                            //     for any reason, with an error argument if an error triggered the stop)                                        // 207
                            //
                            self._subscriptions = {}; // Reactive userId.                                                                        // 208
                            //
                            self._userId = null; // 211
                            self._userIdDeps = new Tracker.Dependency(); // Block auto-reload while we're waiting for method responses.          // 212
                            //
                            if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {
                                // 215
                                Package.reload.Reload._onMigrate(function (retry) {
                                    // 216
                                    if (!self._readyToMigrate()) {
                                        // 217
                                        if (self._retryMigrate) throw new Error("Two migrations in progress?"); // 218
                                        self._retryMigrate = retry; // 220
                                        return false; // 221
                                    } else {
                                        // 222
                                        return [true]; // 223
                                    } // 224
                                }); // 225
                            } // 226
                            //
                            var onMessage = function (raw_msg) {
                                // 228
                                try {
                                    // 229
                                    var msg = DDPCommon.parseDDP(raw_msg); // 230
                                } catch (e) {
                                    // 231
                                    Meteor._debug("Exception while parsing DDP", e); // 232
                                    //
                                    return; // 233
                                } // Any message counts as receiving a pong, as it demonstrates that                                               // 234
                                // the server is still alive.                                                                                      // 237
                                //
                                //
                                if (self._heartbeat) {
                                    // 238
                                    self._heartbeat.messageReceived(); // 239
                                } // 240
                                //
                                if (msg === null || !msg.msg) {
                                    // 242
                                    // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back                                                // 243
                                    // compat.  Remove this 'if' once the server stops sending welcome                                               // 244
                                    // messages (stream_server.js).                                                                                  // 245
                                    if (!(msg && msg.server_id)) Meteor._debug("discarding invalid livedata message", msg); // 246
                                    return; // 248
                                } // 249
                                //
                                if (msg.msg === 'connected') {
                                    // 251
                                    self._version = self._versionSuggestion; // 252
                                    //
                                    self._livedata_connected(msg); // 253
                                    //
                                    options.onConnected(); // 254
                                } else if (msg.msg === 'failed') {
                                    // 255
                                    if (_.contains(self._supportedDDPVersions, msg.version)) {
                                        // 257
                                        self._versionSuggestion = msg.version; // 258
                                        //
                                        self._stream.reconnect({ // 259
                                            _force: true // 259
                                        }); // 259
                                    } else {
                                        // 260
                                        var description = "DDP version negotiation failed; server requested version " + msg.version; // 261
                                        //
                                        self._stream.disconnect({ // 263
                                            _permanent: true, // 263
                                            _error: description // 263
                                        }); // 263
                                        //
                                        options.onDDPVersionNegotiationFailure(description); // 264
                                    } // 265
                                } else if (msg.msg === 'ping' && options.respondToPings) {
                                    // 266
                                    self._send({ // 268
                                        msg: "pong", // 268
                                        id: msg.id // 268
                                    }); // 268
                                } else if (msg.msg === 'pong') {// noop, as we assume everything's a pong                                          // 269
                                } else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg)) self._livedata_data(msg);else if (msg.msg === 'nosub') self._livedata_nosub(msg);else if (msg.msg === 'result') self._livedata_result(msg);else if (msg.msg === 'error') self._livedata_error(msg);else Meteor._debug("discarding unknown livedata message type", msg);
                            }; // 283
                            //
                            var onReset = function () {
                                // 285
                                // Send a connect message at the beginning of the stream.                                                          // 286
                                // NOTE: reset is called even on the first connection, so this is                                                  // 287
                                // the only place we send this message.                                                                            // 288
                                var msg = { // 289
                                    msg: 'connect' // 289
                                }; // 289
                                if (self._lastSessionId) msg.session = self._lastSessionId; // 290
                                msg.version = self._versionSuggestion || self._supportedDDPVersions[0]; // 292
                                self._versionSuggestion = msg.version; // 293
                                msg.support = self._supportedDDPVersions; // 294
                                //
                                self._send(msg); // Mark non-retry calls as failed. This has to be done early as getting these methods out of the  // 295
                                // current block is pretty important to making sure that quiescence is properly calculated, as                     // 298
                                // well as possibly moving on to another useful block.                                                             // 299
                                // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if                    // 301
                                // we are connecting for the first time.                                                                           // 302
                                //
                                //
                                if (self._outstandingMethodBlocks.length > 0) {
                                    // 303
                                    // If there is an outstanding method block, we only care about the first one as that is the                      // 304
                                    // one that could have already sent messages with no response, that are not allowed to retry.                    // 305
                                    var currentMethodBlock = self._outstandingMethodBlocks[0].methods; // 306
                                    self._outstandingMethodBlocks[0].methods = currentMethodBlock.filter(function (methodInvoker) {
                                        // 307
                                        // Methods with 'noRetry' option set are not allowed to re-send after                                          // 309
                                        // recovering dropped connection.                                                                              // 310
                                        if (methodInvoker.sentMessage && methodInvoker.noRetry) {
                                            // 311
                                            // Make sure that the method is told that it failed.                                                         // 312
                                            methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));
                                        } // Only keep a method if it wasn't sent or it's allowed to retry.                                            // 316
                                        // This may leave the block empty, but we don't move on to the next                                            // 319
                                        // block until the callback has been delivered, in _outstandingMethodFinished.                                 // 320
                                        //
                                        //
                                        return !(methodInvoker.sentMessage && methodInvoker.noRetry); // 321
                                    }); // 322
                                } // Now, to minimize setup latency, go ahead and blast out all of                                                 // 323
                                // our pending methods ands subscriptions before we've even taken                                                  // 326
                                // the necessary RTT to know if we successfully reconnected. (1)                                                   // 327
                                // They're supposed to be idempotent, and where they are not,                                                      // 328
                                // they can block retry in apply; (2) even if we did reconnect,                                                    // 329
                                // we're not sure what messages might have gotten lost                                                             // 330
                                // (in either direction) since we were disconnected (TCP being                                                     // 331
                                // sloppy about that.)                                                                                             // 332
                                // If the current block of methods all got their results (but didn't all get                                       // 334
                                // their data visible), discard the empty block now.                                                               // 335
                                //
                                //
                                if (!_.isEmpty(self._outstandingMethodBlocks) && _.isEmpty(self._outstandingMethodBlocks[0].methods)) {
                                    // 336
                                    self._outstandingMethodBlocks.shift(); // 338
                                } // Mark all messages as unsent, they have not yet been sent on this                                              // 339
                                // connection.                                                                                                     // 342
                                //
                                //
                                _.each(self._methodInvokers, function (m) {
                                    // 343
                                    m.sentMessage = false; // 344
                                }); // If an `onReconnect` handler is set, call it first. Go through                                               // 345
                                // some hoops to ensure that methods that are called from within                                                   // 348
                                // `onReconnect` get executed _before_ ones that were originally                                                   // 349
                                // outstanding (since `onReconnect` is used to re-establish auth                                                   // 350
                                // certificates)                                                                                                   // 351
                                //
                                //
                                self._callOnReconnectAndSendAppropriateOutstandingMethods(); // add new subscriptions at the end. this way they take effect after
                                // the handlers and we don't see flicker.                                                                          // 355
                                //
                                //
                                _.each(self._subscriptions, function (sub, id) {
                                    // 356
                                    self._send({ // 357
                                        msg: 'sub', // 358
                                        id: id, // 359
                                        name: sub.name, // 360
                                        params: sub.params // 361
                                    }); // 357
                                }); // 363
                            }; // 364
                            //
                            var onDisconnect = function () {
                                // 366
                                if (self._heartbeat) {
                                    // 367
                                    self._heartbeat.stop(); // 368
                                    //
                                    self._heartbeat = null; // 369
                                } // 370
                            }; // 371
                            //
                            if (Meteor.isServer) {
                                // 373
                                self._stream.on('message', Meteor.bindEnvironment(onMessage, "handling DDP message")); // 374
                                //
                                self._stream.on('reset', Meteor.bindEnvironment(onReset, "handling DDP reset")); // 375
                                //
                                self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, "handling DDP disconnect")); // 376
                            } else {
                                // 377
                                self._stream.on('message', onMessage); // 378
                                //
                                self._stream.on('reset', onReset); // 379
                                //
                                self._stream.on('disconnect', onDisconnect); // 380
                            } // 381
                        }; // A MethodInvoker manages sending a method to the server and calling the user's                                    // 382
                        // callbacks. On construction, it registers itself in the connection's                                                 // 385
                        // _methodInvokers map; it removes itself once the method is fully finished and                                        // 386
                        // the callback is invoked. This occurs when it has both received a result,                                            // 387
                        // and the data written by it is fully visible.                                                                        // 388
                        //
                        //
                        var MethodInvoker = function (options) {
                            // 389
                            var self = this; // Public (within this file) fields.                                                                // 390
                            //
                            self.methodId = options.methodId; // 393
                            self.sentMessage = false; // 394
                            self._callback = options.callback; // 396
                            self._connection = options.connection; // 397
                            self._message = options.message; // 398
                            //
                            self._onResultReceived = options.onResultReceived || function () {}; // 399
                            //
                            self._wait = options.wait; // 400
                            self.noRetry = options.noRetry; // 401
                            self._methodResult = null; // 402
                            self._dataVisible = false; // Register with the connection.                                                          // 403
                            //
                            self._connection._methodInvokers[self.methodId] = self; // 406
                        }; // 407
                        //
                        _.extend(MethodInvoker.prototype, { // 408
                            // Sends the method message to the server. May be called additional times if                                         // 409
                            // we lose the connection and reconnect before receiving a result.                                                   // 410
                            sendMessage: function () {
                                // 411
                                var self = this; // This function is called before sending a method (including resending on                        // 412
                                // reconnect). We should only (re)send methods where we don't already have a                                       // 414
                                // result!                                                                                                         // 415
                                //
                                if (self.gotResult()) throw new Error("sendingMethod is called on method with result"); // If we're re-sending it, it doesn't matter if data was written the first
                                // time.                                                                                                           // 421
                                //
                                self._dataVisible = false; // 422
                                self.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is               // 423
                                // done.                                                                                                           // 426
                                //
                                if (self._wait) self._connection._methodsBlockingQuiescence[self.methodId] = true; // Actually send the message.   // 427
                                //
                                self._connection._send(self._message); // 431
                            }, // 432
                            // Invoke the callback, if we have both a result and know that all data has                                          // 433
                            // been written to the local cache.                                                                                  // 434
                            _maybeInvokeCallback: function () {
                                // 435
                                var self = this; // 436
                                //
                                if (self._methodResult && self._dataVisible) {
                                    // 437
                                    // Call the callback. (This won't throw: the callback was wrapped with                                           // 438
                                    // bindEnvironment.)                                                                                             // 439
                                    self._callback(self._methodResult[0], self._methodResult[1]); // Forget about this method.                       // 440
                                    //
                                    //
                                    delete self._connection._methodInvokers[self.methodId]; // Let the connection know that this method is finished, so it can try to
                                    // move on to the next block of methods.                                                                         // 446
                                    //
                                    self._connection._outstandingMethodFinished(); // 447
                                } // 448
                            }, // 449
                            // Call with the result of the method from the server. Only may be called                                            // 450
                            // once; once it is called, you should not call sendMessage again.                                                   // 451
                            // If the user provided an onResultReceived callback, call it immediately.                                           // 452
                            // Then invoke the main callback if data is also visible.                                                            // 453
                            receiveResult: function (err, result) {
                                // 454
                                var self = this; // 455
                                if (self.gotResult()) throw new Error("Methods should only receive results once"); // 456
                                self._methodResult = [err, result]; // 458
                                //
                                self._onResultReceived(err, result); // 459
                                //
                                self._maybeInvokeCallback(); // 460
                            }, // 461
                            // Call this when all data written by the method is visible. This means that                                         // 462
                            // the method has returns its "data is done" message *AND* all server                                                // 463
                            // documents that are buffered at that time have been written to the local                                           // 464
                            // cache. Invokes the main callback if the result has been received.                                                 // 465
                            dataVisible: function () {
                                // 466
                                var self = this; // 467
                                self._dataVisible = true; // 468
                                //
                                self._maybeInvokeCallback(); // 469
                            }, // 470
                            // True if receiveResult has been called.                                                                            // 471
                            gotResult: function () {
                                // 472
                                var self = this; // 473
                                return !!self._methodResult; // 474
                            } // 475
                        }); // 408
                        //
                        _.extend(Connection.prototype, { // 478
                            // 'name' is the name of the data on the wire that should go in the                                                  // 479
                            // store. 'wrappedStore' should be an object with methods beginUpdate, update,                                       // 480
                            // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.                                       // 481
                            registerStore: function (name, wrappedStore) {
                                // 482
                                var self = this; // 483
                                if (name in self._stores) return false; // Wrap the input object in an object which makes any store method not     // 485
                                // implemented by 'store' into a no-op.                                                                            // 489
                                //
                                var store = {}; // 490
                                //
                                _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals', 'retrieveOriginals', 'getDoc', '_getCollection'], function (method) {
                                    store[method] = function () {
                                        // 494
                                        return wrappedStore[method] ? wrappedStore[method].apply(wrappedStore, arguments) : undefined; // 495
                                    }; // 498
                                }); // 499
                                //
                                self._stores[name] = store; // 501
                                var queued = self._updatesForUnknownStores[name]; // 503
                                //
                                if (queued) {
                                    // 504
                                    store.beginUpdate(queued.length, false); // 505
                                    //
                                    _.each(queued, function (msg) {
                                        // 506
                                        store.update(msg); // 507
                                    }); // 508
                                    //
                                    store.endUpdate(); // 509
                                    delete self._updatesForUnknownStores[name]; // 510
                                } // 511
                                //
                                return true; // 513
                            }, // 514
                            /**                                                                                                                  // 516
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             * @summary Subscribe to a record set.  Returns a handle that provides                                               //
                             * `stop()` and `ready()` methods.                                                                                   //
                             * @locus Client                                                                                                     //
                             * @param {String} name Name of the subscription.  Matches the name of the                                           //
                             * server's `publish()` call.                                                                                        //
                             * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher                                          //
                             * function on server.                                                                                               //
                             * @param {Function|Object} [callbacks] Optional. May include `onStop`                                               //
                             * and `onReady` callbacks. If there is an error, it is passed as an                                                 //
                             * argument to `onStop`. If a function is passed instead of an object, it                                            //
                             * is interpreted as an `onReady` callback.                                                                          //
                             */subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {
                                //
                                var self = this; // 532
                                var params = Array.prototype.slice.call(arguments, 1); // 534
                                var callbacks = {}; // 535
                                //
                                if (params.length) {
                                    // 536
                                    var lastParam = params[params.length - 1]; // 537
                                    //
                                    if (_.isFunction(lastParam)) {
                                        // 538
                                        callbacks.onReady = params.pop(); // 539
                                    } else if (lastParam && // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                         // 540
                                    // onStop with an error callback instead.                                                                        // 542
                                    _.any([lastParam.onReady, lastParam.onError, lastParam.onStop], _.isFunction)) {
                                        // 543
                                        callbacks = params.pop(); // 545
                                    } // 546
                                } // Is there an existing sub with the same name and param, run in an                                              // 547
                                // invalidated Computation? This will happen if we are rerunning an                                                // 550
                                // existing computation.                                                                                           // 551
                                //                                                                                                                 // 552
                                // For example, consider a rerun of:                                                                               // 553
                                //                                                                                                                 // 554
                                //     Tracker.autorun(function () {                                                                               // 555
                                //       Meteor.subscribe("foo", Session.get("foo"));                                                              // 556
                                //       Meteor.subscribe("bar", Session.get("bar"));                                                              // 557
                                //     });                                                                                                         // 558
                                //                                                                                                                 // 559
                                // If "foo" has changed but "bar" has not, we will match the "bar"                                                 // 560
                                // subcribe to an existing inactive subscription in order to not                                                   // 561
                                // unsub and resub the subscription unnecessarily.                                                                 // 562
                                //                                                                                                                 // 563
                                // We only look for one such sub; if there are N apparently-identical subs                                         // 564
                                // being invalidated, we will require N matching subscribe calls to keep                                           // 565
                                // them all active.                                                                                                // 566
                                //
                                //
                                var existing = _.find(self._subscriptions, function (sub) {
                                    // 567
                                    return sub.inactive && sub.name === name && EJSON.equals(sub.params, params); // 568
                                }); // 570
                                //
                                var id; // 572
                                //
                                if (existing) {
                                    // 573
                                    id = existing.id; // 574
                                    existing.inactive = false; // reactivate                                                                         // 575
                                    //
                                    if (callbacks.onReady) {
                                        // 577
                                        // If the sub is not already ready, replace any ready callback with the                                        // 578
                                        // one provided now. (It's not really clear what users would expect for                                        // 579
                                        // an onReady callback inside an autorun; the semantics we provide is                                          // 580
                                        // that at the time the sub first becomes ready, we call the last                                              // 581
                                        // onReady callback provided, if any.)                                                                         // 582
                                        // If the sub is already ready, run the ready callback right away.                                             // 583
                                        // It seems that users would expect an onReady callback inside an                                              // 584
                                        // autorun to trigger once the the sub first becomes ready and also                                            // 585
                                        // when re-subs happens.                                                                                       // 586
                                        if (existing.ready) {
                                            // 587
                                            callbacks.onReady(); // 588
                                        } else {
                                            // 589
                                            existing.readyCallback = callbacks.onReady; // 590
                                        } // 591
                                    } // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call                                             // 592
                                    // onStop with an optional error argument                                                                        // 595
                                    //
                                    //
                                    if (callbacks.onError) {
                                        // 596
                                        // Replace existing callback if any, so that errors aren't                                                     // 597
                                        // double-reported.                                                                                            // 598
                                        existing.errorCallback = callbacks.onError; // 599
                                    } // 600
                                    //
                                    if (callbacks.onStop) {
                                        // 602
                                        existing.stopCallback = callbacks.onStop; // 603
                                    } // 604
                                } else {
                                    // 605
                                    // New sub! Generate an id, save it locally, and send message.                                                   // 606
                                    id = Random.id(); // 607
                                    self._subscriptions[id] = { // 608
                                        id: id, // 609
                                        name: name, // 610
                                        params: EJSON.clone(params), // 611
                                        inactive: false, // 612
                                        ready: false, // 613
                                        readyDeps: new Tracker.Dependency(), // 614
                                        readyCallback: callbacks.onReady, // 615
                                        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                      // 616
                                        errorCallback: callbacks.onError, // 617
                                        stopCallback: callbacks.onStop, // 618
                                        connection: self, // 619
                                        remove: function () {
                                            // 620
                                            delete this.connection._subscriptions[this.id]; // 621
                                            this.ready && this.readyDeps.changed(); // 622
                                        }, // 623
                                        stop: function () {
                                            // 624
                                            this.connection._send({ // 625
                                                msg: 'unsub', // 625
                                                id: id // 625
                                            }); // 625
                                            //
                                            this.remove(); // 626
                                            //
                                            if (callbacks.onStop) {
                                                // 628
                                                callbacks.onStop(); // 629
                                            } // 630
                                        } // 631
                                    }; // 608
                                    //
                                    self._send({ // 633
                                        msg: 'sub', // 633
                                        id: id, // 633
                                        name: name, // 633
                                        params: params // 633
                                    }); // 633
                                } // return a handle to the application.                                                                           // 634
                                //
                                //
                                var handle = { // 637
                                    stop: function () {
                                        // 638
                                        if (!_.has(self._subscriptions, id)) return; // 639
                                        //
                                        self._subscriptions[id].stop(); // 642
                                    }, // 643
                                    ready: function () {
                                        // 644
                                        // return false if we've unsubscribed.                                                                         // 645
                                        if (!_.has(self._subscriptions, id)) return false; // 646
                                        var record = self._subscriptions[id]; // 648
                                        record.readyDeps.depend(); // 649
                                        return record.ready; // 650
                                    }, // 651
                                    subscriptionId: id // 652
                                }; // 637
                                //
                                if (Tracker.active) {
                                    // 655
                                    // We're in a reactive computation, so we'd like to unsubscribe when the                                         // 656
                                    // computation is invalidated... but not if the rerun just re-subscribes                                         // 657
                                    // to the same subscription!  When a rerun happens, we use onInvalidate                                          // 658
                                    // as a change to mark the subscription "inactive" so that it can                                                // 659
                                    // be reused from the rerun.  If it isn't reused, it's killed from                                               // 660
                                    // an afterFlush.                                                                                                // 661
                                    Tracker.onInvalidate(function (c) {
                                        // 662
                                        if (_.has(self._subscriptions, id)) self._subscriptions[id].inactive = true; // 663
                                        Tracker.afterFlush(function () {
                                            // 666
                                            if (_.has(self._subscriptions, id) && self._subscriptions[id].inactive) handle.stop(); // 667
                                        }); // 670
                                    }); // 671
                                } // 672
                                //
                                return handle; // 674
                            }, // 675
                            // options:                                                                                                          // 677
                            // - onLateError {Function(error)} called if an error was received after the ready event.                            // 678
                            //     (errors received before ready cause an error to be thrown)                                                    // 679
                            _subscribeAndWait: function (name, args, options) {
                                // 680
                                var self = this; // 681
                                var f = new Future(); // 682
                                var ready = false; // 683
                                var handle; // 684
                                args = args || []; // 685
                                args.push({ // 686
                                    onReady: function () {
                                        // 687
                                        ready = true; // 688
                                        f['return'](); // 689
                                    }, // 690
                                    onError: function (e) {
                                        // 691
                                        if (!ready) f['throw'](e);else options && options.onLateError && options.onLateError(e); // 692
                                    } // 696
                                }); // 686
                                handle = self.subscribe.apply(self, [name].concat(args)); // 699
                                f.wait(); // 700
                                return handle; // 701
                            }, // 702
                            methods: function (methods) {
                                // 704
                                var self = this; // 705
                                //
                                _.each(methods, function (func, name) {
                                    // 706
                                    if (typeof func !== 'function') throw new Error("Method '" + name + "' must be a function"); // 707
                                    if (self._methodHandlers[name]) throw new Error("A method named '" + name + "' is already defined"); // 709
                                    self._methodHandlers[name] = func; // 711
                                }); // 712
                            }, // 713
                            /**                                                                                                                  // 715
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             * @summary Invokes a method passing any number of arguments.                                                        //
                             * @locus Anywhere                                                                                                   //
                             * @param {String} name Name of method to invoke                                                                     //
                             * @param {EJSONable} [arg1,arg2...] Optional method arguments                                                       //
                             * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
                             */call: function (name /* .. [arguments] .. callback */) {
                                //
                                // if it's a function, the last argument is the result callback,                                                   // 725
                                // not a parameter to the remote method.                                                                           // 726
                                var args = Array.prototype.slice.call(arguments, 1); // 727
                                if (args.length && typeof args[args.length - 1] === "function") var callback = args.pop(); // 728
                                return this.apply(name, args, callback); // 730
                            }, // 731
                            // @param options {Optional Object}                                                                                  // 733
                            //   wait: Boolean - Should we wait to call this until all current methods                                           // 734
                            //                   are fully finished, and block subsequent method calls                                           // 735
                            //                   until this method is fully finished?                                                            // 736
                            //                   (does not affect methods called from within this method)                                        // 737
                            //   onResultReceived: Function - a callback to call as soon as the method                                           // 738
                            //                                result is received. the data written by                                            // 739
                            //                                the method may not yet be in the cache!                                            // 740
                            //   returnStubValue: Boolean - If true then in cases where we would have                                            // 741
                            //                              otherwise discarded the stub's return value                                          // 742
                            //                              and returned undefined, instead we go ahead                                          // 743
                            //                              and return it.  Specifically, this is any                                            // 744
                            //                              time other than when (a) we are already                                              // 745
                            //                              inside a stub or (b) we are in Node and no                                           // 746
                            //                              callback was provided.  Currently we require                                         // 747
                            //                              this flag to be explicitly passed to reduce                                          // 748
                            //                              the likelihood that stub return values will                                          // 749
                            //                              be confused with server return values; we                                            // 750
                            //                              may improve this in future.                                                          // 751
                            // @param callback {Optional Function}                                                                               // 752
                            /**                                                                                                                  // 754
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             * @summary Invoke a method passing an array of arguments.                                                           //
                             * @locus Anywhere                                                                                                   //
                             * @param {String} name Name of method to invoke                                                                     //
                             * @param {EJSONable[]} args Method arguments                                                                        //
                             * @param {Object} [options]                                                                                         //
                             * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
                             * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
                             * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
                             * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.
                             * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).          //
                             */apply: function (name, args, options, callback) {
                                //
                                var self = this; // We were passed 3 arguments. They may be either (name, args, options)                           // 769
                                // or (name, args, callback)                                                                                       // 772
                                //
                                if (!callback && typeof options === 'function') {
                                    // 773
                                    callback = options; // 774
                                    options = {}; // 775
                                } // 776
                                //
                                options = options || {}; // 777
                                //
                                if (callback) {
                                    // 779
                                    // XXX would it be better form to do the binding in stream.on,                                                   // 780
                                    // or caller, instead of here?                                                                                   // 781
                                    // XXX improve error message (and how we report it)                                                              // 782
                                    callback = Meteor.bindEnvironment(callback, "delivering result of invoking '" + name + "'"); // 783
                                } // Keep our args safe from mutation (eg if we don't send the message for a                                       // 787
                                // while because of a wait method).                                                                                // 790
                                //
                                //
                                args = EJSON.clone(args); // Lazily allocate method ID once we know that it'll be needed.                          // 791
                                //
                                var methodId = function () {
                                    // 794
                                    var id; // 795
                                    return function () {
                                        // 796
                                        if (id === undefined) id = '' + self._nextMethodId++; // 797
                                        return id; // 799
                                    }; // 800
                                }(); // 801
                                //
                                var enclosing = DDP._CurrentMethodInvocation.get(); // 803
                                //
                                var alreadyInSimulation = enclosing && enclosing.isSimulation; // Lazily generate a randomSeed, only if it is requested by the stub.
                                // The random streams only have utility if they're used on both the client                                         // 807
                                // and the server; if the client doesn't generate any 'random' values                                              // 808
                                // then we don't expect the server to generate any either.                                                         // 809
                                // Less commonly, the server may perform different actions from the client,                                        // 810
                                // and may in fact generate values where the client did not, but we don't                                          // 811
                                // have any client-side values to match, so even here we may as well just                                          // 812
                                // use a random seed on the server.  In that case, we don't pass the                                               // 813
                                // randomSeed to save bandwidth, and we don't even generate it to save a                                           // 814
                                // bit of CPU and to avoid consuming entropy.                                                                      // 815
                                //
                                var randomSeed = null; // 816
                                //
                                var randomSeedGenerator = function () {
                                    // 817
                                    if (randomSeed === null) {
                                        // 818
                                        randomSeed = DDPCommon.makeRpcSeed(enclosing, name); // 819
                                    } // 820
                                    //
                                    return randomSeed; // 821
                                }; // Run the stub, if we have one. The stub is supposed to make some                                              // 822
                                // temporary writes to the database to give the user a smooth experience                                           // 825
                                // until the actual result of executing the method comes back from the                                             // 826
                                // server (whereupon the temporary writes to the database will be reversed                                         // 827
                                // during the beginUpdate/endUpdate process.)                                                                      // 828
                                //                                                                                                                 // 829
                                // Normally, we ignore the return value of the stub (even if it is an                                              // 830
                                // exception), in favor of the real return value from the server. The                                              // 831
                                // exception is if the *caller* is a stub. In that case, we're not going                                           // 832
                                // to do a RPC, so we use the return value of the stub as our return                                               // 833
                                // value.                                                                                                          // 834
                                //
                                //
                                var stub = self._methodHandlers[name]; // 836
                                //
                                if (stub) {
                                    // 837
                                    var setUserId = function (userId) {
                                        // 838
                                        self.setUserId(userId); // 839
                                    }; // 840
                                    //
                                    var invocation = new DDPCommon.MethodInvocation({ // 842
                                        isSimulation: true, // 843
                                        userId: self.userId(), // 844
                                        setUserId: setUserId, // 845
                                        randomSeed: function () {
                                            // 846
                                            return randomSeedGenerator(); // 846
                                        } // 846
                                    }); // 842
                                    if (!alreadyInSimulation) self._saveOriginals(); // 849
                                    //
                                    try {
                                        // 852
                                        // Note that unlike in the corresponding server code, we never audit                                           // 853
                                        // that stubs check() their arguments.                                                                         // 854
                                        var stubReturnValue = DDP._CurrentMethodInvocation.withValue(invocation, function () {
                                            // 855
                                            if (Meteor.isServer) {
                                                // 856
                                                // Because saveOriginals and retrieveOriginals aren't reentrant,                                           // 857
                                                // don't allow stubs to yield.                                                                             // 858
                                                return Meteor._noYieldsAllowed(function () {
                                                    // 859
                                                    // re-clone, so that the stub can't affect our caller's values                                           // 860
                                                    return stub.apply(invocation, EJSON.clone(args)); // 861
                                                }); // 862
                                            } else {
                                                // 863
                                                return stub.apply(invocation, EJSON.clone(args)); // 864
                                            } // 865
                                        }); // 866
                                    } catch (e) {
                                        // 867
                                        var exception = e; // 869
                                    } // 870
                                    //
                                    if (!alreadyInSimulation) self._retrieveAndStoreOriginals(methodId()); // 872
                                } // If we're in a simulation, stop and return the result we have,                                                 // 874
                                // rather than going on to do an RPC. If there was no stub,                                                        // 877
                                // we'll end up returning undefined.                                                                               // 878
                                //
                                //
                                if (alreadyInSimulation) {
                                    // 879
                                    if (callback) {
                                        // 880
                                        callback(exception, stubReturnValue); // 881
                                        return undefined; // 882
                                    } // 883
                                    //
                                    if (exception) throw exception; // 884
                                    return stubReturnValue; // 886
                                } // If an exception occurred in a stub, and we're ignoring it                                                     // 887
                                // because we're doing an RPC and want to use what the server                                                      // 890
                                // returns instead, log it so the developer knows                                                                  // 891
                                // (unless they explicitly ask to see the error).                                                                  // 892
                                //                                                                                                                 // 893
                                // Tests can set the 'expected' flag on an exception so it won't                                                   // 894
                                // go to log.                                                                                                      // 895
                                //
                                //
                                if (exception) {
                                    // 896
                                    if (options.throwStubExceptions) {
                                        // 897
                                        throw exception; // 898
                                    } else if (!exception.expected) {
                                        // 899
                                        Meteor._debug("Exception while simulating the effect of invoking '" + name + "'", exception, exception.stack);
                                    } // 902
                                } // At this point we're definitely doing an RPC, and we're going to                                               // 903
                                // return the value of the RPC to the caller.                                                                      // 907
                                // If the caller didn't give a callback, decide what to do.                                                        // 909
                                //
                                //
                                if (!callback) {
                                    // 910
                                    if (Meteor.isClient) {
                                        // 911
                                        // On the client, we don't have fibers, so we can't block. The                                                 // 912
                                        // only thing we can do is to return undefined and discard the                                                 // 913
                                        // result of the RPC. If an error occurred then print the error                                                // 914
                                        // to the console.                                                                                             // 915
                                        callback = function (err) {
                                            // 916
                                            err && Meteor._debug("Error invoking Method '" + name + "':", err.message); // 917
                                        }; // 919
                                    } else {
                                        // 920
                                        // On the server, make the function synchronous. Throw on                                                      // 921
                                        // errors, return on success.                                                                                  // 922
                                        var future = new Future(); // 923
                                        callback = future.resolver(); // 924
                                    } // 925
                                } // Send the RPC. Note that on the client, it is important that the                                               // 926
                                // stub have finished before we send the RPC, so that we know we have                                              // 928
                                // a complete list of which local documents the stub wrote.                                                        // 929
                                //
                                //
                                var message = { // 930
                                    msg: 'method', // 931
                                    method: name, // 932
                                    params: args, // 933
                                    id: methodId() // 934
                                }; // Send the randomSeed only if we used it                                                                       // 930
                                //
                                if (randomSeed !== null) {
                                    // 938
                                    message.randomSeed = randomSeed; // 939
                                } // 940
                                //
                                var methodInvoker = new MethodInvoker({ // 942
                                    methodId: methodId(), // 943
                                    callback: callback, // 944
                                    connection: self, // 945
                                    onResultReceived: options.onResultReceived, // 946
                                    wait: !!options.wait, // 947
                                    message: message, // 948
                                    noRetry: !!options.noRetry // 949
                                }); // 942
                                //
                                if (options.wait) {
                                    // 952
                                    // It's a wait method! Wait methods go in their own block.                                                       // 953
                                    self._outstandingMethodBlocks.push({ // 954
                                        wait: true, // 955
                                        methods: [methodInvoker] // 955
                                    }); // 955
                                } else {
                                    // 956
                                    // Not a wait method. Start a new block if the previous block was a wait                                         // 957
                                    // block, and add it to the last block of methods.                                                               // 958
                                    if (_.isEmpty(self._outstandingMethodBlocks) || _.last(self._outstandingMethodBlocks).wait) self._outstandingMethodBlocks.push({
                                        wait: false, // 961
                                        methods: [] // 961
                                    }); // 961
                                    //
                                    _.last(self._outstandingMethodBlocks).methods.push(methodInvoker); // 962
                                } // If we added it to the first block, send it out now.                                                           // 963
                                //
                                //
                                if (self._outstandingMethodBlocks.length === 1) methodInvoker.sendMessage(); // If we're using the default callback on the server,
                                // block waiting for the result.                                                                                   // 970
                                //
                                if (future) {
                                    // 971
                                    return future.wait(); // 972
                                } // 973
                                //
                                return options.returnStubValue ? stubReturnValue : undefined; // 974
                            }, // 975
                            // Before calling a method stub, prepare all stores to track changes and allow                                       // 977
                            // _retrieveAndStoreOriginals to get the original versions of changed                                                // 978
                            // documents.                                                                                                        // 979
                            _saveOriginals: function () {
                                // 980
                                var self = this; // 981
                                if (!self._waitingForQuiescence()) self._flushBufferedWrites(); // 982
                                //
                                _.each(self._stores, function (s) {
                                    // 984
                                    s.saveOriginals(); // 985
                                }); // 986
                            }, // 987
                            // Retrieves the original versions of all documents modified by the stub for                                         // 988
                            // method 'methodId' from all stores and saves them to _serverDocuments (keyed                                       // 989
                            // by document) and _documentsWrittenByStub (keyed by method ID).                                                    // 990
                            _retrieveAndStoreOriginals: function (methodId) {
                                // 991
                                var self = this; // 992
                                if (self._documentsWrittenByStub[methodId]) throw new Error("Duplicate methodId in _retrieveAndStoreOriginals"); // 993
                                var docsWritten = []; // 996
                                //
                                _.each(self._stores, function (s, collection) {
                                    // 997
                                    var originals = s.retrieveOriginals(); // not all stores define retrieveOriginals                                // 998
                                    //
                                    if (!originals) return; // 1000
                                    originals.forEach(function (doc, id) {
                                        // 1002
                                        docsWritten.push({ // 1003
                                            collection: collection, // 1003
                                            id: id // 1003
                                        }); // 1003
                                        if (!_.has(self._serverDocuments, collection)) self._serverDocuments[collection] = new MongoIDMap(); // 1004
                                        //
                                        var serverDoc = self._serverDocuments[collection].setDefault(id, {}); // 1006
                                        //
                                        if (serverDoc.writtenByStubs) {
                                            // 1007
                                            // We're not the first stub to write this doc. Just add our method ID                                        // 1008
                                            // to the record.                                                                                            // 1009
                                            serverDoc.writtenByStubs[methodId] = true; // 1010
                                        } else {
                                            // 1011
                                            // First stub! Save the original value and our method ID.                                                    // 1012
                                            serverDoc.document = doc; // 1013
                                            serverDoc.flushCallbacks = []; // 1014
                                            serverDoc.writtenByStubs = {}; // 1015
                                            serverDoc.writtenByStubs[methodId] = true; // 1016
                                        } // 1017
                                    }); // 1018
                                }); // 1019
                                //
                                if (!_.isEmpty(docsWritten)) {
                                    // 1020
                                    self._documentsWrittenByStub[methodId] = docsWritten; // 1021
                                } // 1022
                            }, // 1023
                            // This is very much a private function we use to make the tests                                                     // 1025
                            // take up fewer server resources after they complete.                                                               // 1026
                            _unsubscribeAll: function () {
                                // 1027
                                var self = this; // 1028
                                //
                                _.each(_.clone(self._subscriptions), function (sub, id) {
                                    // 1029
                                    // Avoid killing the autoupdate subscription so that developers                                                  // 1030
                                    // still get hot code pushes when writing tests.                                                                 // 1031
                                    //                                                                                                               // 1032
                                    // XXX it's a hack to encode knowledge about autoupdate here,                                                    // 1033
                                    // but it doesn't seem worth it yet to have a special API for                                                    // 1034
                                    // subscriptions to preserve after unit tests.                                                                   // 1035
                                    if (sub.name !== 'meteor_autoupdate_clientVersions') {
                                        // 1036
                                        self._subscriptions[id].stop(); // 1037
                                    } // 1038
                                }); // 1039
                            }, // 1040
                            // Sends the DDP stringification of the given message object                                                         // 1042
                            _send: function (obj) {
                                // 1043
                                var self = this; // 1044
                                //
                                self._stream.send(DDPCommon.stringifyDDP(obj)); // 1045
                            }, // 1046
                            // We detected via DDP-level heartbeats that we've lost the                                                          // 1048
                            // connection.  Unlike `disconnect` or `close`, a lost connection                                                    // 1049
                            // will be automatically retried.                                                                                    // 1050
                            _lostConnection: function (error) {
                                // 1051
                                var self = this; // 1052
                                //
                                self._stream._lostConnection(error); // 1053
                            }, // 1054
                            /**                                                                                                                  // 1056
                             * @summary Get the current connection status. A reactive data source.                                               //
                             * @locus Client                                                                                                     //
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             */status: function () /*passthrough args*/{
                                //
                                var self = this; // 1063
                                return self._stream.status.apply(self._stream, arguments); // 1064
                            }, // 1065
                            /**                                                                                                                  // 1067
                             * @summary Force an immediate reconnection attempt if the client is not connected to the server.                    //
                             This method does nothing if the client is already connected.                                                        //
                             * @locus Client                                                                                                     //
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             */reconnect: function () /*passthrough args*/{
                                //
                                var self = this; // 1076
                                return self._stream.reconnect.apply(self._stream, arguments); // 1077
                            }, // 1078
                            /**                                                                                                                  // 1080
                             * @summary Disconnect the client from the server.                                                                   //
                             * @locus Client                                                                                                     //
                             * @memberOf Meteor                                                                                                  //
                             * @importFromPackage meteor                                                                                         //
                             */disconnect: function () /*passthrough args*/{
                                //
                                var self = this; // 1087
                                return self._stream.disconnect.apply(self._stream, arguments); // 1088
                            }, // 1089
                            close: function () {
                                // 1091
                                var self = this; // 1092
                                return self._stream.disconnect({ // 1093
                                    _permanent: true // 1093
                                }); // 1093
                            }, // 1094
                            ///                                                                                                                  // 1096
                            /// Reactive user system                                                                                             // 1097
                            ///                                                                                                                  // 1098
                            userId: function () {
                                // 1099
                                var self = this; // 1100
                                if (self._userIdDeps) self._userIdDeps.depend(); // 1101
                                return self._userId; // 1103
                            }, // 1104
                            setUserId: function (userId) {
                                // 1106
                                var self = this; // Avoid invalidating dependents if setUserId is called with current value.                       // 1107
                                //
                                if (self._userId === userId) return; // 1109
                                self._userId = userId; // 1111
                                if (self._userIdDeps) self._userIdDeps.changed(); // 1112
                            }, // 1114
                            // Returns true if we are in a state after reconnect of waiting for subs to be                                       // 1116
                            // revived or early methods to finish their data, or we are waiting for a                                            // 1117
                            // "wait" method to finish.                                                                                          // 1118
                            _waitingForQuiescence: function () {
                                // 1119
                                var self = this; // 1120
                                return !_.isEmpty(self._subsBeingRevived) || !_.isEmpty(self._methodsBlockingQuiescence); // 1121
                            }, // 1123
                            // Returns true if any method whose message has been sent to the server has                                          // 1125
                            // not yet invoked its user callback.                                                                                // 1126
                            _anyMethodsAreOutstanding: function () {
                                // 1127
                                var self = this; // 1128
                                return _.any(_.pluck(self._methodInvokers, 'sentMessage')); // 1129
                            }, // 1130
                            _livedata_connected: function (msg) {
                                // 1132
                                var self = this; // 1133
                                //
                                if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {
                                    // 1135
                                    self._heartbeat = new DDPCommon.Heartbeat({ // 1136
                                        heartbeatInterval: self._heartbeatInterval, // 1137
                                        heartbeatTimeout: self._heartbeatTimeout, // 1138
                                        onTimeout: function () {
                                            // 1139
                                            self._lostConnection(new DDP.ConnectionError("DDP heartbeat timed out")); // 1140
                                        }, // 1142
                                        sendPing: function () {
                                            // 1143
                                            self._send({ // 1144
                                                msg: 'ping' // 1144
                                            }); // 1144
                                        } // 1145
                                    }); // 1136
                                    //
                                    self._heartbeat.start(); // 1147
                                } // If this is a reconnect, we'll have to reset all stores.                                                       // 1148
                                //
                                //
                                if (self._lastSessionId) self._resetStores = true; // 1151
                                //
                                if (typeof msg.session === "string") {
                                    // 1154
                                    var reconnectedToPreviousSession = self._lastSessionId === msg.session; // 1155
                                    self._lastSessionId = msg.session; // 1156
                                } // 1157
                                //
                                if (reconnectedToPreviousSession) {
                                    // 1159
                                    // Successful reconnection -- pick up where we left off.  Note that right                                        // 1160
                                    // now, this never happens: the server never connects us to a previous                                           // 1161
                                    // session, because DDP doesn't provide enough data for the server to know                                       // 1162
                                    // what messages the client has processed. We need to improve DDP to make                                        // 1163
                                    // this possible, at which point we'll probably need more code here.                                             // 1164
                                    return; // 1165
                                } // Server doesn't have our data any more. Re-sync a new session.                                                 // 1166
                                // Forget about messages we were buffering for unknown collections. They'll                                        // 1170
                                // be resent if still relevant.                                                                                    // 1171
                                //
                                //
                                self._updatesForUnknownStores = {}; // 1172
                                //
                                if (self._resetStores) {
                                    // 1174
                                    // Forget about the effects of stubs. We'll be resetting all collections                                         // 1175
                                    // anyway.                                                                                                       // 1176
                                    self._documentsWrittenByStub = {}; // 1177
                                    self._serverDocuments = {}; // 1178
                                } // Clear _afterUpdateCallbacks.                                                                                  // 1179
                                //
                                //
                                self._afterUpdateCallbacks = []; // Mark all named subscriptions which are ready (ie, we already called the        // 1182
                                // ready callback) as needing to be revived.                                                                       // 1185
                                // XXX We should also block reconnect quiescence until unnamed subscriptions                                       // 1186
                                //     (eg, autopublish) are done re-publishing to avoid flicker!                                                  // 1187
                                //
                                self._subsBeingRevived = {}; // 1188
                                //
                                _.each(self._subscriptions, function (sub, id) {
                                    // 1189
                                    if (sub.ready) self._subsBeingRevived[id] = true; // 1190
                                }); // Arrange for "half-finished" methods to have their callbacks run, and                                        // 1192
                                // track methods that were sent on this connection so that we don't                                                // 1195
                                // quiesce until they are all done.                                                                                // 1196
                                //                                                                                                                 // 1197
                                // Start by clearing _methodsBlockingQuiescence: methods sent before                                               // 1198
                                // reconnect don't matter, and any "wait" methods sent on the new connection                                       // 1199
                                // that we drop here will be restored by the loop below.                                                           // 1200
                                //
                                //
                                self._methodsBlockingQuiescence = {}; // 1201
                                //
                                if (self._resetStores) {
                                    // 1202
                                    _.each(self._methodInvokers, function (invoker) {
                                        // 1203
                                        if (invoker.gotResult()) {
                                            // 1204
                                            // This method already got its result, but it didn't call its callback                                       // 1205
                                            // because its data didn't become visible. We did not resend the                                             // 1206
                                            // method RPC. We'll call its callback when we get a full quiesce,                                           // 1207
                                            // since that's as close as we'll get to "data must be visible".                                             // 1208
                                            self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker)); // 1209
                                        } else if (invoker.sentMessage) {
                                            // 1210
                                            // This method has been sent on this connection (maybe as a resend                                           // 1211
                                            // from the last connection, maybe from onReconnect, maybe just very                                         // 1212
                                            // quickly before processing the connected message).                                                         // 1213
                                            //                                                                                                           // 1214
                                            // We don't need to do anything special to ensure its callbacks get                                          // 1215
                                            // called, but we'll count it as a method which is preventing                                                // 1216
                                            // reconnect quiescence. (eg, it might be a login method that was run                                        // 1217
                                            // from onReconnect, and we don't want to see flicker by seeing a                                            // 1218
                                            // logged-out state.)                                                                                        // 1219
                                            self._methodsBlockingQuiescence[invoker.methodId] = true; // 1220
                                        } // 1221
                                    }); // 1222
                                } // 1223
                                //
                                self._messagesBufferedUntilQuiescence = []; // If we're not waiting on any methods or subs, we can reset the stores and
                                // call the callbacks immediately.                                                                                 // 1228
                                //
                                if (!self._waitingForQuiescence()) {
                                    // 1229
                                    if (self._resetStores) {
                                        // 1230
                                        _.each(self._stores, function (s) {
                                            // 1231
                                            s.beginUpdate(0, true); // 1232
                                            s.endUpdate(); // 1233
                                        }); // 1234
                                        //
                                        self._resetStores = false; // 1235
                                    } // 1236
                                    //
                                    self._runAfterUpdateCallbacks(); // 1237
                                } // 1238
                            }, // 1239
                            _processOneDataMessage: function (msg, updates) {
                                // 1242
                                var self = this; // Using underscore here so as not to need to capitalize.                                         // 1243
                                //
                                self['_process_' + msg.msg](msg, updates); // 1245
                            }, // 1246
                            _livedata_data: function (msg) {
                                // 1249
                                var self = this; // 1250
                                //
                                if (self._waitingForQuiescence()) {
                                    // 1252
                                    self._messagesBufferedUntilQuiescence.push(msg); // 1253
                                    //
                                    if (msg.msg === "nosub") delete self._subsBeingRevived[msg.id]; // 1255
                                    //
                                    _.each(msg.subs || [], function (subId) {
                                        // 1258
                                        delete self._subsBeingRevived[subId]; // 1259
                                    }); // 1260
                                    //
                                    _.each(msg.methods || [], function (methodId) {
                                        // 1261
                                        delete self._methodsBlockingQuiescence[methodId]; // 1262
                                    }); // 1263
                                    //
                                    if (self._waitingForQuiescence()) return; // No methods or subs are blocking quiescence!                         // 1265
                                    // We'll now process and all of our buffered messages, reset all stores,                                         // 1269
                                    // and apply them all at once.                                                                                   // 1270
                                    //
                                    _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {
                                        // 1271
                                        self._processOneDataMessage(bufferedMsg, self._bufferedWrites); // 1272
                                    }); // 1273
                                    //
                                    self._messagesBufferedUntilQuiescence = []; // 1274
                                } else {
                                    // 1275
                                    self._processOneDataMessage(msg, self._bufferedWrites); // 1276
                                } // Immediately flush writes when:                                                                                // 1277
                                //  1. Buffering is disabled. Or;                                                                                  // 1280
                                //  2. any non-(added/changed/removed) message arrives.                                                            // 1281
                                //
                                //
                                var standardWrite = _.include(['added', 'changed', 'removed'], msg.msg); // 1282
                                //
                                if (self._bufferedWritesInterval === 0 || !standardWrite) {
                                    // 1283
                                    self._flushBufferedWrites(); // 1284
                                    //
                                    return; // 1285
                                } // 1286
                                //
                                if (self._bufferedWritesFlushAt === null) {
                                    // 1288
                                    self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge; // 1289
                                } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {
                                    // 1290
                                    self._flushBufferedWrites(); // 1292
                                    //
                                    return; // 1293
                                } // 1294
                                //
                                if (self._bufferedWritesFlushHandle) {
                                    // 1296
                                    clearTimeout(self._bufferedWritesFlushHandle); // 1297
                                } // 1298
                                //
                                self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites, self._bufferedWritesInterval); // 1299
                            }, // 1301
                            _flushBufferedWrites: function () {
                                // 1303
                                var self = this; // 1304
                                //
                                if (self._bufferedWritesFlushHandle) {
                                    // 1305
                                    clearTimeout(self._bufferedWritesFlushHandle); // 1306
                                    self._bufferedWritesFlushHandle = null; // 1307
                                } // 1308
                                //
                                self._bufferedWritesFlushAt = null; // We need to clear the buffer before passing it to                            // 1310
                                //  performWrites. As there's no guarantee that it                                                                 // 1312
                                //  will exit cleanly.                                                                                             // 1313
                                //
                                var writes = self._bufferedWrites; // 1314
                                self._bufferedWrites = {}; // 1315
                                //
                                self._performWrites(writes); // 1316
                            }, // 1317
                            _performWrites: function (updates) {
                                // 1319
                                var self = this; // 1320
                                //
                                if (self._resetStores || !_.isEmpty(updates)) {
                                    // 1322
                                    // Begin a transactional update of each store.                                                                   // 1323
                                    _.each(self._stores, function (s, storeName) {
                                        // 1324
                                        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0, self._resetStores); // 1325
                                    }); // 1327
                                    //
                                    self._resetStores = false; // 1328
                                    //
                                    _.each(updates, function (updateMessages, storeName) {
                                        // 1330
                                        var store = self._stores[storeName]; // 1331
                                        //
                                        if (store) {
                                            // 1332
                                            _.each(updateMessages, function (updateMessage) {
                                                // 1333
                                                store.update(updateMessage); // 1334
                                            }); // 1335
                                        } else {
                                            // 1336
                                            // Nobody's listening for this data. Queue it up until                                                       // 1337
                                            // someone wants it.                                                                                         // 1338
                                            // XXX memory use will grow without bound if you forget to                                                   // 1339
                                            // create a collection or just don't care about it... going                                                  // 1340
                                            // to have to do something about that.                                                                       // 1341
                                            if (!_.has(self._updatesForUnknownStores, storeName)) self._updatesForUnknownStores[storeName] = []; // 1342
                                            Array.prototype.push.apply(self._updatesForUnknownStores[storeName], updateMessages); // 1344
                                        } // 1346
                                    }); // End update transaction.                                                                                   // 1347
                                    //
                                    //
                                    _.each(self._stores, function (s) {
                                        // 1350
                                        s.endUpdate(); // 1350
                                    }); // 1350
                                } // 1351
                                //
                                self._runAfterUpdateCallbacks(); // 1353
                            }, // 1354
                            // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose                                            // 1356
                            // relevant docs have been flushed, as well as dataVisible callbacks at                                              // 1357
                            // reconnect-quiescence time.                                                                                        // 1358
                            _runAfterUpdateCallbacks: function () {
                                // 1359
                                var self = this; // 1360
                                var callbacks = self._afterUpdateCallbacks; // 1361
                                self._afterUpdateCallbacks = []; // 1362
                                //
                                _.each(callbacks, function (c) {
                                    // 1363
                                    c(); // 1364
                                }); // 1365
                            }, // 1366
                            _pushUpdate: function (updates, collection, msg) {
                                // 1368
                                var self = this; // 1369
                                //
                                if (!_.has(updates, collection)) {
                                    // 1370
                                    updates[collection] = []; // 1371
                                } // 1372
                                //
                                updates[collection].push(msg); // 1373
                            }, // 1374
                            _getServerDoc: function (collection, id) {
                                // 1376
                                var self = this; // 1377
                                if (!_.has(self._serverDocuments, collection)) return null; // 1378
                                var serverDocsForCollection = self._serverDocuments[collection]; // 1380
                                return serverDocsForCollection.get(id) || null; // 1381
                            }, // 1382
                            _process_added: function (msg, updates) {
                                // 1384
                                var self = this; // 1385
                                var id = MongoID.idParse(msg.id); // 1386
                                //
                                var serverDoc = self._getServerDoc(msg.collection, id); // 1387
                                //
                                if (serverDoc) {
                                    // 1388
                                    // Some outstanding stub wrote here.                                                                             // 1389
                                    var isExisting = serverDoc.document !== undefined; // 1390
                                    serverDoc.document = msg.fields || {}; // 1392
                                    serverDoc.document._id = id; // 1393
                                    //
                                    if (self._resetStores) {
                                        // 1395
                                        // During reconnect the server is sending adds for existing ids.                                               // 1396
                                        // Always push an update so that document stays in the store after                                             // 1397
                                        // reset. Use current version of the document for this update, so                                              // 1398
                                        // that stub-written values are preserved.                                                                     // 1399
                                        var currentDoc = self._stores[msg.collection].getDoc(msg.id); // 1400
                                        //
                                        if (currentDoc !== undefined) msg.fields = currentDoc; // 1401
                                        //
                                        self._pushUpdate(updates, msg.collection, msg); // 1404
                                    } else if (isExisting) {
                                        // 1405
                                        throw new Error("Server sent add for existing id: " + msg.id); // 1406
                                    } // 1407
                                } else {
                                    // 1408
                                    self._pushUpdate(updates, msg.collection, msg); // 1409
                                } // 1410
                            }, // 1411
                            _process_changed: function (msg, updates) {
                                // 1413
                                var self = this; // 1414
                                //
                                var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id)); // 1415
                                //
                                if (serverDoc) {
                                    // 1417
                                    if (serverDoc.document === undefined) throw new Error("Server sent changed for nonexisting id: " + msg.id); // 1418
                                    DiffSequence.applyChanges(serverDoc.document, msg.fields); // 1420
                                } else {
                                    // 1421
                                    self._pushUpdate(updates, msg.collection, msg); // 1422
                                } // 1423
                            }, // 1424
                            _process_removed: function (msg, updates) {
                                // 1426
                                var self = this; // 1427
                                //
                                var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id)); // 1428
                                //
                                if (serverDoc) {
                                    // 1430
                                    // Some outstanding stub wrote here.                                                                             // 1431
                                    if (serverDoc.document === undefined) throw new Error("Server sent removed for nonexisting id:" + msg.id); // 1432
                                    serverDoc.document = undefined; // 1434
                                } else {
                                    // 1435
                                    self._pushUpdate(updates, msg.collection, { // 1436
                                        msg: 'removed', // 1437
                                        collection: msg.collection, // 1438
                                        id: msg.id // 1439
                                    }); // 1436
                                } // 1441
                            }, // 1442
                            _process_updated: function (msg, updates) {
                                // 1444
                                var self = this; // Process "method done" messages.                                                                // 1445
                                //
                                _.each(msg.methods, function (methodId) {
                                    // 1447
                                    _.each(self._documentsWrittenByStub[methodId], function (written) {
                                        // 1448
                                        var serverDoc = self._getServerDoc(written.collection, written.id); // 1449
                                        //
                                        if (!serverDoc) throw new Error("Lost serverDoc for " + JSON.stringify(written)); // 1450
                                        if (!serverDoc.writtenByStubs[methodId]) throw new Error("Doc " + JSON.stringify(written) + " not written by  method " + methodId);
                                        delete serverDoc.writtenByStubs[methodId]; // 1455
                                        //
                                        if (_.isEmpty(serverDoc.writtenByStubs)) {
                                            // 1456
                                            // All methods whose stubs wrote this method have completed! We can                                          // 1457
                                            // now copy the saved document to the database (reverting the stub's                                         // 1458
                                            // change if the server did not write to this object, or applying the                                        // 1459
                                            // server's writes if it did).                                                                               // 1460
                                            // This is a fake ddp 'replace' message.  It's just for talking                                              // 1462
                                            // between livedata connections and minimongo.  (We have to stringify                                        // 1463
                                            // the ID because it's supposed to look like a wire message.)                                                // 1464
                                            self._pushUpdate(updates, written.collection, { // 1465
                                                msg: 'replace', // 1466
                                                id: MongoID.idStringify(written.id), // 1467
                                                replace: serverDoc.document // 1468
                                            }); // Call all flush callbacks.                                                                             // 1465
                                            //
                                            //
                                            _.each(serverDoc.flushCallbacks, function (c) {
                                                // 1471
                                                c(); // 1472
                                            }); // Delete this completed serverDocument. Don't bother to GC empty                                        // 1473
                                            // IdMaps inside self._serverDocuments, since there probably aren't                                          // 1476
                                            // many collections and they'll be written repeatedly.                                                       // 1477
                                            //
                                            //
                                            self._serverDocuments[written.collection].remove(written.id); // 1478
                                        } // 1479
                                    }); // 1480
                                    //
                                    delete self._documentsWrittenByStub[methodId]; // We want to call the data-written callback, but we can't do so until all
                                    // currently buffered messages are flushed.                                                                      // 1484
                                    //
                                    var callbackInvoker = self._methodInvokers[methodId]; // 1485
                                    if (!callbackInvoker) throw new Error("No callback invoker for method " + methodId); // 1486
                                    //
                                    self._runWhenAllServerDocsAreFlushed(_.bind(callbackInvoker.dataVisible, callbackInvoker)); // 1488
                                }); // 1490
                            }, // 1491
                            _process_ready: function (msg, updates) {
                                // 1493
                                var self = this; // Process "sub ready" messages. "sub ready" messages don't take effect                           // 1494
                                // until all current server documents have been flushed to the local                                               // 1496
                                // database. We can use a write fence to implement this.                                                           // 1497
                                //
                                _.each(msg.subs, function (subId) {
                                    // 1498
                                    self._runWhenAllServerDocsAreFlushed(function () {
                                        // 1499
                                        var subRecord = self._subscriptions[subId]; // Did we already unsubscribe?                                     // 1500
                                        //
                                        if (!subRecord) return; // Did we already receive a ready message? (Oops!)                                     // 1502
                                        //
                                        if (subRecord.ready) return; // 1505
                                        subRecord.ready = true; // 1507
                                        subRecord.readyCallback && subRecord.readyCallback(); // 1508
                                        subRecord.readyDeps.changed(); // 1509
                                    }); // 1510
                                }); // 1511
                            }, // 1512
                            // Ensures that "f" will be called after all documents currently in                                                  // 1514
                            // _serverDocuments have been written to the local cache. f will not be called                                       // 1515
                            // if the connection is lost before then!                                                                            // 1516
                            _runWhenAllServerDocsAreFlushed: function (f) {
                                // 1517
                                var self = this; // 1518
                                //
                                var runFAfterUpdates = function () {
                                    // 1519
                                    self._afterUpdateCallbacks.push(f); // 1520
                                }; // 1521
                                //
                                var unflushedServerDocCount = 0; // 1522
                                //
                                var onServerDocFlush = function () {
                                    // 1523
                                    --unflushedServerDocCount; // 1524
                                    //
                                    if (unflushedServerDocCount === 0) {
                                        // 1525
                                        // This was the last doc to flush! Arrange to run f after the updates                                          // 1526
                                        // have been applied.                                                                                          // 1527
                                        runFAfterUpdates(); // 1528
                                    } // 1529
                                }; // 1530
                                //
                                _.each(self._serverDocuments, function (collectionDocs) {
                                    // 1531
                                    collectionDocs.forEach(function (serverDoc) {
                                        // 1532
                                        var writtenByStubForAMethodWithSentMessage = _.any(serverDoc.writtenByStubs, function (dummy, methodId) {
                                            // 1533
                                            var invoker = self._methodInvokers[methodId]; // 1535
                                            return invoker && invoker.sentMessage; // 1536
                                        }); // 1537
                                        //
                                        if (writtenByStubForAMethodWithSentMessage) {
                                            // 1538
                                            ++unflushedServerDocCount; // 1539
                                            serverDoc.flushCallbacks.push(onServerDocFlush); // 1540
                                        } // 1541
                                    }); // 1542
                                }); // 1543
                                //
                                if (unflushedServerDocCount === 0) {
                                    // 1544
                                    // There aren't any buffered docs --- we can call f as soon as the current                                       // 1545
                                    // round of updates is applied!                                                                                  // 1546
                                    runFAfterUpdates(); // 1547
                                } // 1548
                            }, // 1549
                            _livedata_nosub: function (msg) {
                                // 1551
                                var self = this; // First pass it through _livedata_data, which only uses it to help get                           // 1552
                                // towards quiescence.                                                                                             // 1555
                                //
                                self._livedata_data(msg); // Do the rest of our processing immediately, with no                                    // 1556
                                // buffering-until-quiescence.                                                                                     // 1559
                                // we weren't subbed anyway, or we initiated the unsub.                                                            // 1561
                                //
                                //
                                if (!_.has(self._subscriptions, msg.id)) return; // XXX COMPAT WITH 1.0.3.1 #errorCallback                         // 1562
                                //
                                var errorCallback = self._subscriptions[msg.id].errorCallback; // 1566
                                var stopCallback = self._subscriptions[msg.id].stopCallback; // 1567
                                //
                                self._subscriptions[msg.id].remove(); // 1569
                                //
                                var meteorErrorFromMsg = function (msgArg) {
                                    // 1571
                                    return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);
                                }; // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                       // 1574
                                //
                                //
                                if (errorCallback && msg.error) {
                                    // 1577
                                    errorCallback(meteorErrorFromMsg(msg)); // 1578
                                } // 1579
                                //
                                if (stopCallback) {
                                    // 1581
                                    stopCallback(meteorErrorFromMsg(msg)); // 1582
                                } // 1583
                            }, // 1584
                            _process_nosub: function () {// This is called as part of the "buffer until quiescence" process, but                 // 1586
                                // nosub's effect is always immediate. It only goes in the buffer at all                                           // 1588
                                // because it's possible for a nosub to be the thing that triggers                                                 // 1589
                                // quiescence, if we were waiting for a sub to be revived and it dies                                              // 1590
                                // instead.                                                                                                        // 1591
                            }, // 1592
                            _livedata_result: function (msg) {
                                // 1594
                                // id, result or error. error has error (code), reason, details                                                    // 1595
                                var self = this; // Lets make sure there are no buffered writes before returning result.                           // 1597
                                //
                                if (!_.isEmpty(self._bufferedWrites)) {
                                    // 1600
                                    self._flushBufferedWrites(); // 1601
                                } // find the outstanding request                                                                                  // 1602
                                // should be O(1) in nearly all realistic use cases                                                                // 1605
                                //
                                //
                                if (_.isEmpty(self._outstandingMethodBlocks)) {
                                    // 1606
                                    Meteor._debug("Received method result but no methods outstanding"); // 1607
                                    //
                                    return; // 1608
                                } // 1609
                                //
                                var currentMethodBlock = self._outstandingMethodBlocks[0].methods; // 1610
                                var m; // 1611
                                //
                                for (var i = 0; i < currentMethodBlock.length; i++) {
                                    // 1612
                                    m = currentMethodBlock[i]; // 1613
                                    if (m.methodId === msg.id) break; // 1614
                                } // 1616
                                //
                                if (!m) {
                                    // 1618
                                    Meteor._debug("Can't match method response to original method call", msg); // 1619
                                    //
                                    return; // 1620
                                } // Remove from current method block. This may leave the block empty, but we                                      // 1621
                                // don't move on to the next block until the callback has been delivered, in                                       // 1624
                                // _outstandingMethodFinished.                                                                                     // 1625
                                //
                                //
                                currentMethodBlock.splice(i, 1); // 1626
                                //
                                if (_.has(msg, 'error')) {
                                    // 1628
                                    m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details)); // 1629
                                } else {
                                    // 1632
                                    // msg.result may be undefined if the method didn't return a                                                     // 1633
                                    // value                                                                                                         // 1634
                                    m.receiveResult(undefined, msg.result); // 1635
                                } // 1636
                            }, // 1637
                            // Called by MethodInvoker after a method's callback is invoked.  If this was                                        // 1639
                            // the last outstanding method in the current block, runs the next block. If                                         // 1640
                            // there are no more methods, consider accepting a hot code push.                                                    // 1641
                            _outstandingMethodFinished: function () {
                                // 1642
                                var self = this; // 1643
                                if (self._anyMethodsAreOutstanding()) return; // No methods are outstanding. This should mean that the first block of
                                // methods is empty. (Or it might not exist, if this was a method that                                             // 1648
                                // half-finished before disconnect/reconnect.)                                                                     // 1649
                                //
                                if (!_.isEmpty(self._outstandingMethodBlocks)) {
                                    // 1650
                                    var firstBlock = self._outstandingMethodBlocks.shift(); // 1651
                                    //
                                    if (!_.isEmpty(firstBlock.methods)) throw new Error("No methods outstanding but nonempty block: " + JSON.stringify(firstBlock)); // Send the outstanding methods now in the first block.
                                    //
                                    if (!_.isEmpty(self._outstandingMethodBlocks)) self._sendOutstandingMethods(); // 1657
                                } // Maybe accept a hot code push.                                                                                 // 1659
                                //
                                //
                                self._maybeMigrate(); // 1662
                            }, // 1663
                            // Sends messages for all the methods in the first block in                                                          // 1665
                            // _outstandingMethodBlocks.                                                                                         // 1666
                            _sendOutstandingMethods: function () {
                                // 1667
                                var self = this; // 1668
                                if (_.isEmpty(self._outstandingMethodBlocks)) return; // 1669
                                //
                                _.each(self._outstandingMethodBlocks[0].methods, function (m) {
                                    // 1671
                                    m.sendMessage(); // 1672
                                }); // 1673
                            }, // 1674
                            _livedata_error: function (msg) {
                                // 1676
                                Meteor._debug("Received error from server: ", msg.reason); // 1677
                                //
                                if (msg.offendingMessage) Meteor._debug("For: ", msg.offendingMessage); // 1678
                            }, // 1680
                            _callOnReconnectAndSendAppropriateOutstandingMethods: function () {
                                // 1682
                                var self = this; // 1683
                                var oldOutstandingMethodBlocks = self._outstandingMethodBlocks; // 1684
                                self._outstandingMethodBlocks = []; // 1685
                                self.onReconnect && self.onReconnect(); // 1687
                                //
                                DDP._reconnectHook.each(function (callback) {
                                    // 1688
                                    callback(self); // 1689
                                    return true; // 1690
                                }); // 1691
                                //
                                if (_.isEmpty(oldOutstandingMethodBlocks)) return; // We have at least one block worth of old outstanding methods to try
                                // again. First: did onReconnect actually send anything? If not, we just                                           // 1697
                                // restore all outstanding methods and run the first block.                                                        // 1698
                                //
                                if (_.isEmpty(self._outstandingMethodBlocks)) {
                                    // 1699
                                    self._outstandingMethodBlocks = oldOutstandingMethodBlocks; // 1700
                                    //
                                    self._sendOutstandingMethods(); // 1701
                                    //
                                    return; // 1702
                                } // OK, there are blocks on both sides. Special case: merge the last block of                                     // 1703
                                // the reconnect methods with the first block of the original methods, if                                          // 1706
                                // neither of them are "wait" blocks.                                                                              // 1707
                                //
                                //
                                if (!_.last(self._outstandingMethodBlocks).wait && !oldOutstandingMethodBlocks[0].wait) {
                                    // 1708
                                    _.each(oldOutstandingMethodBlocks[0].methods, function (m) {
                                        // 1710
                                        _.last(self._outstandingMethodBlocks).methods.push(m); // If this "last block" is also the first block, send the message.
                                        //
                                        //
                                        if (self._outstandingMethodBlocks.length === 1) m.sendMessage(); // 1714
                                    }); // 1716
                                    //
                                    oldOutstandingMethodBlocks.shift(); // 1718
                                } // Now add the rest of the original blocks on.                                                                   // 1719
                                //
                                //
                                _.each(oldOutstandingMethodBlocks, function (block) {
                                    // 1722
                                    self._outstandingMethodBlocks.push(block); // 1723
                                }); // 1724
                            }, // 1725
                            // We can accept a hot code push if there are no methods in flight.                                                  // 1727
                            _readyToMigrate: function () {
                                // 1728
                                var self = this; // 1729
                                return _.isEmpty(self._methodInvokers); // 1730
                            }, // 1731
                            // If we were blocking a migration, see if it's now possible to continue.                                            // 1733
                            // Call whenever the set of outstanding/blocked methods shrinks.                                                     // 1734
                            _maybeMigrate: function () {
                                // 1735
                                var self = this; // 1736
                                //
                                if (self._retryMigrate && self._readyToMigrate()) {
                                    // 1737
                                    self._retryMigrate(); // 1738
                                    //
                                    self._retryMigrate = null; // 1739
                                } // 1740
                            } // 1741
                        }); // 478
                        //
                        LivedataTest.Connection = Connection; // @param url {String} URL to Meteor app,                                        // 1744
                        //     e.g.:                                                                                                           // 1747
                        //     "subdomain.meteor.com",                                                                                         // 1748
                        //     "http://subdomain.meteor.com",                                                                                  // 1749
                        //     "/",                                                                                                            // 1750
                        //     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                                  // 1751
                        /**                                                                                                                    // 1753
                         * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
                         * @locus Anywhere                                                                                                     //
                         * @param {String} url The URL of another Meteor application.                                                          //
                         */ //
                        //
                        DDP.connect = function (url, options) {
                            // 1758
                            var ret = new Connection(url, options); // 1759
                            allConnections.push(ret); // hack. see below.                                                                        // 1760
                            //
                            return ret; // 1761
                        }; // 1762
                        //
                        DDP._reconnectHook = new Hook({ // 1764
                            bindEnvironment: false // 1764
                        }); /**                                                                                                                // 1764
                             * @summary Register a function to call as the first step of                                                       //
                             * reconnecting. This function can call methods which will be executed before                                      //
                             * any other outstanding methods. For example, this can be used to re-establish                                    //
                             * the appropriate authentication context on the connection.                                                       //
                             * @locus Anywhere                                                                                                 //
                             * @param {Function} callback The function to call. It will be called with a                                       //
                             * single argument, the [connection object](#ddp_connect) that is reconnecting.                                    //
                             */ //
                        //
                        DDP.onReconnect = function (callback) {
                            // 1775
                            return DDP._reconnectHook.register(callback); // 1776
                        }; // Hack for `spiderable` package: a way to see if the page is done                                                  // 1777
                        // loading all the data it needs.                                                                                      // 1780
                        //                                                                                                                     // 1781
                        //
                        //
                        allConnections = []; // 1782
                        //
                        DDP._allSubscriptionsReady = function () {
                            // 1783
                            return _.all(allConnections, function (conn) {
                                // 1784
                                return _.all(conn._subscriptions, function (sub) {
                                    // 1785
                                    return sub.ready; // 1786
                                }); // 1787
                            }); // 1788
                        }; // 1789
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "client_convenience.js": function (_require8, _exports7, _module6) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/client_convenience.js                                                                           //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var DDP = void 0; // 1
                        _module6.watch(_require8("./namespace.js"), { // 1
                            DDP: function (v) {
                                // 1
                                DDP = v; // 1
                            } // 1
                        }, 0); // 1
                        //
                        // Meteor.refresh can be called on the client (if you're in common code) but it                                        // 3
                        // only has an effect on the server.                                                                                   // 4
                        Meteor.refresh = function (notification) {}; // 5
                        //
                        if (Meteor.isClient) {
                            // 8
                            // By default, try to connect back to the same endpoint as the page                                                  // 9
                            // was served from.                                                                                                  // 10
                            //                                                                                                                   // 11
                            // XXX We should be doing this a different way. Right now we don't                                                   // 12
                            // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't                                                     // 13
                            // include it on the server when computing                                                                           // 14
                            // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our                                                        // 15
                            // default, '/'.) We get by with this because DDP.connect then                                                       // 16
                            // forces the URL passed to it to be interpreted relative to the                                                     // 17
                            // app's deploy path, even if it is absolute. Instead, we should                                                     // 18
                            // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;                                                 // 19
                            // make the default ddpUrl be '' rather that '/'; and make                                                           // 20
                            // _translateUrl in stream_client_common.js not force absolute paths                                                 // 21
                            // to be treated like relative paths. See also                                                                       // 22
                            // stream_client_common.js #RationalizingRelativeDDPURLs                                                             // 23
                            var ddpUrl = '/'; // 24
                            //
                            if (typeof __meteor_runtime_config__ !== "undefined") {
                                // 25
                                if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL) ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;
                            } // 28
                            //
                            var retry = new Retry(); // 30
                            //
                            var onDDPVersionNegotiationFailure = function (description) {
                                // 32
                                Meteor._debug(description); // 33
                                //
                                if (Package.reload) {
                                    // 34
                                    var migrationData = Package.reload.Reload._migrationData('livedata') || {}; // 35
                                    var failures = migrationData.DDPVersionNegotiationFailures || 0; // 36
                                    ++failures; // 37
                                    //
                                    Package.reload.Reload._onMigrate('livedata', function () {
                                        // 38
                                        return [true, { // 39
                                            DDPVersionNegotiationFailures: failures // 39
                                        }]; // 39
                                    }); // 40
                                    //
                                    retry.retryLater(failures, function () {
                                        // 41
                                        Package.reload.Reload._reload(); // 42
                                    }); // 43
                                } // 44
                            }; // 45
                            //
                            Meteor.connection = DDP.connect(ddpUrl, { // 47
                                onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure // 49
                            }); // Proxy the public methods of Meteor.connection so they can                                                     // 48
                            // be called directly on Meteor.                                                                                     // 53
                            //
                            _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'], function (name) {
                                // 54
                                Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection); // 57
                            }); // 58
                        } else {
                            // 59
                            // Never set up a default connection on the server. Don't even map                                                   // 60
                            // subscribe/call/etc onto Meteor.                                                                                   // 61
                            Meteor.connection = null; // 62
                        } // Meteor.connection used to be called                                                                               // 63
                        // Meteor.default_connection. Provide backcompat as a courtesy even                                                    // 66
                        // though it was never documented.                                                                                     // 67
                        // XXX COMPAT WITH 0.6.4                                                                                               // 68
                        //
                        //
                        Meteor.default_connection = Meteor.connection; // We should transition from Meteor.connect to DDP.connect.             // 69
                        // XXX COMPAT WITH 0.6.4                                                                                               // 72
                        //
                        Meteor.connect = DDP.connect; // 73
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "namespace.js": function (_require9, _exports8, _module7) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/namespace.js                                                                                    //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        _module7.export({ // 1
                            DDP: function () {
                                // 1
                                return DDP; // 1
                            }, // 1
                            LivedataTest: function () {
                                // 1
                                return LivedataTest; // 1
                            } // 1
                        }); // 1
                        var DDP = {}; // 5
                        var LivedataTest = {}; // 6
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "id_map.js": function (_require10, _exports9, _module8) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/ddp-client/id_map.js                                                                                       //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        var _classCallCheck2 = _require10("babel-runtime/helpers/classCallCheck"); //
                        //
                        var _classCallCheck3 = _interopRequireDefault(_classCallCheck2); //
                        //
                        var _possibleConstructorReturn2 = _require10("babel-runtime/helpers/possibleConstructorReturn"); //
                        //
                        var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2); //
                        //
                        var _inherits2 = _require10("babel-runtime/helpers/inherits"); //
                        //
                        var _inherits3 = _interopRequireDefault(_inherits2); //
                        //
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : { "default": obj };
                        } //
                        //
                        _module8.export({ // 1
                            MongoIDMap: function () {
                                // 1
                                return MongoIDMap; // 1
                            } // 1
                        }); // 1
                        //
                        var MongoIDMap = function (_IdMap) {
                            //
                            (0, _inherits3.default)(MongoIDMap, _IdMap); //
                            //
                            function MongoIDMap() {
                                // 2
                                (0, _classCallCheck3.default)(this, MongoIDMap); // 2
                                return (0, _possibleConstructorReturn3.default)(this, _IdMap.call(this, MongoID.idStringify, MongoID.idParse)); // 2
                            } // 7
                            //
                            return MongoIDMap; //
                        }(IdMap); //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    } } } } }, {
        "extensions": [".js", ".json"]
    });
    _require2("./node_modules/meteor/ddp-client/sockjs-0.3.4.js");
    _require2("./node_modules/meteor/ddp-client/stream_client_sockjs.js");
    _require2("./node_modules/meteor/ddp-client/stream_client_common.js");
    _require2("./node_modules/meteor/ddp-client/livedata_common.js");
    _require2("./node_modules/meteor/ddp-client/random_stream.js");
    _require2("./node_modules/meteor/ddp-client/livedata_connection.js");
    _require2("./node_modules/meteor/ddp-client/client_convenience.js");
    var _exports = _require2("./node_modules/meteor/ddp-client/namespace.js");

    /* Exports */
    if (typeof Package === 'undefined') Package = {};
    (function (pkg, symbols) {
        for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
    })(Package['ddp-client'] = _exports, {
        DDP: DDP
    });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.ddp = {}, {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['ddp-server'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Package-scope variables */
  var LivedataTest;

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.livedata = {}, {
    DDP: DDP,
    LivedataTest: LivedataTest
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;
  var DDP = Package['ddp-client'].DDP;
  var check = Package.check.check;
  var Match = Package.check.Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "dynamic-import": { "client.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/client.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module.constructor; // 1
            var cache = _require("./cache.js"); // 2
            // 3
            // Call module.dynamicImport(id) to fetch a module and any/all of its          // 4
            // dependencies that have not already been fetched, and evaluate them as       // 5
            // soon as they arrive. This runtime API makes it very easy to implement       // 6
            // ECMAScript dynamic import(...) syntax.                                      // 7
            Module.prototype.dynamicImport = function (id) {
              // 8
              var module = this; // 9
              return module.prefetch(id).then(function () {
                // 10
                return getNamespace(module, id); // 11
              }); // 12
            }; // 13
            // 14
            // Called by Module.prototype.prefetch if there are any missing dynamic        // 15
            // modules that need to be fetched.                                            // 16
            meteorInstall.fetch = function (ids) {
              // 17
              var tree = Object.create(null); // 18
              var versions = Object.create(null); // 19
              var dynamicVersions = _require("./dynamic-versions.js"); // 20
              var missing; // 21
              // 22
              Object.keys(ids).forEach(function (id) {
                // 23
                var version = dynamicVersions.get(id); // 24
                if (version) {
                  // 25
                  versions[id] = version; // 26
                } else {
                  // 27
                  addToTree(missing = missing || Object.create(null), id, 1); // 28
                } // 29
              }); // 30
              // 31
              return cache.checkMany(versions).then(function (sources) {
                // 32
                Object.keys(sources).forEach(function (id) {
                  // 33
                  var source = sources[id]; // 34
                  if (source) {
                    // 35
                    var info = ids[id]; // 36
                    addToTree(tree, id, makeModuleFunction(id, source, info.options)); // 37
                  } else {
                    // 38
                    addToTree(missing = missing || Object.create(null), id, 1); // 39
                  } // 40
                }); // 41
                // 42
                return missing && fetchMissing(missing).then(function (results) {
                  // 43
                  var versionsAndSourcesById = Object.create(null); // 44
                  var flatResults = flattenModuleTree(results); // 45
                  // 46
                  Object.keys(flatResults).forEach(function (id) {
                    // 47
                    var source = flatResults[id]; // 48
                    var info = ids[id]; // 49
                    // 50
                    addToTree(tree, id, makeModuleFunction(id, source, info.options)); // 51
                    // 52
                    var version = dynamicVersions.get(id); // 53
                    if (version) {
                      // 54
                      versionsAndSourcesById[id] = { // 55
                        version: version, // 56
                        source: source // 57
                      }; // 58
                    } // 59
                  }); // 60
                  // 61
                  cache.setMany(versionsAndSourcesById); // 62
                }); // 63
                // 64
              }).then(function () {
                // 65
                return tree; // 66
              }); // 67
            }; // 68
            // 69
            function flattenModuleTree(tree) {
              // 70
              var parts = [""]; // 71
              var result = Object.create(null); // 72
              // 73
              function walk(t) {
                // 74
                if (t && typeof t === "object") {
                  // 75
                  Object.keys(t).forEach(function (key) {
                    // 76
                    parts.push(key); // 77
                    walk(t[key]); // 78
                    parts.pop(); // 79
                  }); // 80
                } else if (typeof t === "string") {
                  // 81
                  result[parts.join("/")] = t; // 82
                } // 83
              } // 84
              // 85
              walk(tree); // 86
              // 87
              return result; // 88
            } // 89
            // 90
            function makeModuleFunction(id, source, options) {
              // 91
              // By calling (options && options.eval || eval) in a wrapper function,       // 92
              // we delay the cost of parsing and evaluating the module code until the     // 93
              // module is first imported.                                                 // 94
              return function () {
                // 95
                // If an options.eval function was provided in the second argument to      // 96
                // meteorInstall when this bundle was first installed, use that            // 97
                // function to parse and evaluate the dynamic module code in the scope     // 98
                // of the package. Otherwise fall back to indirect (global) eval.          // 99
                return (options && options.eval || eval)( // 100
                // Wrap the function(require,exports,module){...} expression in          // 101
                // parentheses to force it to be parsed as an expression.                // 102
                "(" + source + ")\n//# sourceURL=" + id // 103
                ).apply(this, arguments); // 104
              }; // 105
            } // 106
            // 107
            function fetchMissing(missingTree) {
              // 108
              // Update lastFetchMissingPromise immediately, without waiting for           // 109
              // the results to be delivered.                                              // 110
              return new Promise(function (resolve, reject) {
                // 111
                Meteor.call( // 112
                "__dynamicImport", // 113
                missingTree, // 114
                function (error, resultsTree) {
                  // 115
                  error ? reject(error) : resolve(resultsTree); // 116
                } // 117
                ); // 118
              }); // 119
            } // 120
            // 121
            function addToTree(tree, id, value) {
              // 122
              var parts = id.split("/"); // 123
              var lastIndex = parts.length - 1; // 124
              parts.forEach(function (part, i) {
                // 125
                if (part) {
                  // 126
                  tree = tree[part] = tree[part] || ( // 127
                  i < lastIndex ? Object.create(null) : value); // 128
                } // 129
              }); // 130
            } // 131
            // 132
            function getNamespace(_module2, id) {
              // 133
              var namespace; // 134
              // 135
              _module2.watch(_module2.require(id), { // 136
                "*": function (ns) {
                  // 137
                  namespace = ns; // 138
                } // 139
              }); // 140
              // 141
              // This helps with Babel interop, since we're not just returning the         // 142
              // module.exports object.                                                    // 143
              Object.defineProperty(namespace, "__esModule", { // 144
                value: true, // 145
                enumerable: false // 146
              }); // 147
              // 148
              return namespace; // 149
            } // 150
            // 151
            /////////////////////////////////////////////////////////////////////////////////
          }, "cache.js": function (_require3, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/cache.js                                            //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var hasOwn = Object.prototype.hasOwnProperty; // 1
            var dbPromise; // 2
            // 3
            var canUseCache = // 4
            // The server doesn't benefit from dynamic module fetching, and almost       // 5
            // certainly doesn't support IndexedDB.                                      // 6
            Meteor.isClient && // 7
            // Cordova bundles all modules into the monolithic initial bundle, so        // 8
            // the dynamic module cache won't be necessary.                              // 9
            !Meteor.isCordova && // 10
            // Caching can be confusing in development, and is designed to be a          // 11
            // transparent optimization for production performance.                      // 12
            Meteor.isProduction; // 13
            // 14
            function getIDB() {
              // 15
              if (typeof indexedDB !== "undefined") return indexedDB; // 16
              if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB; // 17
              if (typeof mozIndexedDB !== "undefined") return mozIndexedDB; // 18
              if (typeof OIndexedDB !== "undefined") return OIndexedDB; // 19
              if (typeof msIndexedDB !== "undefined") return msIndexedDB; // 20
            } // 21
            // 22
            function withDB(callback) {
              // 23
              dbPromise = dbPromise || new Promise(function (resolve, reject) {
                // 24
                var idb = getIDB(); // 25
                if (!idb) {
                  // 26
                  throw new Error("IndexedDB not available"); // 27
                } // 28
                // 29
                // Incrementing the version number causes all existing object stores       // 30
                // to be deleted and recreates those specified by objectStoreMap.          // 31
                var request = idb.open("MeteorDynamicImportCache", 2); // 32
                // 33
                request.onupgradeneeded = function (event) {
                  // 34
                  var db = event.target.result; // 35
                  // 36
                  // It's fine to delete existing object stores since onupgradeneeded      // 37
                  // is only called when we change the DB version number, and the data     // 38
                  // we're storing is disposable/reconstructible.                          // 39
                  Array.from(db.objectStoreNames).forEach(db.deleteObjectStore, db); // 40
                  // 41
                  Object.keys(objectStoreMap).forEach(function (name) {
                    // 42
                    db.createObjectStore(name, objectStoreMap[name]); // 43
                  }); // 44
                }; // 45
                // 46
                request.onerror = makeOnError(reject, "indexedDB.open"); // 47
                request.onsuccess = function (event) {
                  // 48
                  resolve(event.target.result); // 49
                }; // 50
              }); // 51
              // 52
              return dbPromise.then(callback, function (error) {
                // 53
                return callback(null); // 54
              }); // 55
            } // 56
            // 57
            var objectStoreMap = { // 58
              sourcesByVersion: { keyPath: "version" // 59
              } }; // 60
            // 61
            function makeOnError(reject, source) {
              // 62
              return function (event) {
                // 63
                reject(new Error( // 64
                "IndexedDB failure in " + source + " " + // 65
                JSON.stringify(event.target) // 66
                )); // 67
                // 68
                // Returning true from an onerror callback function prevents an            // 69
                // InvalidStateError in Firefox during Private Browsing. Silencing         // 70
                // that error is safe because we handle the error more gracefully by       // 71
                // passing it to the Promise reject function above.                        // 72
                // https://github.com/meteor/meteor/issues/8697                            // 73
                return true; // 74
              }; // 75
            } // 76
            // 77
            var checkCount = 0; // 78
            // 79
            _exports3.checkMany = function (versions) {
              // 80
              var ids = Object.keys(versions); // 81
              var sourcesById = Object.create(null); // 82
              // 83
              // Initialize sourcesById with null values to indicate all sources are       // 84
              // missing (unless replaced with actual sources below).                      // 85
              ids.forEach(function (id) {
                // 86
                sourcesById[id] = null; // 87
              }); // 88
              // 89
              if (!canUseCache) {
                // 90
                return Promise.resolve(sourcesById); // 91
              } // 92
              // 93
              return withDB(function (db) {
                // 94
                if (!db) {
                  // 95
                  // We thought we could used IndexedDB, but something went wrong          // 96
                  // while opening the database, so err on the side of safety.             // 97
                  return sourcesById; // 98
                } // 99
                // 100
                var txn = db.transaction([// 101
                "sourcesByVersion" // 102
                ], "readonly"); // 103
                // 104
                var sourcesByVersion = txn.objectStore("sourcesByVersion"); // 105
                // 106
                ++checkCount; // 107
                // 108
                function finish() {
                  // 109
                  --checkCount; // 110
                  return sourcesById; // 111
                } // 112
                // 113
                return Promise.all(ids.map(function (id) {
                  // 114
                  return new Promise(function (resolve, reject) {
                    // 115
                    var version = versions[id]; // 116
                    if (version) {
                      // 117
                      var sourceRequest = sourcesByVersion.get(version); // 118
                      sourceRequest.onerror = makeOnError(reject, "sourcesByVersion.get");
                      sourceRequest.onsuccess = function (event) {
                        // 120
                        var result = event.target.result; // 121
                        if (result) {
                          // 122
                          sourcesById[id] = result.source; // 123
                        } // 124
                        resolve(); // 125
                      }; // 126
                    } else resolve(); // 127
                  }); // 128
                })).then(finish, finish); // 129
              }); // 130
            }; // 131
            // 132
            var pendingVersionsAndSourcesById = Object.create(null); // 133
            // 134
            _exports3.setMany = function (versionsAndSourcesById) {
              // 135
              if (canUseCache) {
                // 136
                Object.assign( // 137
                pendingVersionsAndSourcesById, // 138
                versionsAndSourcesById // 139
                ); // 140
                // 141
                // Delay the call to flushSetMany so that it doesn't contribute to the     // 142
                // amount of time it takes to call module.dynamicImport.                   // 143
                if (!flushSetMany.timer) {
                  // 144
                  flushSetMany.timer = setTimeout(flushSetMany, 100); // 145
                } // 146
              } // 147
            }; // 148
            // 149
            function flushSetMany() {
              // 150
              if (checkCount > 0) {
                // 151
                // If checkMany is currently underway, postpone the flush until later,     // 152
                // since updating the cache is less important than reading from it.        // 153
                return flushSetMany.timer = setTimeout(flushSetMany, 100); // 154
              } // 155
              // 156
              flushSetMany.timer = null; // 157
              // 158
              var versionsAndSourcesById = pendingVersionsAndSourcesById; // 159
              pendingVersionsAndSourcesById = Object.create(null); // 160
              // 161
              return withDB(function (db) {
                // 162
                if (!db) {
                  // 163
                  // We thought we could used IndexedDB, but something went wrong          // 164
                  // while opening the database, so err on the side of safety.             // 165
                  return; // 166
                } // 167
                // 168
                var setTxn = db.transaction([// 169
                "sourcesByVersion" // 170
                ], "readwrite"); // 171
                // 172
                var sourcesByVersion = setTxn.objectStore("sourcesByVersion"); // 173
                // 174
                return Promise.all( // 175
                Object.keys(versionsAndSourcesById).map(function (id) {
                  // 176
                  var info = versionsAndSourcesById[id]; // 177
                  return new Promise(function (resolve, reject) {
                    // 178
                    var request = sourcesByVersion.put({ // 179
                      version: info.version, // 180
                      source: info.source // 181
                    }); // 182
                    request.onerror = makeOnError(reject, "sourcesByVersion.put"); // 183
                    request.onsuccess = resolve; // 184
                  }); // 185
                }) // 186
                ); // 187
              }); // 188
            } // 189
            // 190
            /////////////////////////////////////////////////////////////////////////////////
          }, "dynamic-versions.js": function (_require4, _exports4) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/dynamic-versions.js                                 //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            // This magic double-underscored identifier gets replaced in                   // 1
            // tools/isobuild/bundler.js with a tree of hashes of all dynamic              // 2
            // modules, for use in client.js and cache.js.                                 // 3
            var versions = {}; // 4
            // 5
            _exports4.get = function (id) {
              // 6
              var tree = versions; // 7
              var version = null; // 8
              // 9
              id.split("/").some(function (part) {
                // 10
                if (part) {
                  // 11
                  // If the tree contains identifiers for Meteor packages with colons      // 12
                  // in their names, the colons should not have been replaced by           // 13
                  // underscores, but there's a bug that results in that behavior, so      // 14
                  // for now it seems safest to be tolerant of underscores here.           // 15
                  // https://github.com/meteor/meteor/pull/9103                            // 16
                  tree = tree[part] || tree[part.replace(":", "_")]; // 17
                } // 18
                // 19
                if (!tree) {
                  // 20
                  // Terminate the search without reassigning version.                     // 21
                  return true; // 22
                } // 23
                // 24
                if (typeof tree === "string") {
                  // 25
                  version = tree; // 26
                  return true; // 27
                } // 28
              }); // 29
              // 30
              return version; // 31
            }; // 32
            // 33
            /////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports2 = _require2("./node_modules/meteor/dynamic-import/client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['dynamic-import'] = _exports2;
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['hot-code-push'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var GeoJSON;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "geojson-utils": { "main.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/main.js                                                                          //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.GeoJSON = _require("./geojson-utils.js"); // 1
            // 2
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "geojson-utils.js": function (_require2, _exports2, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/geojson-utils.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            (function () {
              // 1
              var gju = {}; // 2
              // 3
              // Export the geojson object for **CommonJS**                                                            // 4
              if (typeof _module !== 'undefined' && _module.exports) {
                // 5
                _module.exports = gju; // 6
              } // 7
              // 8
              // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js                           // 9
              gju.lineStringsIntersect = function (l1, l2) {
                // 10
                var intersects = []; // 11
                for (var i = 0; i <= l1.coordinates.length - 2; ++i) {
                  // 12
                  for (var j = 0; j <= l2.coordinates.length - 2; ++j) {
                    // 13
                    var a1 = { // 14
                      x: l1.coordinates[i][1], // 15
                      y: l1.coordinates[i][0] // 16
                    },
                        // 17
                    a2 = { // 18
                      x: l1.coordinates[i + 1][1], // 19
                      y: l1.coordinates[i + 1][0] // 20
                    },
                        // 21
                    b1 = { // 22
                      x: l2.coordinates[j][1], // 23
                      y: l2.coordinates[j][0] // 24
                    },
                        // 25
                    b2 = { // 26
                      x: l2.coordinates[j + 1][1], // 27
                      y: l2.coordinates[j + 1][0] // 28
                    },
                        // 29
                    ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
                        // 30
                    ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
                        // 31
                    u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y); // 32
                    if (u_b != 0) {
                      // 33
                      var ua = ua_t / u_b,
                          // 34
                      ub = ub_t / u_b; // 35
                      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                        // 36
                        intersects.push({ // 37
                          'type': 'Point', // 38
                          'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)] // 39
                        }); // 40
                      } // 41
                    } // 42
                  } // 43
                } // 44
                if (intersects.length == 0) intersects = false; // 45
                return intersects; // 46
              }; // 47
              // 48
              // Bounding Box                                                                                          // 49
              // 50
              function boundingBoxAroundPolyCoords(coords) {
                // 51
                var xAll = [],
                    yAll = []; // 52
                // 53
                for (var i = 0; i < coords[0].length; i++) {
                  // 54
                  xAll.push(coords[0][i][1]); // 55
                  yAll.push(coords[0][i][0]); // 56
                } // 57
                // 58
                xAll = xAll.sort(function (a, b) {
                  return a - b;
                }); // 59
                yAll = yAll.sort(function (a, b) {
                  return a - b;
                }); // 60
                // 61
                return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]]; // 62
              } // 63
              // 64
              gju.pointInBoundingBox = function (point, bounds) {
                // 65
                return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]);
              }; // 67
              // 68
              // Point in Polygon                                                                                      // 69
              // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices           // 70
              // 71
              function pnpoly(x, y, coords) {
                // 72
                var vert = [[0, 0]]; // 73
                // 74
                for (var i = 0; i < coords.length; i++) {
                  // 75
                  for (var j = 0; j < coords[i].length; j++) {
                    // 76
                    vert.push(coords[i][j]); // 77
                  } // 78
                  vert.push([0, 0]); // 79
                } // 80
                // 81
                var inside = false; // 82
                for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {
                  // 83
                  if (vert[i][0] > y != vert[j][0] > y && x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]) inside = !inside;
                } // 85
                // 86
                return inside; // 87
              } // 88
              // 89
              gju.pointInPolygon = function (p, poly) {
                // 90
                var coords = poly.type == "Polygon" ? [poly.coordinates] : poly.coordinates; // 91
                // 92
                var insideBox = false; // 93
                for (var i = 0; i < coords.length; i++) {
                  // 94
                  if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true; // 95
                } // 96
                if (!insideBox) return false; // 97
                // 98
                var insidePoly = false; // 99
                for (var i = 0; i < coords.length; i++) {
                  // 100
                  if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true; // 101
                } // 102
                // 103
                return insidePoly; // 104
              }; // 105
              // 106
              gju.numberToRadius = function (number) {
                // 107
                return number * Math.PI / 180; // 108
              }; // 109
              // 110
              gju.numberToDegree = function (number) {
                // 111
                return number * 180 / Math.PI; // 112
              }; // 113
              // 114
              // written with help from @tautologe                                                                     // 115
              gju.drawCircle = function (radiusInMeters, centerPoint, steps) {
                // 116
                var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],
                    // 117
                dist = radiusInMeters / 1000 / 6371,
                    // 118
                // convert meters to radiant                                                                         // 119
                radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],
                    // 120
                steps = steps || 15,
                    // 121
                // 15 sided circle                                                                                   // 122
                poly = [[center[0], center[1]]]; // 123
                for (var i = 0; i < steps; i++) {
                  // 124
                  var brng = 2 * Math.PI * i / steps; // 125
                  var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) // 126
                  + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng)); // 127
                  var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), // 128
                  Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat)); // 129
                  poly[i] = []; // 130
                  poly[i][1] = gju.numberToDegree(lat); // 131
                  poly[i][0] = gju.numberToDegree(lng); // 132
                } // 133
                return { // 134
                  "type": "Polygon", // 135
                  "coordinates": [poly] // 136
                }; // 137
              }; // 138
              // 139
              // assumes rectangle starts at lower left point                                                          // 140
              gju.rectangleCentroid = function (rectangle) {
                // 141
                var bbox = rectangle.coordinates[0]; // 142
                var xmin = bbox[0][0],
                    // 143
                ymin = bbox[0][1],
                    // 144
                xmax = bbox[2][0],
                    // 145
                ymax = bbox[2][1]; // 146
                var xwidth = xmax - xmin; // 147
                var ywidth = ymax - ymin; // 148
                return { // 149
                  'type': 'Point', // 150
                  'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2] // 151
                }; // 152
              }; // 153
              // 154
              // from http://www.movable-type.co.uk/scripts/latlong.html                                               // 155
              gju.pointDistance = function (pt1, pt2) {
                // 156
                var lon1 = pt1.coordinates[0],
                    // 157
                lat1 = pt1.coordinates[1],
                    // 158
                lon2 = pt2.coordinates[0],
                    // 159
                lat2 = pt2.coordinates[1],
                    // 160
                dLat = gju.numberToRadius(lat2 - lat1),
                    // 161
                dLon = gju.numberToRadius(lon2 - lon1),
                    // 162
                a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1)) // 163
                * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),
                    // 164
                c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); // 165
                // Earth radius is 6371 km                                                                             // 166
                return 6371 * c * 1000; // returns meters                                                            // 167
              }, // 168
              // 169
              // checks if geometry lies entirely within a circle                                                      // 170
              // works with Point, LineString, Polygon                                                                 // 171
              gju.geometryWithinRadius = function (geometry, center, radius) {
                // 172
                if (geometry.type == 'Point') {
                  // 173
                  return gju.pointDistance(geometry, center) <= radius; // 174
                } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {
                  // 175
                  var point = {}; // 176
                  var coordinates; // 177
                  if (geometry.type == 'Polygon') {
                    // 178
                    // it's enough to check the exterior ring of the Polygon                                           // 179
                    coordinates = geometry.coordinates[0]; // 180
                  } else {
                    // 181
                    coordinates = geometry.coordinates; // 182
                  } // 183
                  for (var i in coordinates) {
                    // 184
                    point.coordinates = coordinates[i]; // 185
                    if (gju.pointDistance(point, center) > radius) {
                      // 186
                      return false; // 187
                    } // 188
                  } // 189
                } // 190
                return true; // 191
              }; // 192
              // 193
              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 194
              gju.area = function (polygon) {
                // 195
                var area = 0; // 196
                // TODO: polygon holes at coordinates[1]                                                               // 197
                var points = polygon.coordinates[0]; // 198
                var j = points.length - 1; // 199
                var p1, p2; // 200
                // 201
                for (var i = 0; i < points.length; j = i++) {
                  // 202
                  var p1 = { // 203
                    x: points[i][1], // 204
                    y: points[i][0] // 205
                  }; // 206
                  var p2 = { // 207
                    x: points[j][1], // 208
                    y: points[j][0] // 209
                  }; // 210
                  area += p1.x * p2.y; // 211
                  area -= p1.y * p2.x; // 212
                } // 213
                // 214
                area /= 2; // 215
                return area; // 216
              }, // 217
              // 218
              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 219
              gju.centroid = function (polygon) {
                // 220
                var f,
                    x = 0,
                    // 221
                y = 0; // 222
                // TODO: polygon holes at coordinates[1]                                                               // 223
                var points = polygon.coordinates[0]; // 224
                var j = points.length - 1; // 225
                var p1, p2; // 226
                // 227
                for (var i = 0; i < points.length; j = i++) {
                  // 228
                  var p1 = { // 229
                    x: points[i][1], // 230
                    y: points[i][0] // 231
                  }; // 232
                  var p2 = { // 233
                    x: points[j][1], // 234
                    y: points[j][0] // 235
                  }; // 236
                  f = p1.x * p2.y - p2.x * p1.y; // 237
                  x += (p1.x + p2.x) * f; // 238
                  y += (p1.y + p2.y) * f; // 239
                } // 240
                // 241
                f = gju.area(polygon) * 6; // 242
                return { // 243
                  'type': 'Point', // 244
                  'coordinates': [y / f, x / f] // 245
                }; // 246
              }, // 247
              // 248
              gju.simplify = function (source, kink) {
                /* source[] array of geojson points */ // 249
                /* kink	in metres, kinks above this depth kept  */ // 250
                /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
                kink = kink || 20; // 252
                source = source.map(function (o) {
                  // 253
                  return { // 254
                    lng: o.coordinates[0], // 255
                    lat: o.coordinates[1] // 256
                    // 257
                  };
                }); // 258
                // 259
                var n_source, n_stack, n_dest, start, end, i, sig; // 260
                var dev_sqr, max_dev_sqr, band_sqr; // 261
                var x12, y12, d12, x13, y13, d13, x23, y23, d23; // 262
                var F = Math.PI / 180.0 * 0.5; // 263
                var index = new Array(); /* aray of indexes of source points to include in the reduced line */ // 264
                var sig_start = new Array(); /* indices of start & end of working section */ // 265
                var sig_end = new Array(); // 266
                // 267
                /* check for simple cases */ // 268
                // 269
                if (source.length < 3) return source; /* one or two points */ // 270
                // 271
                /* more complex case. initialize stack */ // 272
                // 273
                n_source = source.length; // 274
                band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */ // 275
                band_sqr *= band_sqr; // 276
                n_dest = 0; // 277
                sig_start[0] = 0; // 278
                sig_end[0] = n_source - 1; // 279
                n_stack = 1; // 280
                // 281
                /* while the stack is not empty  ... */ // 282
                while (n_stack > 0) {
                  // 283
                  // 284
                  /* ... pop the top-most entries off the stacks */ // 285
                  // 286
                  start = sig_start[n_stack - 1]; // 287
                  end = sig_end[n_stack - 1]; // 288
                  n_stack--; // 289
                  // 290
                  if (end - start > 1) {
                    /* any intermediate points ? */ // 291
                    // 292
                    /* ... yes, so find most deviant intermediate point to                                             // 293
                    either side of line joining start & end points */ // 294
                    // 295
                    x12 = source[end].lng() - source[start].lng(); // 296
                    y12 = source[end].lat() - source[start].lat(); // 297
                    if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12); // 298
                    x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */ // 299
                    d12 = x12 * x12 + y12 * y12; // 300
                    // 301
                    for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {
                      // 302
                      // 303
                      x13 = source[i].lng() - source[start].lng(); // 304
                      y13 = source[i].lat() - source[start].lat(); // 305
                      if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13); // 306
                      x13 *= Math.cos(F * (source[i].lat() + source[start].lat())); // 307
                      d13 = x13 * x13 + y13 * y13; // 308
                      // 309
                      x23 = source[i].lng() - source[end].lng(); // 310
                      y23 = source[i].lat() - source[end].lat(); // 311
                      if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23); // 312
                      x23 *= Math.cos(F * (source[i].lat() + source[end].lat())); // 313
                      d23 = x23 * x23 + y23 * y23; // 314
                      // 315
                      if (d13 >= d12 + d23) dev_sqr = d23; // 316
                      else if (d23 >= d12 + d13) dev_sqr = d13; // 317
                        else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle        // 318
                      if (dev_sqr > max_dev_sqr) {
                        // 319
                        sig = i; // 320
                        max_dev_sqr = dev_sqr; // 321
                      } // 322
                    } // 323
                    // 324
                    if (max_dev_sqr < band_sqr) {
                      /* is there a sig. intermediate point ? */ // 325
                      /* ... no, so transfer current start point */ // 326
                      index[n_dest] = start; // 327
                      n_dest++; // 328
                    } else {
                      /* ... yes, so push two sub-sections on stack for further processing */ // 329
                      n_stack++; // 330
                      sig_start[n_stack - 1] = sig; // 331
                      sig_end[n_stack - 1] = end; // 332
                      n_stack++; // 333
                      sig_start[n_stack - 1] = start; // 334
                      sig_end[n_stack - 1] = sig; // 335
                    } // 336
                  } else {
                    /* ... no intermediate points, so transfer current start point */ // 337
                    index[n_dest] = start; // 338
                    n_dest++; // 339
                  } // 340
                } // 341
                // 342
                /* transfer last point */ // 343
                index[n_dest] = n_source - 1; // 344
                n_dest++; // 345
                // 346
                /* make return array */ // 347
                var r = new Array(); // 348
                for (var i = 0; i < n_dest; i++) // 349
                r.push(source[index[i]]); // 350
                // 351
                return r.map(function (o) {
                  // 352
                  return { // 353
                    type: "Point", // 354
                    coordinates: [o.lng, o.lat] // 355
                    // 356
                  };
                }); // 357
              }; // 358
              // 359
              // http://www.movable-type.co.uk/scripts/latlong.html#destPoint                                          // 360
              gju.destinationPoint = function (pt, brng, dist) {
                // 361
                dist = dist / 6371; // convert dist to angular distance in radians                                      // 362
                brng = gju.numberToRadius(brng); // 363
                // 364
                var lat1 = gju.numberToRadius(pt.coordinates[0]); // 365
                var lon1 = gju.numberToRadius(pt.coordinates[1]); // 366
                // 367
                var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + // 368
                Math.cos(lat1) * Math.sin(dist) * Math.cos(brng)); // 369
                var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), // 370
                Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2)); // 371
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180º                          // 372
                // 373
                return { // 374
                  'type': 'Point', // 375
                  'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)] // 376
                }; // 377
              }; // 378
              // 379
            })(); // 380
            // 381
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports3 = _require3("./node_modules/meteor/geojson-utils/main.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['geojson-utils'] = _exports3, {
    GeoJSON: GeoJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;

  /* Package-scope variables */
  var OrderedDict;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/ordered-dict/ordered_dict.js                                         //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    // This file defines an ordered dictionary abstraction that is useful for        // 1
    // maintaining a dataset backed by observeChanges.  It supports ordering items   // 2
    // by specifying the item they now come before.                                  // 3
    // 4
    // The implementation is a dictionary that contains nodes of a doubly-linked     // 5
    // list as its values.                                                           // 6
    // 7
    // constructs a new element struct                                               // 8
    // next and prev are whole elements, not keys.                                   // 9
    var element = function (key, value, next, prev) {
      // 10
      return { // 11
        key: key, // 12
        value: value, // 13
        next: next, // 14
        prev: prev // 15
      }; // 16
    }; // 17
    OrderedDict = function () /* ... */{
      // 18
      var self = this; // 19
      self._dict = {}; // 20
      self._first = null; // 21
      self._last = null; // 22
      self._size = 0; // 23
      var args = _.toArray(arguments); // 24
      self._stringify = function (x) {
        return x;
      }; // 25
      if (typeof args[0] === 'function') // 26
        self._stringify = args.shift(); // 27
      _.each(args, function (kv) {
        // 28
        self.putBefore(kv[0], kv[1], null); // 29
      }); // 30
    }; // 31
    // 32
    _.extend(OrderedDict.prototype, { // 33
      // the "prefix keys with a space" thing comes from here                        // 34
      // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649
      _k: function (key) {
        return " " + this._stringify(key);
      }, // 36
      // 37
      empty: function () {
        // 38
        var self = this; // 39
        return !self._first; // 40
      }, // 41
      size: function () {
        // 42
        var self = this; // 43
        return self._size; // 44
      }, // 45
      _linkEltIn: function (elt) {
        // 46
        var self = this; // 47
        if (!elt.next) {
          // 48
          elt.prev = self._last; // 49
          if (self._last) // 50
            self._last.next = elt; // 51
          self._last = elt; // 52
        } else {
          // 53
          elt.prev = elt.next.prev; // 54
          elt.next.prev = elt; // 55
          if (elt.prev) // 56
            elt.prev.next = elt; // 57
        } // 58
        if (self._first === null || self._first === elt.next) // 59
          self._first = elt; // 60
      }, // 61
      _linkEltOut: function (elt) {
        // 62
        var self = this; // 63
        if (elt.next) // 64
          elt.next.prev = elt.prev; // 65
        if (elt.prev) // 66
          elt.prev.next = elt.next; // 67
        if (elt === self._last) // 68
          self._last = elt.prev; // 69
        if (elt === self._first) // 70
          self._first = elt.next; // 71
      }, // 72
      putBefore: function (key, item, before) {
        // 73
        var self = this; // 74
        if (self._dict[self._k(key)]) // 75
          throw new Error("Item " + key + " already present in OrderedDict"); // 76
        var elt = before ? // 77
        element(key, item, self._dict[self._k(before)]) : // 78
        element(key, item, null); // 79
        if (elt.next === undefined) // 80
          throw new Error("could not find item to put this one before"); // 81
        self._linkEltIn(elt); // 82
        self._dict[self._k(key)] = elt; // 83
        self._size++; // 84
      }, // 85
      append: function (key, item) {
        // 86
        var self = this; // 87
        self.putBefore(key, item, null); // 88
      }, // 89
      remove: function (key) {
        // 90
        var self = this; // 91
        var elt = self._dict[self._k(key)]; // 92
        if (elt === undefined) // 93
          throw new Error("Item " + key + " not present in OrderedDict"); // 94
        self._linkEltOut(elt); // 95
        self._size--; // 96
        delete self._dict[self._k(key)]; // 97
        return elt.value; // 98
      }, // 99
      get: function (key) {
        // 100
        var self = this; // 101
        if (self.has(key)) // 102
          return self._dict[self._k(key)].value; // 103
        return undefined; // 104
      }, // 105
      has: function (key) {
        // 106
        var self = this; // 107
        return _.has(self._dict, self._k(key)); // 108
      }, // 109
      // Iterate through the items in this dictionary in order, calling              // 110
      // iter(value, key, index) on each one.                                        // 111
      // 112
      // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113
      forEach: function (iter) {
        // 114
        var self = this; // 115
        var i = 0; // 116
        var elt = self._first; // 117
        while (elt !== null) {
          // 118
          var b = iter(elt.value, elt.key, i); // 119
          if (b === OrderedDict.BREAK) // 120
            return; // 121
          elt = elt.next; // 122
          i++; // 123
        } // 124
      }, // 125
      first: function () {
        // 126
        var self = this; // 127
        if (self.empty()) // 128
          return undefined; // 129
        return self._first.key; // 130
      }, // 131
      firstValue: function () {
        // 132
        var self = this; // 133
        if (self.empty()) // 134
          return undefined; // 135
        return self._first.value; // 136
      }, // 137
      last: function () {
        // 138
        var self = this; // 139
        if (self.empty()) // 140
          return undefined; // 141
        return self._last.key; // 142
      }, // 143
      lastValue: function () {
        // 144
        var self = this; // 145
        if (self.empty()) // 146
          return undefined; // 147
        return self._last.value; // 148
      }, // 149
      prev: function (key) {
        // 150
        var self = this; // 151
        if (self.has(key)) {
          // 152
          var elt = self._dict[self._k(key)]; // 153
          if (elt.prev) // 154
            return elt.prev.key; // 155
        } // 156
        return null; // 157
      }, // 158
      next: function (key) {
        // 159
        var self = this; // 160
        if (self.has(key)) {
          // 161
          var elt = self._dict[self._k(key)]; // 162
          if (elt.next) // 163
            return elt.next.key; // 164
        } // 165
        return null; // 166
      }, // 167
      moveBefore: function (key, before) {
        // 168
        var self = this; // 169
        var elt = self._dict[self._k(key)]; // 170
        var eltBefore = before ? self._dict[self._k(before)] : null; // 171
        if (elt === undefined) // 172
          throw new Error("Item to move is not present"); // 173
        if (eltBefore === undefined) {
          // 174
          throw new Error("Could not find element to move this one before"); // 175
        } // 176
        if (eltBefore === elt.next) // no moving necessary                           // 177
          return; // 178
        // remove from its old place                                                 // 179
        self._linkEltOut(elt); // 180
        // patch into its new place                                                  // 181
        elt.next = eltBefore; // 182
        self._linkEltIn(elt); // 183
      }, // 184
      // Linear, sadly.                                                              // 185
      indexOf: function (key) {
        // 186
        var self = this; // 187
        var ret = null; // 188
        self.forEach(function (v, k, i) {
          // 189
          if (self._k(k) === self._k(key)) {
            // 190
            ret = i; // 191
            return OrderedDict.BREAK; // 192
          } // 193
          return undefined; // 194
        }); // 195
        return ret; // 196
      }, // 197
      _checkRep: function () {
        // 198
        var self = this; // 199
        _.each(self._dict, function (k, v) {
          // 200
          if (v.next === v) // 201
            throw new Error("Next is a loop"); // 202
          if (v.prev === v) // 203
            throw new Error("Prev is a loop"); // 204
        }); // 205
      } // 206
      // 207
    }); // 208
    OrderedDict.BREAK = { "break": true }; // 209
    // 210
    ///////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['ordered-dict'] = {}, {
    OrderedDict: OrderedDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var EJSON = Package.ejson.EJSON;
  var GeoJSON = Package['geojson-utils'].GeoJSON;
  var IdMap = Package['id-map'].IdMap;
  var MongoID = Package['mongo-id'].MongoID;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var Random = Package.random.Random;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var subMatcher, MinimongoTest, MinimongoError, LocalCollection, Minimongo;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "minimongo": { "minimongo_client.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_client.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.watch(_require("./minimongo_common.js")); // 1
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require2, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/common.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _toConsumableArray2 = _require2("babel-runtime/helpers/toConsumableArray"); //
            //
            var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2); //
            //
            var _typeof2 = _require2("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module2.export({ // 1
              hasOwn: function () {
                // 1
                return hasOwn; // 1
              }, // 1
              ELEMENT_OPERATORS: function () {
                // 1
                return ELEMENT_OPERATORS; // 1
              }, // 1
              compileDocumentSelector: function () {
                // 1
                return compileDocumentSelector; // 1
              }, // 1
              equalityElementMatcher: function () {
                // 1
                return equalityElementMatcher; // 1
              }, // 1
              expandArraysInBranches: function () {
                // 1
                return expandArraysInBranches; // 1
              }, // 1
              isIndexable: function () {
                // 1
                return isIndexable; // 1
              }, // 1
              isNumericKey: function () {
                // 1
                return isNumericKey; // 1
              }, // 1
              isOperatorObject: function () {
                // 1
                return isOperatorObject; // 1
              }, // 1
              makeLookupFunction: function () {
                // 1
                return makeLookupFunction; // 1
              }, // 1
              nothingMatcher: function () {
                // 1
                return nothingMatcher; // 1
              }, // 1
              pathsToTree: function () {
                // 1
                return pathsToTree; // 1
              }, // 1
              populateDocumentWithQueryFields: function () {
                // 1
                return populateDocumentWithQueryFields; // 1
              }, // 1
              projectionDetails: function () {
                // 1
                return projectionDetails; // 1
              }, // 1
              regexpElementMatcher: function () {
                // 1
                return regexpElementMatcher; // 1
              } // 1
            }); // 1
            var LocalCollection = void 0; // 1
            _module2.watch(_require2("./local_collection.js"), { // 1
              "default": function (v) {
                // 1
                LocalCollection = v; // 1
              } // 1
            }, 0); // 1
            var hasOwn = Object.prototype.hasOwnProperty; // 3
            var ELEMENT_OPERATORS = { // 17
              $lt: makeInequality(function (cmpValue) {
                // 18
                return cmpValue < 0; // 18
              }), // 18
              $gt: makeInequality(function (cmpValue) {
                // 19
                return cmpValue > 0; // 19
              }), // 19
              $lte: makeInequality(function (cmpValue) {
                // 20
                return cmpValue <= 0; // 20
              }), // 20
              $gte: makeInequality(function (cmpValue) {
                // 21
                return cmpValue >= 0; // 21
              }), // 21
              $mod: { // 22
                compileElementSelector: function (operand) {
                  // 23
                  if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {
                    throw Error('argument to $mod must be an array of two numbers'); // 27
                  } // XXX could require to be ints or round or something                                                          // 28
                  //
                  //
                  var divisor = operand[0]; // 31
                  var remainder = operand[1]; // 32
                  return function (value) {
                    // 33
                    return typeof value === 'number' && value % divisor === remainder; // 33
                  }; // 33
                } // 36
              }, // 22
              $in: { // 38
                compileElementSelector: function (operand) {
                  // 39
                  if (!Array.isArray(operand)) {
                    // 40
                    throw Error('$in needs an array'); // 41
                  } // 42
                  //
                  var elementMatchers = operand.map(function (option) {
                    // 44
                    if (option instanceof RegExp) {
                      // 45
                      return regexpElementMatcher(option); // 46
                    } // 47
                    //
                    if (isOperatorObject(option)) {
                      // 49
                      throw Error('cannot nest $ under $in'); // 50
                    } // 51
                    //
                    return equalityElementMatcher(option); // 53
                  }); // 54
                  return function (value) {
                    // 56
                    // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                                  // 57
                    if (value === undefined) {
                      // 58
                      value = null; // 59
                    } // 60
                    //
                    return elementMatchers.some(function (matcher) {
                      // 62
                      return matcher(value); // 62
                    }); // 62
                  }; // 63
                } // 64
              }, // 38
              $size: { // 66
                // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                                         // 67
                // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                                         // 68
                // possible value.                                                                                                 // 69
                dontExpandLeafArrays: true, // 70
                compileElementSelector: function (operand) {
                  // 71
                  if (typeof operand === 'string') {
                    // 72
                    // Don't ask me why, but by experimentation, this seems to be what Mongo                                       // 73
                    // does.                                                                                                       // 74
                    operand = 0; // 75
                  } else if (typeof operand !== 'number') {
                    // 76
                    throw Error('$size needs a number'); // 77
                  } // 78
                  //
                  return function (value) {
                    // 80
                    return Array.isArray(value) && value.length === operand; // 80
                  }; // 80
                } // 81
              }, // 66
              $type: { // 83
                // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                                          // 84
                // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                                          // 85
                // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                                          // 86
                // should *not* include it itself.                                                                                 // 87
                dontIncludeLeafArrays: true, // 88
                compileElementSelector: function (operand) {
                  // 89
                  if (typeof operand !== 'number') {
                    // 90
                    throw Error('$type needs a number'); // 91
                  } // 92
                  //
                  return function (value) {
                    // 94
                    return value !== undefined && LocalCollection._f._type(value) === operand; // 94
                  }; // 94
                } // 97
              }, // 83
              $bitsAllSet: { // 99
                compileElementSelector: function (operand) {
                  // 100
                  var mask = getOperandBitmask(operand, '$bitsAllSet'); // 101
                  return function (value) {
                    // 102
                    var bitmask = getValueBitmask(value, mask.length); // 103
                    return bitmask && mask.every(function (byte, i) {
                      // 104
                      return (bitmask[i] & byte) === byte; // 104
                    }); // 104
                  }; // 105
                } // 106
              }, // 99
              $bitsAnySet: { // 108
                compileElementSelector: function (operand) {
                  // 109
                  var mask = getOperandBitmask(operand, '$bitsAnySet'); // 110
                  return function (value) {
                    // 111
                    var bitmask = getValueBitmask(value, mask.length); // 112
                    return bitmask && mask.some(function (byte, i) {
                      // 113
                      return (~bitmask[i] & byte) !== byte; // 113
                    }); // 113
                  }; // 114
                } // 115
              }, // 108
              $bitsAllClear: { // 117
                compileElementSelector: function (operand) {
                  // 118
                  var mask = getOperandBitmask(operand, '$bitsAllClear'); // 119
                  return function (value) {
                    // 120
                    var bitmask = getValueBitmask(value, mask.length); // 121
                    return bitmask && mask.every(function (byte, i) {
                      // 122
                      return !(bitmask[i] & byte); // 122
                    }); // 122
                  }; // 123
                } // 124
              }, // 117
              $bitsAnyClear: { // 126
                compileElementSelector: function (operand) {
                  // 127
                  var mask = getOperandBitmask(operand, '$bitsAnyClear'); // 128
                  return function (value) {
                    // 129
                    var bitmask = getValueBitmask(value, mask.length); // 130
                    return bitmask && mask.some(function (byte, i) {
                      // 131
                      return (bitmask[i] & byte) !== byte; // 131
                    }); // 131
                  }; // 132
                } // 133
              }, // 126
              $regex: { // 135
                compileElementSelector: function (operand, valueSelector) {
                  // 136
                  if (!(typeof operand === 'string' || operand instanceof RegExp)) {
                    // 137
                    throw Error('$regex has to be a string or RegExp'); // 138
                  } // 139
                  //
                  var regexp = void 0; // 141
                  //
                  if (valueSelector.$options !== undefined) {
                    // 142
                    // Options passed in $options (even the empty string) always overrides                                         // 143
                    // options in the RegExp object itself.                                                                        // 144
                    // Be clear that we only support the JS-supported options, not extended                                        // 146
                    // ones (eg, Mongo supports x and s). Ideally we would implement x and s                                       // 147
                    // by transforming the regexp, but not today...                                                                // 148
                    if (/[^gim]/.test(valueSelector.$options)) {
                      // 149
                      throw new Error('Only the i, m, and g regexp options are supported'); // 150
                    } // 151
                    //
                    var source = operand instanceof RegExp ? operand.source : operand; // 153
                    regexp = new RegExp(source, valueSelector.$options); // 154
                  } else if (operand instanceof RegExp) {
                    // 155
                    regexp = operand; // 156
                  } else {
                    // 157
                    regexp = new RegExp(operand); // 158
                  } // 159
                  //
                  return regexpElementMatcher(regexp); // 161
                } // 162
              }, // 135
              $elemMatch: { // 164
                dontExpandLeafArrays: true, // 165
                compileElementSelector: function (operand, valueSelector, matcher) {
                  // 166
                  if (!LocalCollection._isPlainObject(operand)) {
                    // 167
                    throw Error('$elemMatch need an object'); // 168
                  } // 169
                  //
                  var isDocMatcher = !isOperatorObject(Object.keys(operand).filter(function (key) {
                    // 171
                    return !hasOwn.call(LOGICAL_OPERATORS, key); // 173
                  }).reduce(function (a, b) {
                    // 173
                    var _Object$assign; // 174
                    //
                    return Object.assign(a, (_Object$assign = {}, _Object$assign[b] = operand[b], _Object$assign)); // 174
                  }, {}), true); // 174
                  //
                  if (isDocMatcher) {
                    // 177
                    // This is NOT the same as compileValueSelector(operand), and not just                                         // 178
                    // because of the slightly different calling convention.                                                       // 179
                    // {$elemMatch: {x: 3}} means "an element has a field x:3", not                                                // 180
                    // "consists only of a field x:3". Also, regexps and sub-$ are allowed.                                        // 181
                    subMatcher = compileDocumentSelector(operand, matcher, { // 182
                      inElemMatch: true // 183
                    }); // 183
                  } else {
                    // 184
                    subMatcher = compileValueSelector(operand, matcher); // 185
                  } // 186
                  //
                  return function (value) {
                    // 188
                    if (!Array.isArray(value)) {
                      // 189
                      return false; // 190
                    } // 191
                    //
                    for (var i = 0; i < value.length; ++i) {
                      // 193
                      var arrayElement = value[i]; // 194
                      var arg = void 0; // 195
                      //
                      if (isDocMatcher) {
                        // 196
                        // We can only match {$elemMatch: {b: 3}} against objects.                                                 // 197
                        // (We can also match against arrays, if there's numeric indices,                                          // 198
                        // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                                   // 199
                        if (!isIndexable(arrayElement)) {
                          // 200
                          return false; // 201
                        } // 202
                        //
                        arg = arrayElement; // 204
                      } else {
                        // 205
                        // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                                            // 206
                        // {a: [8]} but not {a: [[8]]}                                                                             // 207
                        arg = [{ // 208
                          value: arrayElement, // 208
                          dontIterate: true // 208
                        }]; // 208
                      } // XXX support $near in $elemMatch by propagating $distance?                                               // 209
                      //
                      //
                      if (subMatcher(arg).result) {
                        // 211
                        return i; // specially understood to mean "use as arrayIndices"                                            // 212
                      } // 213
                    } // 214
                    //
                    return false; // 216
                  }; // 217
                } // 218
                // 164
              } }; // 17
            // Operators that appear at the top level of a document selector.                                                      // 222
            var LOGICAL_OPERATORS = { // 223
              $and: function (subSelector, matcher, inElemMatch) {
                // 224
                return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)); // 225
              }, // 228
              $or: function (subSelector, matcher, inElemMatch) {
                // 230
                var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*
                // any arrayIndices it returns.                                                                                    // 238
                //
                if (matchers.length === 1) {
                  // 239
                  return matchers[0]; // 240
                } // 241
                //
                return function (doc) {
                  // 243
                  var result = matchers.some(function (fn) {
                    // 244
                    return fn(doc).result; // 244
                  }); // $or does NOT set arrayIndices when it has multiple                                                        // 244
                  // sub-expressions. (Tested against MongoDB.)                                                                    // 246
                  //
                  return { // 247
                    result: result // 247
                  }; // 247
                }; // 248
              }, // 249
              $nor: function (subSelector, matcher, inElemMatch) {
                // 251
                var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // 252
                return function (doc) {
                  // 257
                  var result = matchers.every(function (fn) {
                    // 258
                    return !fn(doc).result; // 258
                  }); // Never set arrayIndices, because we only match if nothing in particular                                    // 258
                  // 'matched' (and because this is consistent with MongoDB).                                                      // 260
                  //
                  return { // 261
                    result: result // 261
                  }; // 261
                }; // 262
              }, // 263
              $where: function (selectorValue, matcher) {
                // 265
                // Record that *any* path may be used.                                                                             // 266
                matcher._recordPathUsed(''); // 267
                //
                matcher._hasWhere = true; // 268
                //
                if (!(selectorValue instanceof Function)) {
                  // 270
                  // XXX MongoDB seems to have more complex logic to decide where or or not                                        // 271
                  // to add 'return'; not sure exactly what it is.                                                                 // 272
                  selectorValue = Function('obj', "return " + selectorValue); // 273
                } // We make the document available as both `this` and `obj`.                                                      // 274
                // // XXX not sure what we should do if this throws                                                                // 277
                //
                //
                return function (doc) {
                  // 278
                  return { // 278
                    result: selectorValue.call(doc, doc) // 278
                  }; // 278
                }; // 278
              }, // 279
              // This is just used as a comment in the query (in MongoDB, it also ends up in                                       // 281
              // query logs); it has no effect on the actual selection.                                                            // 282
              $comment: function () {
                // 283
                return function () {
                  // 284
                  return { // 284
                    result: true // 284
                  }; // 284
                }; // 284
              } // 285
            }; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                                       // 223
            // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                                         // 289
            // "match each branched value independently and combine with                                                           // 290
            // convertElementMatcherToBranchedMatcher".                                                                            // 291
            //
            var VALUE_OPERATORS = { // 292
              $eq: function (operand) {
                // 293
                return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)); // 294
              }, // 297
              $not: function (operand, valueSelector, matcher) {
                // 298
                return invertBranchedMatcher(compileValueSelector(operand, matcher)); // 299
              }, // 300
              $ne: function (operand) {
                // 301
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))); // 302
              }, // 305
              $nin: function (operand) {
                // 306
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));
              }, // 312
              $exists: function (operand) {
                // 313
                var exists = convertElementMatcherToBranchedMatcher(function (value) {
                  // 314
                  return value !== undefined; // 315
                }); // 315
                return operand ? exists : invertBranchedMatcher(exists); // 317
              }, // 318
              // $options just provides options for $regex; its logic is inside $regex                                             // 319
              $options: function (operand, valueSelector) {
                // 320
                if (!hasOwn.call(valueSelector, '$regex')) {
                  // 321
                  throw Error('$options needs a $regex'); // 322
                } // 323
                //
                return everythingMatcher; // 325
              }, // 326
              // $maxDistance is basically an argument to $near                                                                    // 327
              $maxDistance: function (operand, valueSelector) {
                // 328
                if (!valueSelector.$near) {
                  // 329
                  throw Error('$maxDistance needs a $near'); // 330
                } // 331
                //
                return everythingMatcher; // 333
              }, // 334
              $all: function (operand, valueSelector, matcher) {
                // 335
                if (!Array.isArray(operand)) {
                  // 336
                  throw Error('$all requires array'); // 337
                } // Not sure why, but this seems to be what MongoDB does.                                                         // 338
                //
                //
                if (operand.length === 0) {
                  // 341
                  return nothingMatcher; // 342
                } // 343
                //
                var branchedMatchers = operand.map(function (criterion) {
                  // 345
                  // XXX handle $all/$elemMatch combination                                                                        // 346
                  if (isOperatorObject(criterion)) {
                    // 347
                    throw Error('no $ expressions in $all'); // 348
                  } // This is always a regexp or equality selector.                                                               // 349
                  //
                  //
                  return compileValueSelector(criterion, matcher); // 352
                }); // andBranchedMatchers does NOT require all selectors to return true on the                                    // 353
                // SAME branch.                                                                                                    // 356
                //
                return andBranchedMatchers(branchedMatchers); // 357
              }, // 358
              $near: function (operand, valueSelector, matcher, isRoot) {
                // 359
                if (!isRoot) {
                  // 360
                  throw Error('$near can\'t be inside another $ operator'); // 361
                } // 362
                //
                matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and             // 364
                // GeoJSON. They use different distance metrics, too. GeoJSON queries are                                          // 367
                // marked with a $geometry property, though legacy coordinates can be                                              // 368
                // matched using $geometry.                                                                                        // 369
                //
                var maxDistance = void 0,
                    // 370
                point = void 0,
                    // 370
                distance = void 0; // 370
                //
                if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {
                  // 371
                  // GeoJSON "2dsphere" mode.                                                                                      // 372
                  maxDistance = operand.$maxDistance; // 373
                  point = operand.$geometry; // 374
                  //
                  distance = function (value) {
                    // 375
                    // XXX: for now, we don't calculate the actual distance between, say,                                          // 376
                    // polygon and circle. If people care about this use-case it will get                                          // 377
                    // a priority.                                                                                                 // 378
                    if (!value) {
                      // 379
                      return null; // 380
                    } // 381
                    //
                    if (!value.type) {
                      // 383
                      return GeoJSON.pointDistance(point, { // 384
                        type: 'Point', // 386
                        coordinates: pointToArray(value) // 386
                      }); // 386
                    } // 388
                    //
                    if (value.type === 'Point') {
                      // 390
                      return GeoJSON.pointDistance(point, value); // 391
                    } // 392
                    //
                    return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1; // 394
                  }; // 397
                } else {
                  // 398
                  maxDistance = valueSelector.$maxDistance; // 399
                  //
                  if (!isIndexable(operand)) {
                    // 401
                    throw Error('$near argument must be coordinate pair or GeoJSON'); // 402
                  } // 403
                  //
                  point = pointToArray(operand); // 405
                  //
                  distance = function (value) {
                    // 407
                    if (!isIndexable(value)) {
                      // 408
                      return null; // 409
                    } // 410
                    //
                    return distanceCoordinatePairs(point, value); // 412
                  }; // 413
                } // 414
                //
                return function (branchedValues) {
                  // 416
                  // There might be multiple points in the document that match the given                                           // 417
                  // field. Only one of them needs to be within $maxDistance, but we need to                                       // 418
                  // evaluate all of them and use the nearest one for the implicit sort                                            // 419
                  // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                                             // 420
                  //                                                                                                               // 421
                  // Note: This differs from MongoDB's implementation, where a document will                                       // 422
                  // actually show up *multiple times* in the result set, with one entry for                                       // 423
                  // each within-$maxDistance branching point.                                                                     // 424
                  var result = { // 425
                    result: false // 425
                  }; // 425
                  expandArraysInBranches(branchedValues).every(function (branch) {
                    // 426
                    // if operation is an update, don't skip branches, just return the first                                       // 427
                    // one (#3599)                                                                                                 // 428
                    var curDistance = void 0; // 429
                    //
                    if (!matcher._isUpdate) {
                      // 430
                      if (!((0, _typeof3.default)(branch.value) === 'object')) {
                        // 431
                        return true; // 432
                      } // 433
                      //
                      curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.          // 435
                      //
                      if (curDistance === null || curDistance > maxDistance) {
                        // 438
                        return true; // 439
                      } // Skip anything that's a tie.                                                                             // 440
                      //
                      //
                      if (result.distance !== undefined && result.distance <= curDistance) {
                        // 443
                        return true; // 444
                      } // 445
                    } // 446
                    //
                    result.result = true; // 448
                    result.distance = curDistance; // 449
                    //
                    if (branch.arrayIndices) {
                      // 451
                      result.arrayIndices = branch.arrayIndices; // 452
                    } else {
                      // 453
                      delete result.arrayIndices; // 454
                    } // 455
                    //
                    return !matcher._isUpdate; // 457
                  }); // 458
                  return result; // 460
                }; // 461
              } // 462
            }; // NB: We are cheating and using this function to implement 'AND' for both                                          // 292
            // 'document matchers' and 'branched matchers'. They both return result objects                                        // 466
            // but the argument is different: for the former it's a whole doc, whereas for                                         // 467
            // the latter it's an array of 'branched values'.                                                                      // 468
            //
            function andSomeMatchers(subMatchers) {
              // 469
              if (subMatchers.length === 0) {
                // 470
                return everythingMatcher; // 471
              } // 472
              //
              if (subMatchers.length === 1) {
                // 474
                return subMatchers[0]; // 475
              } // 476
              //
              return function (docOrBranches) {
                // 478
                var match = {}; // 479
                match.result = subMatchers.every(function (fn) {
                  // 480
                  var subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has             // 481
                  // one. Yes, this means that if there are multiple $near fields in a                                             // 484
                  // query, something arbitrary happens; this appears to be consistent with                                        // 485
                  // Mongo.                                                                                                        // 486
                  //
                  if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {
                    // 487
                    match.distance = subResult.distance; // 490
                  } // Similarly, propagate arrayIndices from sub-matchers... but to match                                         // 491
                  // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                                          // 494
                  // wins.                                                                                                         // 495
                  //
                  //
                  if (subResult.result && subResult.arrayIndices) {
                    // 496
                    match.arrayIndices = subResult.arrayIndices; // 497
                  } // 498
                  //
                  return subResult.result; // 500
                }); // If we didn't actually match, forget any extra metadata we came up with.                                     // 501
                //
                if (!match.result) {
                  // 504
                  delete match.distance; // 505
                  delete match.arrayIndices; // 506
                } // 507
                //
                return match; // 509
              }; // 510
            } // 511
            //
            var andDocumentMatchers = andSomeMatchers; // 513
            var andBranchedMatchers = andSomeMatchers; // 514
            //
            function compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {
              // 516
              if (!Array.isArray(selectors) || selectors.length === 0) {
                // 517
                throw Error('$and/$or/$nor must be nonempty array'); // 518
              } // 519
              //
              return selectors.map(function (subSelector) {
                // 521
                if (!LocalCollection._isPlainObject(subSelector)) {
                  // 522
                  throw Error('$or/$and/$nor entries need to be full objects'); // 523
                } // 524
                //
                return compileDocumentSelector(subSelector, matcher, { // 526
                  inElemMatch: inElemMatch // 526
                }); // 526
              }); // 527
            } // Takes in a selector that could match a full document (eg, the original                                            // 528
            // selector). Returns a function mapping document->result object.                                                      // 531
            //                                                                                                                     // 532
            // matcher is the Matcher object we are compiling.                                                                     // 533
            //                                                                                                                     // 534
            // If this is the root document selector (ie, not wrapped in $and or the like),                                        // 535
            // then isRoot is true. (This is used by $near.)                                                                       // 536
            //
            //
            function compileDocumentSelector(docSelector, matcher) {
              // 537
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // 537
              var docMatchers = Object.keys(docSelector).map(function (key) {
                // 538
                var subSelector = docSelector[key]; // 539
                //
                if (key.substr(0, 1) === '$') {
                  // 541
                  // Outer operators are either logical operators (they recurse back into                                          // 542
                  // this function), or $where.                                                                                    // 543
                  if (!hasOwn.call(LOGICAL_OPERATORS, key)) {
                    // 544
                    throw new Error("Unrecognized logical operator: " + key); // 545
                  } // 546
                  //
                  matcher._isSimple = false; // 548
                  return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch); // 549
                } // Record this path, but only if we aren't in an elemMatcher, since in an                                        // 550
                // elemMatch this is a path inside an object in an array, not in the doc                                           // 553
                // root.                                                                                                           // 554
                //
                //
                if (!options.inElemMatch) {
                  // 555
                  matcher._recordPathUsed(key); // 556
                } // Don't add a matcher if subSelector is a function -- this is to match                                          // 557
                // the behavior of Meteor on the server (inherited from the node mongodb                                           // 560
                // driver), which is to ignore any part of a selector which is a function.                                         // 561
                //
                //
                if (typeof subSelector === 'function') {
                  // 562
                  return undefined; // 563
                } // 564
                //
                var lookUpByIndex = makeLookupFunction(key); // 566
                var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot); // 567
                return function (doc) {
                  // 573
                  return valueMatcher(lookUpByIndex(doc)); // 573
                }; // 573
              }).filter(Boolean); // 574
              return andDocumentMatchers(docMatchers); // 576
            } // 577
            //
            // Takes in a selector that could match a key-indexed value in a document; eg,                                         // 579
            // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                                         // 580
            // indicate equality).  Returns a branched matcher: a function mapping                                                 // 581
            // [branched value]->result object.                                                                                    // 582
            function compileValueSelector(valueSelector, matcher, isRoot) {
              // 583
              if (valueSelector instanceof RegExp) {
                // 584
                matcher._isSimple = false; // 585
                return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector)); // 586
              } // 589
              //
              if (isOperatorObject(valueSelector)) {
                // 591
                return operatorBranchedMatcher(valueSelector, matcher, isRoot); // 592
              } // 593
              //
              return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector)); // 595
            } // Given an element matcher (which evaluates a single value), returns a branched                                     // 598
            // value (which evaluates the element matcher on all the branches and returns a                                        // 601
            // more structured return value possibly including arrayIndices).                                                      // 602
            //
            //
            function convertElementMatcherToBranchedMatcher(elementMatcher) {
              // 603
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // 603
              return function (branches) {
                // 604
                var expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);
                var match = {}; // 609
                match.result = expanded.some(function (element) {
                  // 610
                  var matched = elementMatcher(element.value); // Special case for $elemMatch: it means "true, and use this as an array
                  // index if I didn't already have one".                                                                          // 614
                  //
                  if (typeof matched === 'number') {
                    // 615
                    // XXX This code dates from when we only stored a single array index                                           // 616
                    // (for the outermost array). Should we be also including deeper array                                         // 617
                    // indices from the $elemMatch match?                                                                          // 618
                    if (!element.arrayIndices) {
                      // 619
                      element.arrayIndices = [matched]; // 620
                    } // 621
                    //
                    matched = true; // 623
                  } // If some element matched, and it's tagged with array indices, include                                        // 624
                  // those indices in our result object.                                                                           // 627
                  //
                  //
                  if (matched && element.arrayIndices) {
                    // 628
                    match.arrayIndices = element.arrayIndices; // 629
                  } // 630
                  //
                  return matched; // 632
                }); // 633
                return match; // 635
              }; // 636
            } // Helpers for $near.                                                                                                // 637
            //
            //
            function distanceCoordinatePairs(a, b) {
              // 640
              var pointA = pointToArray(a); // 641
              var pointB = pointToArray(b); // 642
              return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]); // 644
            } // Takes something that is not an operator object and returns an element matcher                                     // 645
            // for equality with that thing.                                                                                       // 648
            //
            //
            function equalityElementMatcher(elementSelector) {
              // 649
              if (isOperatorObject(elementSelector)) {
                // 650
                throw Error('Can\'t create equalityValueSelector for operator object'); // 651
              } // Special-case: null and undefined are equal (if you got undefined in there                                       // 652
              // somewhere, or if you got it due to some branch being non-existent in the                                          // 655
              // weird special case), even though they aren't with EJSON.equals.                                                   // 656
              // undefined or null                                                                                                 // 657
              //
              //
              if (elementSelector == null) {
                // 658
                return function (value) {
                  // 659
                  return value == null; // 659
                }; // 659
              } // 660
              //
              return function (value) {
                // 662
                return LocalCollection._f._equal(elementSelector, value); // 662
              }; // 662
            } // 663
            //
            function everythingMatcher(docOrBranchedValues) {
              // 665
              return { // 666
                result: true // 666
              }; // 666
            } // 667
            //
            function expandArraysInBranches(branches, skipTheArrays) {
              // 669
              var branchesOut = []; // 670
              branches.forEach(function (branch) {
                // 672
                var thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going
                // to iterate and we're told to skip arrays.  (That's right, we include some                                       // 676
                // arrays even skipTheArrays is true: these are arrays that were found via                                         // 677
                // explicit numerical indices.)                                                                                    // 678
                //
                if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {
                  // 679
                  branchesOut.push({ // 680
                    arrayIndices: branch.arrayIndices, // 680
                    value: branch.value // 680
                  }); // 680
                } // 681
                //
                if (thisIsArray && !branch.dontIterate) {
                  // 683
                  branch.value.forEach(function (value, i) {
                    // 684
                    branchesOut.push({ // 685
                      arrayIndices: (branch.arrayIndices || []).concat(i), // 686
                      value: value // 687
                    }); // 685
                  }); // 689
                } // 690
              }); // 691
              return branchesOut; // 693
            } // 694
            //
            // Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.                                                    // 696
            function getOperandBitmask(operand, selector) {
              // 697
              // numeric bitmask                                                                                                   // 698
              // You can provide a numeric bitmask to be matched against the operand field.                                        // 699
              // It must be representable as a non-negative 32-bit signed integer.                                                 // 700
              // Otherwise, $bitsAllSet will return an error.                                                                      // 701
              if (Number.isInteger(operand) && operand >= 0) {
                // 702
                return new Uint8Array(new Int32Array([operand]).buffer); // 703
              } // bindata bitmask                                                                                                 // 704
              // You can also use an arbitrarily large BinData instance as a bitmask.                                              // 707
              //
              //
              if (EJSON.isBinary(operand)) {
                // 708
                return new Uint8Array(operand.buffer); // 709
              } // position list                                                                                                   // 710
              // If querying a list of bit positions, each <position> must be a non-negative                                       // 713
              // integer. Bit positions start at 0 from the least significant bit.                                                 // 714
              //
              //
              if (Array.isArray(operand) && operand.every(function (x) {
                // 715
                return Number.isInteger(x) && x >= 0; // 716
              })) {
                // 716
                var buffer = new ArrayBuffer((Math.max.apply(Math, (0, _toConsumableArray3.default)(operand)) >> 3) + 1); // 717
                var view = new Uint8Array(buffer); // 718
                operand.forEach(function (x) {
                  // 720
                  view[x >> 3] |= 1 << (x & 0x7); // 721
                }); // 722
                return view; // 724
              } // bad operand                                                                                                     // 725
              //
              //
              throw Error("operand to " + selector + " must be a numeric bitmask (representable as a " + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');
            } // 733
            //
            function getValueBitmask(value, length) {
              // 735
              // The field value must be either numerical or a BinData instance. Otherwise,                                        // 736
              // $bits... will not match the current document.                                                                     // 737
              // numerical                                                                                                         // 739
              if (Number.isSafeInteger(value)) {
                // 740
                // $bits... will not match numerical values that cannot be represented as a                                        // 741
                // signed 64-bit integer. This can be the case if a value is either too                                            // 742
                // large or small to fit in a signed 64-bit integer, or if it has a                                                // 743
                // fractional component.                                                                                           // 744
                var buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)); // 745
                var view = new Uint32Array(buffer, 0, 2); // 749
                view[0] = value % ((1 << 16) * (1 << 16)) | 0; // 750
                view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension                                                   // 751
                //
                if (value < 0) {
                  // 754
                  view = new Uint8Array(buffer, 2); // 755
                  view.forEach(function (byte, i) {
                    // 756
                    view[i] = 0xff; // 757
                  }); // 758
                } // 759
                //
                return new Uint8Array(buffer); // 761
              } // bindata                                                                                                         // 762
              //
              //
              if (EJSON.isBinary(value)) {
                // 765
                return new Uint8Array(value.buffer); // 766
              } // no match                                                                                                        // 767
              //
              //
              return false; // 770
            } // Actually inserts a key value into the selector document                                                           // 771
            // However, this checks there is no ambiguity in setting                                                               // 774
            // the value for the given key, throws otherwise                                                                       // 775
            //
            //
            function insertIntoDocument(document, key, value) {
              // 776
              Object.keys(document).forEach(function (existingKey) {
                // 777
                if (existingKey.length > key.length && existingKey.indexOf(key) === 0 || key.length > existingKey.length && key.indexOf(existingKey) === 0) {
                  throw new Error("cannot infer query fields to set, both paths '" + existingKey + "' and " + ("'" + key + "' are matched"));
                } else if (existingKey === key) {
                  // 786
                  throw new Error("cannot infer query fields to set, path '" + key + "' is matched twice"); // 787
                } // 790
              }); // 791
              document[key] = value; // 793
            } // Returns a branched matcher that matches iff the given matcher does not.                                           // 794
            // Note that this implicitly "deMorganizes" the wrapped function.  ie, it                                              // 797
            // means that ALL branch values need to fail to match innerBranchedMatcher.                                            // 798
            //
            //
            function invertBranchedMatcher(branchedMatcher) {
              // 799
              return function (branchValues) {
                // 800
                // We explicitly choose to strip arrayIndices here: it doesn't make sense to                                       // 801
                // say "update the array element that does not match something", at least                                          // 802
                // in mongo-land.                                                                                                  // 803
                return { // 804
                  result: !branchedMatcher(branchValues).result // 804
                }; // 804
              }; // 805
            } // 806
            //
            function isIndexable(obj) {
              // 808
              return Array.isArray(obj) || LocalCollection._isPlainObject(obj); // 809
            } // 810
            //
            function isNumericKey(s) {
              // 812
              return (/^[0-9]+$/.test(s) // 813

              ); // 813
            } // 814
            //
            function isOperatorObject(valueSelector, inconsistentOK) {
              // 819
              if (!LocalCollection._isPlainObject(valueSelector)) {
                // 820
                return false; // 821
              } // 822
              //
              var theseAreOperators = undefined; // 824
              Object.keys(valueSelector).forEach(function (selKey) {
                // 825
                var thisIsOperator = selKey.substr(0, 1) === '$'; // 826
                //
                if (theseAreOperators === undefined) {
                  // 828
                  theseAreOperators = thisIsOperator; // 829
                } else if (theseAreOperators !== thisIsOperator) {
                  // 830
                  if (!inconsistentOK) {
                    // 831
                    throw new Error("Inconsistent operator: " + JSON.stringify(valueSelector)); // 832
                  } // 835
                  //
                  theseAreOperators = false; // 837
                } // 838
              }); // 839
              return !!theseAreOperators; // {} has no operators                                                                   // 841
            } // 842
            //
            // Helper for $lt/$gt/$lte/$gte.                                                                                       // 844
            function makeInequality(cmpValueComparator) {
              // 845
              return { // 846
                compileElementSelector: function (operand) {
                  // 847
                  // Arrays never compare false with non-arrays for any inequality.                                                // 848
                  // XXX This was behavior we observed in pre-release MongoDB 2.5, but                                             // 849
                  //     it seems to have been reverted.                                                                           // 850
                  //     See https://jira.mongodb.org/browse/SERVER-11444                                                          // 851
                  if (Array.isArray(operand)) {
                    // 852
                    return function () {
                      // 853
                      return false; // 853
                    }; // 853
                  } // Special case: consider undefined and null the same (so true with                                            // 854
                  // $gte/$lte).                                                                                                   // 857
                  //
                  //
                  if (operand === undefined) {
                    // 858
                    operand = null; // 859
                  } // 860
                  //
                  var operandType = LocalCollection._f._type(operand); // 862
                  //
                  return function (value) {
                    // 864
                    if (value === undefined) {
                      // 865
                      value = null; // 866
                    } // Comparisons are never true among things of different type (except                                         // 867
                    // null vs undefined).                                                                                         // 870
                    //
                    //
                    if (LocalCollection._f._type(value) !== operandType) {
                      // 871
                      return false; // 872
                    } // 873
                    //
                    return cmpValueComparator(LocalCollection._f._cmp(value, operand)); // 875
                  }; // 876
                } // 877
              }; // 846
            } // makeLookupFunction(key) returns a lookup function.                                                                // 879
            //                                                                                                                     // 882
            // A lookup function takes in a document and returns an array of matching                                              // 883
            // branches.  If no arrays are found while looking up the key, this array will                                         // 884
            // have exactly one branches (possibly 'undefined', if some segment of the key                                         // 885
            // was not found).                                                                                                     // 886
            //                                                                                                                     // 887
            // If arrays are found in the middle, this can have more than one element, since                                       // 888
            // we 'branch'. When we 'branch', if there are more key segments to look up,                                           // 889
            // then we only pursue branches that are plain objects (not arrays or scalars).                                        // 890
            // This means we can actually end up with no branches!                                                                 // 891
            //                                                                                                                     // 892
            // We do *NOT* branch on arrays that are found at the end (ie, at the last                                             // 893
            // dotted member of the key). We just return that array; if you want to                                                // 894
            // effectively 'branch' over the array's values, post-process the lookup                                               // 895
            // function with expandArraysInBranches.                                                                               // 896
            //                                                                                                                     // 897
            // Each branch is an object with keys:                                                                                 // 898
            //  - value: the value at the branch                                                                                   // 899
            //  - dontIterate: an optional bool; if true, it means that 'value' is an array                                        // 900
            //    that expandArraysInBranches should NOT expand. This specifically happens                                         // 901
            //    when there is a numeric index in the key, and ensures the                                                        // 902
            //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                                    // 903
            //    match {a: [[5]]}.                                                                                                // 904
            //  - arrayIndices: if any array indexing was done during lookup (either due to                                        // 905
            //    explicit numeric indices or implicit branching), this will be an array of                                        // 906
            //    the array indices used, from outermost to innermost; it is falsey or                                             // 907
            //    absent if no array index is used. If an explicit numeric index is used,                                          // 908
            //    the index will be followed in arrayIndices by the string 'x'.                                                    // 909
            //                                                                                                                     // 910
            //    Note: arrayIndices is used for two purposes. First, it is used to                                                // 911
            //    implement the '$' modifier feature, which only ever looks at its first                                           // 912
            //    element.                                                                                                         // 913
            //                                                                                                                     // 914
            //    Second, it is used for sort key generation, which needs to be able to tell                                       // 915
            //    the difference between different paths. Moreover, it needs to                                                    // 916
            //    differentiate between explicit and implicit branching, which is why                                              // 917
            //    there's the somewhat hacky 'x' entry: this means that explicit and                                               // 918
            //    implicit array lookups will have different full arrayIndices paths. (That                                        // 919
            //    code only requires that different paths have different arrayIndices; it                                          // 920
            //    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices                                           // 921
            //    could contain objects with flags like 'implicit', but I think that only                                          // 922
            //    makes the code surrounding them more complex.)                                                                   // 923
            //                                                                                                                     // 924
            //    (By the way, this field ends up getting passed around a lot without                                              // 925
            //    cloning, so never mutate any arrayIndices field/var in this package!)                                            // 926
            //                                                                                                                     // 927
            //                                                                                                                     // 928
            // At the top level, you may only pass in a plain object or array.                                                     // 929
            //                                                                                                                     // 930
            // See the test 'minimongo - lookup' for some examples of what lookup functions                                        // 931
            // return.                                                                                                             // 932
            //
            //
            function makeLookupFunction(key) {
              // 933
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // 933
              var parts = key.split('.'); // 934
              var firstPart = parts.length ? parts[0] : ''; // 935
              var lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.')); // 936
              //
              var omitUnnecessaryFields = function (result) {
                // 941
                if (!result.dontIterate) {
                  // 942
                  delete result.dontIterate; // 943
                } // 944
                //
                if (result.arrayIndices && !result.arrayIndices.length) {
                  // 946
                  delete result.arrayIndices; // 947
                } // 948
                //
                return result; // 950
              }; // Doc will always be a plain object or an array.                                                                 // 951
              // apply an explicit numeric index, an array.                                                                        // 954
              //
              //
              return function (doc) {
                // 955
                var arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : []; // 955
                //
                if (Array.isArray(doc)) {
                  // 956
                  // If we're being asked to do an invalid lookup into an array (non-integer                                       // 957
                  // or out-of-bounds), return no results (which is different from returning                                       // 958
                  // a single undefined result, in that `null` equality checks won't match).                                       // 959
                  if (!(isNumericKey(firstPart) && firstPart < doc.length)) {
                    // 960
                    return []; // 961
                  } // Remember that we used this array index. Include an 'x' to indicate that                                     // 962
                  // the previous index came from being considered as an explicit array                                            // 965
                  // index (not branching).                                                                                        // 966
                  //
                  //
                  arrayIndices = arrayIndices.concat(+firstPart, 'x'); // 967
                } // Do our first lookup.                                                                                          // 968
                //
                //
                var firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.                            // 971
                //                                                                                                                 // 974
                // If what we found is an array, most value selectors will choose to treat                                         // 975
                // the elements of the array as matchable values in their own right, but                                           // 976
                // that's done outside of the lookup function. (Exceptions to this are $size                                       // 977
                // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                                       // 978
                // [[1, 2]]}.)                                                                                                     // 979
                //                                                                                                                 // 980
                // That said, if we just did an *explicit* array lookup (on doc) to find                                           // 981
                // firstLevel, and firstLevel is an array too, we do NOT want value                                                // 982
                // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                                        // 983
                // So in that case, we mark the return value as 'don't iterate'.                                                   // 984
                //
                if (!lookupRest) {
                  // 985
                  return [omitUnnecessaryFields({ // 986
                    arrayIndices: arrayIndices, // 987
                    dontIterate: Array.isArray(doc) && Array.isArray(firstLevel), // 988
                    value: firstLevel // 989
                  })]; // 986
                } // We need to dig deeper.  But if we can't, because what we've found is not                                      // 991
                // an array or plain object, we're done. If we just did a numeric index into                                       // 994
                // an array, we return nothing here (this is a change in Mongo 2.5 from                                            // 995
                // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                                         // 996
                // return a single `undefined` (which can, for example, match via equality                                         // 997
                // with `null`).                                                                                                   // 998
                //
                //
                if (!isIndexable(firstLevel)) {
                  // 999
                  if (Array.isArray(doc)) {
                    // 1000
                    return []; // 1001
                  } // 1002
                  //
                  return [omitUnnecessaryFields({ // 1004
                    arrayIndices: arrayIndices, // 1004
                    value: undefined // 1004
                  })]; // 1004
                } // 1005
                //
                var result = []; // 1007
                //
                var appendToResult = function (more) {
                  // 1008
                  result.push.apply(result, (0, _toConsumableArray3.default)(more)); // 1009
                }; // Dig deeper: look up the rest of the parts on whatever we've found.                                           // 1010
                // (lookupRest is smart enough to not try to do invalid lookups into                                               // 1013
                // firstLevel if it's an array.)                                                                                   // 1014
                //
                //
                appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next
                // part as a literal integer lookup, we should also 'branch': try to look up                                       // 1018
                // the rest of the parts on each array element in parallel.                                                        // 1019
                //                                                                                                                 // 1020
                // In this case, we *only* dig deeper into array elements that are plain                                           // 1021
                // objects. (Recall that we only got this far if we have further to dig.)                                          // 1022
                // This makes sense: we certainly don't dig deeper into non-indexable                                              // 1023
                // objects. And it would be weird to dig into an array: it's simpler to have                                       // 1024
                // a rule that explicit integer indexes only apply to an outer array, not to                                       // 1025
                // an array you find after a branching search.                                                                     // 1026
                //                                                                                                                 // 1027
                // In the special case of a numeric part in a *sort selector* (not a query                                         // 1028
                // selector), we skip the branching: we ONLY allow the numeric part to mean                                        // 1029
                // 'look up this index' in that case, not 'also look up this index in all                                          // 1030
                // the elements of the array'.                                                                                     // 1031
                //
                if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {
                  // 1032
                  firstLevel.forEach(function (branch, arrayIndex) {
                    // 1034
                    if (LocalCollection._isPlainObject(branch)) {
                      // 1035
                      appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex))); // 1036
                    } // 1037
                  }); // 1038
                } // 1039
                //
                return result; // 1041
              }; // 1042
            } // 1043
            //
            // Object exported only for unit testing.                                                                              // 1045
            // Use it to export private functions to test in Tinytest.                                                             // 1046
            MinimongoTest = { // 1047
              makeLookupFunction: makeLookupFunction // 1047
            }; // 1047
            //
            MinimongoError = function (message) {
              // 1048
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // 1048
              //
              if (typeof message === 'string' && options.field) {
                // 1049
                message += " for field '" + options.field + "'"; // 1050
              } // 1051
              //
              var error = new Error(message); // 1053
              error.name = 'MinimongoError'; // 1054
              return error; // 1055
            }; // 1056
            //
            function nothingMatcher(docOrBranchedValues) {
              // 1058
              return { // 1059
                result: false // 1059
              }; // 1059
            } // 1060
            //
            // Takes an operator object (an object with $ keys) and returns a branched                                             // 1062
            // matcher for it.                                                                                                     // 1063
            function operatorBranchedMatcher(valueSelector, matcher, isRoot) {
              // 1064
              // Each valueSelector works separately on the various branches.  So one                                              // 1065
              // operator can match one branch and another can match another branch.  This                                         // 1066
              // is OK.                                                                                                            // 1067
              var operatorMatchers = Object.keys(valueSelector).map(function (operator) {
                // 1068
                var operand = valueSelector[operator]; // 1069
                var simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number'; // 1071
                var simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand); // 1076
                var simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(function (x) {
                  return x === Object(x); // 1084
                }); // 1084
                //
                if (!(simpleRange || simpleInclusion || simpleEquality)) {
                  // 1087
                  matcher._isSimple = false; // 1088
                } // 1089
                //
                if (hasOwn.call(VALUE_OPERATORS, operator)) {
                  // 1091
                  return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot); // 1092
                } // 1093
                //
                if (hasOwn.call(ELEMENT_OPERATORS, operator)) {
                  // 1095
                  var options = ELEMENT_OPERATORS[operator]; // 1096
                  return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);
                } // 1101
                //
                throw new Error("Unrecognized operator: " + operator); // 1103
              }); // 1104
              return andBranchedMatchers(operatorMatchers); // 1106
            } // paths - Array: list of mongo style paths                                                                          // 1107
            // newLeafFn - Function: of form function(path) should return a scalar value to                                        // 1110
            //                       put into list created for that path                                                           // 1111
            // conflictFn - Function: of form function(node, path, fullPath) is called                                             // 1112
            //                        when building a tree path for 'fullPath' node on                                             // 1113
            //                        'path' was already a leaf with a value. Must return a                                        // 1114
            //                        conflict resolution.                                                                         // 1115
            // initial tree - Optional Object: starting tree.                                                                      // 1116
            // @returns - Object: tree represented as a set of nested objects                                                      // 1117
            //
            //
            function pathsToTree(paths, newLeafFn, conflictFn) {
              // 1118
              var root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // 1118
              paths.forEach(function (path) {
                // 1119
                var pathArray = path.split('.'); // 1120
                var tree = root; // use .every just for iteration with break                                                       // 1121
                //
                var success = pathArray.slice(0, -1).every(function (key, i) {
                  // 1124
                  if (!hasOwn.call(tree, key)) {
                    // 1125
                    tree[key] = {}; // 1126
                  } else if (tree[key] !== Object(tree[key])) {
                    // 1127
                    tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path
                    //
                    if (tree[key] !== Object(tree[key])) {
                      // 1135
                      return false; // 1136
                    } // 1137
                  } // 1138
                  //
                  tree = tree[key]; // 1140
                  return true; // 1142
                }); // 1143
                //
                if (success) {
                  // 1145
                  var lastKey = pathArray[pathArray.length - 1]; // 1146
                  //
                  if (hasOwn.call(tree, lastKey)) {
                    // 1147
                    tree[lastKey] = conflictFn(tree[lastKey], path, path); // 1148
                  } else {
                    // 1149
                    tree[lastKey] = newLeafFn(path); // 1150
                  } // 1151
                } // 1152
              }); // 1153
              return root; // 1155
            } // 1156
            //
            // Makes sure we get 2 elements array and assume the first one to be x and                                             // 1158
            // the second one to y no matter what user passes.                                                                     // 1159
            // In case user passes { lon: x, lat: y } returns [x, y]                                                               // 1160
            function pointToArray(point) {
              // 1161
              return Array.isArray(point) ? point.slice() : [point.x, point.y]; // 1162
            } // Creating a document from an upsert is quite tricky.                                                               // 1163
            // E.g. this selector: {"$or": [{"b.foo": {"$all": ["bar"]}}]}, should result                                          // 1166
            // in: {"b.foo": "bar"}                                                                                                // 1167
            // But this selector: {"$or": [{"b": {"foo": {"$all": ["bar"]}}}]} should throw                                        // 1168
            // an error                                                                                                            // 1169
            // Some rules (found mainly with trial & error, so there might be more):                                               // 1171
            // - handle all childs of $and (or implicit $and)                                                                      // 1172
            // - handle $or nodes with exactly 1 child                                                                             // 1173
            // - ignore $or nodes with more than 1 child                                                                           // 1174
            // - ignore $nor and $not nodes                                                                                        // 1175
            // - throw when a value can not be set unambiguously                                                                   // 1176
            // - every value for $all should be dealt with as separate $eq-s                                                       // 1177
            // - threat all children of $all as $eq setters (=> set if $all.length === 1,                                          // 1178
            //   otherwise throw error)                                                                                            // 1179
            // - you can not mix '$'-prefixed keys and non-'$'-prefixed keys                                                       // 1180
            // - you can only have dotted keys on a root-level                                                                     // 1181
            // - you can not have '$'-prefixed keys more than one-level deep in an object                                          // 1182
            // Handles one key/value pair to put in the selector document                                                          // 1184
            //
            //
            function populateDocumentWithKeyValue(document, key, value) {
              // 1185
              if (value && Object.getPrototypeOf(value) === Object.prototype) {
                // 1186
                populateDocumentWithObject(document, key, value); // 1187
              } else if (!(value instanceof RegExp)) {
                // 1188
                insertIntoDocument(document, key, value); // 1189
              } // 1190
            } // Handles a key, value pair to put in the selector document                                                         // 1191
            // if the value is an object                                                                                           // 1194
            //
            //
            function populateDocumentWithObject(document, key, value) {
              // 1195
              var keys = Object.keys(value); // 1196
              var unprefixedKeys = keys.filter(function (op) {
                // 1197
                return op[0] !== '$'; // 1197
              }); // 1197
              //
              if (unprefixedKeys.length > 0 || !keys.length) {
                // 1199
                // Literal (possibly empty) object ( or empty object )                                                             // 1200
                // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields                                                    // 1201
                if (keys.length !== unprefixedKeys.length) {
                  // 1202
                  throw new Error("unknown operator: " + unprefixedKeys[0]); // 1203
                } // 1204
                //
                validateObject(value, key); // 1206
                insertIntoDocument(document, key, value); // 1207
              } else {
                // 1208
                Object.keys(value).forEach(function (op) {
                  // 1209
                  var object = value[op]; // 1210
                  //
                  if (op === '$eq') {
                    // 1212
                    populateDocumentWithKeyValue(document, key, object); // 1213
                  } else if (op === '$all') {
                    // 1214
                    // every value for $all should be dealt with as separate $eq-s                                                 // 1215
                    object.forEach(function (element) {
                      // 1216
                      return populateDocumentWithKeyValue(document, key, element); // 1216
                    }); // 1216
                  } // 1219
                }); // 1220
              } // 1221
            } // Fills a document with certain fields from an upsert selector                                                      // 1222
            //
            //
            function populateDocumentWithQueryFields(query) {
              // 1225
              var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // 1225
              //
              if (Object.getPrototypeOf(query) === Object.prototype) {
                // 1226
                // handle implicit $and                                                                                            // 1227
                Object.keys(query).forEach(function (key) {
                  // 1228
                  var value = query[key]; // 1229
                  //
                  if (key === '$and') {
                    // 1231
                    // handle explicit $and                                                                                        // 1232
                    value.forEach(function (element) {
                      // 1233
                      return populateDocumentWithQueryFields(element, document); // 1233
                    }); // 1233
                  } else if (key === '$or') {
                    // 1236
                    // handle $or nodes with exactly 1 child                                                                       // 1237
                    if (value.length === 1) {
                      // 1238
                      populateDocumentWithQueryFields(value[0], document); // 1239
                    } // 1240
                  } else if (key[0] !== '$') {
                    // 1241
                    // Ignore other '$'-prefixed logical selectors                                                                 // 1242
                    populateDocumentWithKeyValue(document, key, value); // 1243
                  } // 1244
                }); // 1245
              } else {
                // 1246
                // Handle meteor-specific shortcut for selecting _id                                                               // 1247
                if (LocalCollection._selectorIsId(query)) {
                  // 1248
                  insertIntoDocument(document, '_id', query); // 1249
                } // 1250
              } // 1251
              //
              return document; // 1253
            } // 1254
            //
            function projectionDetails(fields) {
              // 1262
              // Find the non-_id keys (_id is handled specially because it is included                                            // 1263
              // unless explicitly excluded). Sort the keys, so that our code to detect                                            // 1264
              // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                              // 1265
              var fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is
              // required to determine if this is an exclusion or exclusion. Also keep an                                          // 1269
              // inclusive _id, since inclusive _id follows the normal rules about mixing                                          // 1270
              // inclusive and exclusive fields. If _id is not the only field in the                                               // 1271
              // projection and is exclusive, remove it so it can be handled later by a                                            // 1272
              // special case, since exclusive _id is always allowed.                                                              // 1273
              //
              if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {
                // 1274
                fieldsKeys = fieldsKeys.filter(function (key) {
                  // 1276
                  return key !== '_id'; // 1276
                }); // 1276
              } // 1277
              //
              var including = null; // Unknown                                                                                     // 1279
              //
              fieldsKeys.forEach(function (keyPath) {
                // 1281
                var rule = !!fields[keyPath]; // 1282
                //
                if (including === null) {
                  // 1284
                  including = rule; // 1285
                } // This error message is copied from MongoDB shell                                                               // 1286
                //
                //
                if (including !== rule) {
                  // 1289
                  throw MinimongoError('You cannot currently mix including and excluding fields.'); // 1290
                } // 1293
              }); // 1294
              var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {
                // 1296
                return including; // 1298
              }, function (node, path, fullPath) {
                // 1298
                // Check passed projection fields' keys: If you have two rules such as                                             // 1300
                // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                                              // 1301
                // that happens, there is a probability you are doing something wrong,                                             // 1302
                // framework should notify you about such mistake earlier on cursor                                                // 1303
                // compilation step than later during runtime.  Note, that real mongo                                              // 1304
                // doesn't do anything about it and the later rule appears in projection                                           // 1305
                // project, more priority it takes.                                                                                // 1306
                //                                                                                                                 // 1307
                // Example, assume following in mongo shell:                                                                       // 1308
                // > db.coll.insert({ a: { b: 23, c: 44 } })                                                                       // 1309
                // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                                        // 1310
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23}}                                                   // 1311
                // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                                        // 1312
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23, "c": 44}}                                          // 1313
                //                                                                                                                 // 1314
                // Note, how second time the return set of keys is different.                                                      // 1315
                var currentPath = fullPath; // 1316
                var anotherPath = path; // 1317
                throw MinimongoError("both " + currentPath + " and " + anotherPath + " found in fields option, " + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');
              }); // 1323
              return { // 1325
                including: including, // 1325
                tree: projectionRulesTree // 1325
              }; // 1325
            } // 1326
            //
            function regexpElementMatcher(regexp) {
              // 1329
              return function (value) {
                // 1330
                if (value instanceof RegExp) {
                  // 1331
                  return value.toString() === regexp.toString(); // 1332
                } // Regexps only work against strings.                                                                            // 1333
                //
                //
                if (typeof value !== 'string') {
                  // 1336
                  return false; // 1337
                } // Reset regexp's state to avoid inconsistent matching for objects with the                                      // 1338
                // same value on consecutive calls of regexp.test. This happens only if the                                        // 1341
                // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for                                       // 1342
                // which we should *not* change the lastIndex but MongoDB doesn't support                                          // 1343
                // either of these flags.                                                                                          // 1344
                //
                //
                regexp.lastIndex = 0; // 1345
                return regexp.test(value); // 1347
              }; // 1348
            } // 1349
            //
            // Validates the key in a path.                                                                                        // 1351
            // Objects that are nested more then 1 level cannot have dotted fields                                                 // 1352
            // or fields starting with '$'                                                                                         // 1353
            function validateKeyInPath(key, path) {
              // 1354
              if (key.includes('.')) {
                // 1355
                throw new Error("The dotted field '" + key + "' in '" + path + "." + key + " is not valid for storage."); // 1356
              } // 1359
              //
              if (key[0] === '$') {
                // 1361
                throw new Error("The dollar ($) prefixed field  '" + path + "." + key + " is not valid for storage."); // 1362
              } // 1365
            } // Recursively validates an object that is nested more than one level deep                                           // 1366
            //
            //
            function validateObject(object, path) {
              // 1369
              if (object && Object.getPrototypeOf(object) === Object.prototype) {
                // 1370
                Object.keys(object).forEach(function (key) {
                  // 1371
                  validateKeyInPath(key, path); // 1372
                  validateObject(object[key], path + '.' + key); // 1373
                }); // 1374
              } // 1375
            } // 1376
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "cursor.js": function (_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/cursor.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _classCallCheck2 = _require4("babel-runtime/helpers/classCallCheck"); //
            //
            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module3.export({ // 1
              "default": function () {
                // 1
                return Cursor; // 1
              } // 1
            }); // 1
            var LocalCollection = void 0; // 1
            _module3.watch(_require4("./local_collection.js"), { // 1
              "default": function (v) {
                // 1
                LocalCollection = v; // 1
              } // 1
            }, 0); // 1
            var hasOwn = void 0; // 1
            _module3.watch(_require4("./common.js"), { // 1
              hasOwn: function (v) {
                // 1
                hasOwn = v; // 1
              } // 1
            }, 1); // 1
            //
            var Cursor = function () {
              //
              // don't call this ctor directly.  use LocalCollection.find().                                                       // 7
              function Cursor(collection, selector) {
                // 8
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // 8
                (0, _classCallCheck3.default)(this, Cursor); // 8
                this.collection = collection; // 9
                this.sorter = null; // 10
                this.matcher = new Minimongo.Matcher(selector); // 11
                //
                if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                  // 13
                  // stash for fast _id and { _id }                                                                                // 14
                  this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector; // 15
                } else {
                  // 18
                  this._selectorId = undefined; // 19
                  //
                  if (this.matcher.hasGeoQuery() || options.sort) {
                    // 21
                    this.sorter = new Minimongo.Sorter(options.sort || [], { // 22
                      matcher: this.matcher // 24
                    }); // 24
                  } // 26
                } // 27
                //
                this.skip = options.skip || 0; // 29
                this.limit = options.limit; // 30
                this.fields = options.fields; // 31
                this._projectionFn = LocalCollection._compileProjection(this.fields || {}); // 33
                this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.
                //
                if (typeof Tracker !== 'undefined') {
                  // 38
                  this.reactive = options.reactive === undefined ? true : options.reactive; // 39
                } // 40
              } /**                                                                                                                // 41
                 * @summary Returns the number of documents that match a query.                                                    //
                 * @memberOf Mongo.Cursor                                                                                          //
                 * @method  count                                                                                                  //
                 * @instance                                                                                                       //
                 * @locus Anywhere                                                                                                 //
                 * @returns {Number}                                                                                               //
                 */ //
              //
              Cursor.prototype.count = function () {
                //
                function count() {
                  //
                  if (this.reactive) {
                    // 52
                    // allow the observe to be unordered                                                                           // 53
                    this._depend({ // 54
                      added: true, // 54
                      removed: true // 54
                    }, true); // 54
                  } // 55
                  //
                  return this._getRawObjects({ // 57
                    ordered: true // 57
                  }).length; // 57
                } // 58
                //
                return count; //
              }(); /**                                                                                                             //
                    * @summary Return all matching documents as an Array.                                                          //
                    * @memberOf Mongo.Cursor                                                                                       //
                    * @method  fetch                                                                                               //
                    * @instance                                                                                                    //
                    * @locus Anywhere                                                                                              //
                    * @returns {Object[]}                                                                                          //
                    */ //
              //
              Cursor.prototype.fetch = function () {
                //
                function fetch() {
                  //
                  var result = []; // 69
                  this.forEach(function (doc) {
                    // 71
                    result.push(doc); // 72
                  }); // 73
                  return result; // 75
                } // 76
                //
                return fetch; //
              }(); //
              //
              Cursor.prototype[Symbol.iterator] = function () {
                //
                var _this = this; // 78
                //
                if (this.reactive) {
                  // 79
                  this._depend({ // 80
                    addedBefore: true, // 81
                    removed: true, // 82
                    changed: true, // 83
                    movedBefore: true // 84
                  }); // 80
                } // 85
                //
                var index = 0; // 87
                //
                var objects = this._getRawObjects({ // 88
                  ordered: true // 88
                }); // 88
                //
                return { // 90
                  next: function () {
                    // 91
                    if (index < objects.length) {
                      // 92
                      // This doubles as a clone operation.                                                                        // 93
                      var element = _this._projectionFn(objects[index++]); // 94
                      //
                      if (_this._transform) element = _this._transform(element); // 96
                      return { // 99
                        value: element // 99
                      }; // 99
                    } // 100
                    //
                    return { // 102
                      done: true // 102
                    }; // 102
                  } // 103
                }; // 90
              }; /**                                                                                                               // 105
                  * @callback IterationCallback                                                                                    //
                  * @param {Object} doc                                                                                            //
                  * @param {Number} index                                                                                          //
                  */ /**                                                                                                           //
                      * @summary Call `callback` once for each matching document, sequentially and                                 //
                      *          synchronously.                                                                                    //
                      * @locus Anywhere                                                                                            //
                      * @method  forEach                                                                                           //
                      * @instance                                                                                                  //
                      * @memberOf Mongo.Cursor                                                                                     //
                      * @param {IterationCallback} callback Function to call. It will be called                                    //
                      *                                     with three arguments: the document, a                                  //
                      *                                     0-based index, and <em>cursor</em>                                     //
                      *                                     itself.                                                                //
                      * @param {Any} [thisArg] An object which will be the value of `this` inside                                  //
                      *                        `callback`.                                                                         //
                      */ //
              //
              Cursor.prototype.forEach = function () {
                //
                function forEach(callback, thisArg) {
                  //
                  var _this2 = this; // 126
                  //
                  if (this.reactive) {
                    // 127
                    this._depend({ // 128
                      addedBefore: true, // 129
                      removed: true, // 130
                      changed: true, // 131
                      movedBefore: true // 132
                    }); // 128
                  } // 133
                  //
                  this._getRawObjects({ // 135
                    ordered: true // 135
                  }).forEach(function (element, i) {
                    // 135
                    // This doubles as a clone operation.                                                                          // 136
                    element = _this2._projectionFn(element); // 137
                    //
                    if (_this2._transform) {
                      // 139
                      element = _this2._transform(element); // 140
                    } // 141
                    //
                    callback.call(thisArg, element, i, _this2); // 143
                  }); // 144
                } // 145
                //
                return forEach; //
              }(); //
              //
              Cursor.prototype.getTransform = function () {
                //
                function getTransform() {
                  //
                  return this._transform; // 148
                } // 149
                //
                return getTransform; //
              }(); /**                                                                                                             //
                    * @summary Map callback over all matching documents.  Returns an Array.                                        //
                    * @locus Anywhere                                                                                              //
                    * @method map                                                                                                  //
                    * @instance                                                                                                    //
                    * @memberOf Mongo.Cursor                                                                                       //
                    * @param {IterationCallback} callback Function to call. It will be called                                      //
                    *                                     with three arguments: the document, a                                    //
                    *                                     0-based index, and <em>cursor</em>                                       //
                    *                                     itself.                                                                  //
                    * @param {Any} [thisArg] An object which will be the value of `this` inside                                    //
                    *                        `callback`.                                                                           //
                    */ //
              //
              Cursor.prototype.map = function () {
                //
                function map(callback, thisArg) {
                  //
                  var _this3 = this; // 164
                  //
                  var result = []; // 165
                  this.forEach(function (doc, i) {
                    // 167
                    result.push(callback.call(thisArg, doc, i, _this3)); // 168
                  }); // 169
                  return result; // 171
                } // 172
                //
                return map; //
              }(); // options to contain:                                                                                          //
              //  * callbacks for observe():                                                                                       // 175
              //    - addedAt (document, atIndex)                                                                                  // 176
              //    - added (document)                                                                                             // 177
              //    - changedAt (newDocument, oldDocument, atIndex)                                                                // 178
              //    - changed (newDocument, oldDocument)                                                                           // 179
              //    - removedAt (document, atIndex)                                                                                // 180
              //    - removed (document)                                                                                           // 181
              //    - movedTo (document, oldIndex, newIndex)                                                                       // 182
              //                                                                                                                   // 183
              // attributes available on returned query handle:                                                                    // 184
              //  * stop(): end updates                                                                                            // 185
              //  * collection: the collection this query is querying                                                              // 186
              //                                                                                                                   // 187
              // iff x is a returned query handle, (x instanceof                                                                   // 188
              // LocalCollection.ObserveHandle) is true                                                                            // 189
              //                                                                                                                   // 190
              // initial results delivered through added callback                                                                  // 191
              // XXX maybe callbacks should take a list of objects, to expose transactions?                                        // 192
              // XXX maybe support field limiting (to limit what you're notified on)                                               // 193
              /**                                                                                                                  // 195
               * @summary Watch a query.  Receive callbacks as the result set changes.                                             //
               * @locus Anywhere                                                                                                   //
               * @memberOf Mongo.Cursor                                                                                            //
               * @instance                                                                                                         //
               * @param {Object} callbacks Functions to call to deliver the result set as it                                       //
               *                           changes                                                                                 //
               */ //
              //
              Cursor.prototype.observe = function () {
                //
                function observe(options) {
                  //
                  return LocalCollection._observeFromObserveChanges(this, options); // 204
                } // 205
                //
                return observe; //
              }(); /**                                                                                                             //
                    * @summary Watch a query. Receive callbacks as the result set changes. Only                                    //
                    *          the differences between the old and new documents are passed to                                     //
                    *          the callbacks.                                                                                      //
                    * @locus Anywhere                                                                                              //
                    * @memberOf Mongo.Cursor                                                                                       //
                    * @instance                                                                                                    //
                    * @param {Object} callbacks Functions to call to deliver the result set as it                                  //
                    *                           changes                                                                            //
                    */ //
              //
              Cursor.prototype.observeChanges = function () {
                //
                function observeChanges(options) {
                  //
                  var _this4 = this; // 217
                  //
                  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with
                  // unordered observe.  eg, update's EJSON.clone, and the "there are several"                                     // 221
                  // comment in _modifyAndNotify                                                                                   // 222
                  // XXX allow skip/limit with unordered observe                                                                   // 223
                  //
                  //
                  if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {
                    // 224
                    throw new Error('must use ordered observe (ie, \'addedBefore\' instead of \'added\') ' + 'with skip or limit');
                  } // 229
                  //
                  if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {
                    // 231
                    throw Error('You may not observe a cursor with {fields: {_id: 0}}'); // 232
                  } // 233
                  //
                  var distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap(); // 235
                  var query = { // 241
                    cursor: this, // 242
                    dirty: false, // 243
                    distances: distances, // 244
                    matcher: this.matcher, // 245
                    // not fast pathed                                                                                             // 245
                    ordered: ordered, // 246
                    projectionFn: this._projectionFn, // 247
                    resultsSnapshot: null, // 248
                    sorter: ordered && this.sorter // 249
                  }; // 241
                  var qid = void 0; // Non-reactive queries call added[Before] and then never call anything                        // 252
                  // else.                                                                                                         // 255
                  //
                  if (this.reactive) {
                    // 256
                    qid = this.collection.next_qid++; // 257
                    this.collection.queries[qid] = query; // 258
                  } // 259
                  //
                  query.results = this._getRawObjects({ // 261
                    ordered: ordered, // 261
                    distances: query.distances // 261
                  }); // 261
                  //
                  if (this.collection.paused) {
                    // 263
                    query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap(); // 264
                  } // wrap callbacks we were passed. callbacks only fire when not paused and                                      // 265
                  // are never undefined                                                                                           // 268
                  // Filters out blacklisted fields according to cursor's projection.                                              // 269
                  // XXX wrong place for this?                                                                                     // 270
                  // furthermore, callbacks enqueue until the operation we're working on is                                        // 272
                  // done.                                                                                                         // 273
                  //
                  //
                  var wrapCallback = function (fn) {
                    // 274
                    if (!fn) {
                      // 275
                      return function () {}; // 276
                    } // 277
                    //
                    var self = _this4; // 279
                    return function () /* args*/{
                      // 280
                      var _this5 = this; // 280
                      //
                      if (self.collection.paused) {
                        // 281
                        return; // 282
                      } // 283
                      //
                      var args = arguments; // 285
                      //
                      self.collection._observeQueue.queueTask(function () {
                        // 287
                        fn.apply(_this5, args); // 288
                      }); // 289
                    }; // 290
                  }; // 291
                  //
                  query.added = wrapCallback(options.added); // 293
                  query.changed = wrapCallback(options.changed); // 294
                  query.removed = wrapCallback(options.removed); // 295
                  //
                  if (ordered) {
                    // 297
                    query.addedBefore = wrapCallback(options.addedBefore); // 298
                    query.movedBefore = wrapCallback(options.movedBefore); // 299
                  } // 300
                  //
                  if (!options._suppress_initial && !this.collection.paused) {
                    // 302
                    var results = ordered ? query.results : query.results._map; // 303
                    Object.keys(results).forEach(function (key) {
                      // 305
                      var doc = results[key]; // 306
                      var fields = EJSON.clone(doc); // 307
                      delete fields._id; // 309
                      //
                      if (ordered) {
                        // 311
                        query.addedBefore(doc._id, _this4._projectionFn(fields), null); // 312
                      } // 313
                      //
                      query.added(doc._id, _this4._projectionFn(fields)); // 315
                    }); // 316
                  } // 317
                  //
                  var handle = Object.assign(new LocalCollection.ObserveHandle(), { // 319
                    collection: this.collection, // 320
                    stop: function () {
                      // 321
                      if (_this4.reactive) {
                        // 322
                        delete _this4.collection.queries[qid]; // 323
                      } // 324
                    } // 325
                  }); // 319
                  //
                  if (this.reactive && Tracker.active) {
                    // 328
                    // XXX in many cases, the same observe will be recreated when                                                  // 329
                    // the current autorun is rerun.  we could save work by                                                        // 330
                    // letting it linger across rerun and potentially get                                                          // 331
                    // repurposed if the same observe is performed, using logic                                                    // 332
                    // similar to that of Meteor.subscribe.                                                                        // 333
                    Tracker.onInvalidate(function () {
                      // 334
                      handle.stop(); // 335
                    }); // 336
                  } // run the observe callbacks resulting from the initial contents                                               // 337
                  // before we leave the observe.                                                                                  // 340
                  //
                  //
                  this.collection._observeQueue.drain(); // 341
                  //
                  return handle; // 343
                } // 344
                //
                return observeChanges; //
              }(); // Since we don't actually have a "nextObject" interface, there's really no                                     //
              // reason to have a "rewind" interface.  All it did was make multiple calls                                          // 347
              // to fetch/map/forEach return nothing the second time.                                                              // 348
              // XXX COMPAT WITH 0.8.1                                                                                             // 349
              //
              //
              Cursor.prototype.rewind = function () {
                //
                function rewind() {} //
                //
                return rewind; //
              }(); // XXX Maybe we need a version of observe that just calls a callback if                                         //
              // anything changed.                                                                                                 // 353
              //
              //
              Cursor.prototype._depend = function () {
                //
                function _depend(changers, _allow_unordered) {
                  //
                  if (Tracker.active) {
                    // 355
                    var dependency = new Tracker.Dependency(); // 356
                    var notify = dependency.changed.bind(dependency); // 357
                    dependency.depend(); // 359
                    var options = { // 361
                      _allow_unordered: _allow_unordered, // 361
                      _suppress_initial: true // 361
                    }; // 361
                    ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(function (fn) {
                      // 363
                      if (changers[fn]) {
                        // 365
                        options[fn] = notify; // 366
                      } // 367
                    }); // observeChanges will stop() when this computation is invalidated                                         // 368
                    //
                    this.observeChanges(options); // 371
                  } // 372
                } // 373
                //
                return _depend; //
              }(); //
              //
              Cursor.prototype._getCollectionName = function () {
                //
                function _getCollectionName() {
                  //
                  return this.collection.name; // 376
                } // 377
                //
                return _getCollectionName; //
              }(); // Returns a collection of matching objects, but doesn't deep copy them.                                        //
              //                                                                                                                   // 380
              // If ordered is set, returns a sorted array, respecting sorter, skip, and                                           // 381
              // limit properties of the query.  if sorter is falsey, no sort -- you get the                                       // 382
              // natural order.                                                                                                    // 383
              //                                                                                                                   // 384
              // If ordered is not set, returns an object mapping from ID to doc (sorter,                                          // 385
              // skip and limit should not be set).                                                                                // 386
              //                                                                                                                   // 387
              // If ordered is set and this cursor is a $near geoquery, then this function                                         // 388
              // will use an _IdMap to track each distance from the $near argument point in                                        // 389
              // order to use it as a sort key. If an _IdMap is passed in the 'distances'                                          // 390
              // argument, this function will clear it and use it for this purpose                                                 // 391
              // (otherwise it will just create its own _IdMap). The observeChanges                                                // 392
              // implementation uses this to remember the distances after this function                                            // 393
              // returns.                                                                                                          // 394
              //
              //
              Cursor.prototype._getRawObjects = function () {
                //
                function _getRawObjects() {
                  //
                  var _this6 = this; // 395
                  //
                  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // 395
                  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict                                          // 396
                  // compatible                                                                                                    // 397
                  var results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value              // 398
                  //
                  if (this._selectorId !== undefined) {
                    // 401
                    // If you have non-zero skip and ask for a single id, you get                                                  // 402
                    // nothing. This is so it matches the behavior of the '{_id: foo}'                                             // 403
                    // path.                                                                                                       // 404
                    if (this.skip) {
                      // 405
                      return results; // 406
                    } // 407
                    //
                    var selectedDoc = this.collection._docs.get(this._selectorId); // 409
                    //
                    if (selectedDoc) {
                      // 411
                      if (options.ordered) {
                        // 412
                        results.push(selectedDoc); // 413
                      } else {
                        // 414
                        results.set(this._selectorId, selectedDoc); // 415
                      } // 416
                    } // 417
                    //
                    return results; // 419
                  } // slow path for arbitrary selector, sort, skip, limit                                                         // 420
                  // in the observeChanges case, distances is actually part of the "query"                                         // 424
                  // (ie, live results set) object.  in other cases, distances is only used                                        // 425
                  // inside this function.                                                                                         // 426
                  //
                  //
                  var distances = void 0; // 427
                  //
                  if (this.matcher.hasGeoQuery() && options.ordered) {
                    // 428
                    if (options.distances) {
                      // 429
                      distances = options.distances; // 430
                      distances.clear(); // 431
                    } else {
                      // 432
                      distances = new LocalCollection._IdMap(); // 433
                    } // 434
                  } // 435
                  //
                  this.collection._docs.forEach(function (doc, id) {
                    // 437
                    var matchResult = _this6.matcher.documentMatches(doc); // 438
                    //
                    if (matchResult.result) {
                      // 440
                      if (options.ordered) {
                        // 441
                        results.push(doc); // 442
                        //
                        if (distances && matchResult.distance !== undefined) {
                          // 444
                          distances.set(id, matchResult.distance); // 445
                        } // 446
                      } else {
                        // 447
                        results.set(id, doc); // 448
                      } // 449
                    } // Fast path for limited unsorted queries.                                                                   // 450
                    // XXX 'length' check here seems wrong for ordered                                                             // 453
                    //
                    //
                    return !_this6.limit || _this6.skip || _this6.sorter || results.length !== _this6.limit; // 454
                  }); // 460
                  //
                  if (!options.ordered) {
                    // 462
                    return results; // 463
                  } // 464
                  //
                  if (this.sorter) {
                    // 466
                    results.sort(this.sorter.getComparator({ // 467
                      distances: distances // 467
                    })); // 467
                  } // 468
                  //
                  if (!this.limit && !this.skip) {
                    // 470
                    return results; // 471
                  } // 472
                  //
                  return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length); // 474
                } // 478
                //
                return _getRawObjects; //
              }(); //
              //
              Cursor.prototype._publishCursor = function () {
                //
                function _publishCursor(subscription) {
                  //
                  // XXX minimongo should not depend on mongo-livedata!                                                            // 481
                  if (!Package.mongo) {
                    // 482
                    throw new Error('Can\'t publish from Minimongo without the `mongo` package.'); // 483
                  } // 486
                  //
                  if (!this.collection.name) {
                    // 488
                    throw new Error('Can\'t publish a cursor from a collection without a name.'); // 489
                  } // 492
                  //
                  return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name); // 494
                } // 499
                //
                return _publishCursor; //
              }(); //
              //
              return Cursor; //
            }(); //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "local_collection.js": function (_require5, _exports5, _module4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/local_collection.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _toConsumableArray2 = _require5("babel-runtime/helpers/toConsumableArray"); //
            //
            var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2); //
            //
            var _typeof2 = _require5("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            var _possibleConstructorReturn2 = _require5("babel-runtime/helpers/possibleConstructorReturn"); //
            //
            var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2); //
            //
            var _inherits2 = _require5("babel-runtime/helpers/inherits"); //
            //
            var _inherits3 = _interopRequireDefault(_inherits2); //
            //
            var _classCallCheck2 = _require5("babel-runtime/helpers/classCallCheck"); //
            //
            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module4.export({ // 1
              "default": function () {
                // 1
                return LocalCollection; // 1
              } // 1
            }); // 1
            var Cursor = void 0; // 1
            _module4.watch(_require5("./cursor.js"), { // 1
              "default": function (v) {
                // 1
                Cursor = v; // 1
              } // 1
            }, 0); // 1
            var ObserveHandle = void 0; // 1
            _module4.watch(_require5("./observe_handle.js"), { // 1
              "default": function (v) {
                // 1
                ObserveHandle = v; // 1
              } // 1
            }, 1); // 1
            var hasOwn = void 0,
                // 1
            isIndexable = void 0,
                // 1
            isNumericKey = void 0,
                // 1
            isOperatorObject = void 0,
                // 1
            populateDocumentWithQueryFields = void 0,
                // 1
            projectionDetails = void 0; // 1
            _module4.watch(_require5("./common.js"), { // 1
              hasOwn: function (v) {
                // 1
                hasOwn = v; // 1
              }, // 1
              isIndexable: function (v) {
                // 1
                isIndexable = v; // 1
              }, // 1
              isNumericKey: function (v) {
                // 1
                isNumericKey = v; // 1
              }, // 1
              isOperatorObject: function (v) {
                // 1
                isOperatorObject = v; // 1
              }, // 1
              populateDocumentWithQueryFields: function (v) {
                // 1
                populateDocumentWithQueryFields = v; // 1
              }, // 1
              projectionDetails: function (v) {
                // 1
                projectionDetails = v; // 1
              } // 1
            }, 2); // 1
            //
            var LocalCollection = function () {
              //
              function LocalCollection(name) {
                // 16
                (0, _classCallCheck3.default)(this, LocalCollection); // 16
                this.name = name; // _id -> document (also containing id)                                                          // 17
                //
                this._docs = new LocalCollection._IdMap(); // 19
                this._observeQueue = new Meteor._SynchronousQueue(); // 21
                this.next_qid = 1; // live query id generator                                                                      // 23
                // qid -> live query object. keys:                                                                                 // 25
                //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                                         // 26
                //  results: array (ordered) or object (unordered) of current results                                              // 27
                //    (aliased with this._docs!)                                                                                   // 28
                //  resultsSnapshot: snapshot of results. null if not paused.                                                      // 29
                //  cursor: Cursor object for the query.                                                                           // 30
                //  selector, sorter, (callbacks): functions                                                                       // 31
                //
                this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value   // 32
                // if saving originals. See comments before saveOriginals().                                                       // 35
                //
                this._savedOriginals = null; // True when observers are paused and we should not send callbacks.                   // 36
                //
                this.paused = false; // 39
              } // options may include sort, skip, limit, reactive                                                                 // 40
              // sort may be any of these forms:                                                                                   // 43
              //     {a: 1, b: -1}                                                                                                 // 44
              //     [["a", "asc"], ["b", "desc"]]                                                                                 // 45
              //     ["a", ["b", "desc"]]                                                                                          // 46
              //   (in the first form you're beholden to key enumeration order in                                                  // 47
              //   your javascript VM)                                                                                             // 48
              //                                                                                                                   // 49
              // reactive: if given, and false, don't register with Tracker (default                                               // 50
              // is true)                                                                                                          // 51
              //                                                                                                                   // 52
              // XXX possibly should support retrieving a subset of fields? and                                                    // 53
              // have it be a hint (ignored on the client, when not copying the                                                    // 54
              // doc?)                                                                                                             // 55
              //                                                                                                                   // 56
              // XXX sort does not yet support subkeys ('a.b') .. fix that!                                                        // 57
              // XXX add one more sort form: "key"                                                                                 // 58
              // XXX tests                                                                                                         // 59
              //
              //
              LocalCollection.prototype.find = function () {
                //
                function find(selector, options) {
                  //
                  // default syntax for everything is to omit the selector argument.                                               // 61
                  // but if selector is explicitly passed in as false or undefined, we                                             // 62
                  // want a selector that matches nothing.                                                                         // 63
                  if (arguments.length === 0) {
                    // 64
                    selector = {}; // 65
                  } // 66
                  //
                  return new LocalCollection.Cursor(this, selector, options); // 68
                } // 69
                //
                return find; //
              }(); //
              //
              LocalCollection.prototype.findOne = function () {
                //
                function findOne(selector) {
                  //
                  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // 71
                  //
                  if (arguments.length === 0) {
                    // 72
                    selector = {}; // 73
                  } // NOTE: by setting limit 1 here, we end up using very inefficient                                             // 74
                  // code that recomputes the whole query on each update. The upside is                                            // 77
                  // that when you reactively depend on a findOne you only get                                                     // 78
                  // invalidated when the found object changes, not any object in the                                              // 79
                  // collection. Most findOne will be by id, which has a fast path, so                                             // 80
                  // this might not be a big deal. In most cases, invalidation causes                                              // 81
                  // the called to re-query anyway, so this should be a net performance                                            // 82
                  // improvement.                                                                                                  // 83
                  //
                  //
                  options.limit = 1; // 84
                  return this.find(selector, options).fetch()[0]; // 86
                } // 87
                //
                return findOne; //
              }(); // XXX possibly enforce that 'undefined' does not appear (we assume                                             //
              // this in our handling of null and $exists)                                                                         // 90
              //
              //
              LocalCollection.prototype.insert = function () {
                //
                function insert(doc, callback) {
                  //
                  var _this = this; // 91
                  //
                  doc = EJSON.clone(doc); // 92
                  assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.                          // 94
                  // Mongo.Collection specifies its own ids and does not use this code.                                            // 97
                  //
                  if (!hasOwn.call(doc, '_id')) {
                    // 98
                    doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id(); // 99
                  } // 100
                  //
                  var id = doc._id; // 102
                  //
                  if (this._docs.has(id)) {
                    // 104
                    throw MinimongoError("Duplicate _id '" + id + "'"); // 105
                  } // 106
                  //
                  this._saveOriginal(id, undefined); // 108
                  //
                  this._docs.set(id, doc); // 109
                  //
                  var queriesToRecompute = []; // trigger live queries that match                                                  // 111
                  //
                  Object.keys(this.queries).forEach(function (qid) {
                    // 114
                    var query = _this.queries[qid]; // 115
                    //
                    if (query.dirty) {
                      // 117
                      return; // 118
                    } // 119
                    //
                    var matchResult = query.matcher.documentMatches(doc); // 121
                    //
                    if (matchResult.result) {
                      // 123
                      if (query.distances && matchResult.distance !== undefined) {
                        // 124
                        query.distances.set(id, matchResult.distance); // 125
                      } // 126
                      //
                      if (query.cursor.skip || query.cursor.limit) {
                        // 128
                        queriesToRecompute.push(qid); // 129
                      } else {
                        // 130
                        LocalCollection._insertInResults(query, doc); // 131
                      } // 132
                    } // 133
                  }); // 134
                  queriesToRecompute.forEach(function (qid) {
                    // 136
                    if (_this.queries[qid]) {
                      // 137
                      _this._recomputeResults(_this.queries[qid]); // 138
                    } // 139
                  }); // 140
                  //
                  this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run             // 142
                  // immediately.                                                                                                  // 145
                  //
                  //
                  if (callback) {
                    // 146
                    Meteor.defer(function () {
                      // 147
                      callback(null, id); // 148
                    }); // 149
                  } // 150
                  //
                  return id; // 152
                } // 153
                //
                return insert; //
              }(); // Pause the observers. No callbacks from observers will fire until                                             //
              // 'resumeObservers' is called.                                                                                      // 156
              //
              //
              LocalCollection.prototype.pauseObservers = function () {
                //
                function pauseObservers() {
                  //
                  var _this2 = this; // 157
                  //
                  // No-op if already paused.                                                                                      // 158
                  if (this.paused) {
                    // 159
                    return; // 160
                  } // Set the 'paused' flag such that new observer messages don't fire.                                           // 161
                  //
                  //
                  this.paused = true; // Take a snapshot of the query results for each query.                                      // 164
                  //
                  Object.keys(this.queries).forEach(function (qid) {
                    // 167
                    var query = _this2.queries[qid]; // 168
                    query.resultsSnapshot = EJSON.clone(query.results); // 169
                  }); // 170
                } // 171
                //
                return pauseObservers; //
              }(); //
              //
              LocalCollection.prototype.remove = function () {
                //
                function remove(selector, callback) {
                  //
                  var _this3 = this; // 173
                  //
                  // Easy special case: if we're not calling observeChanges callbacks and                                          // 174
                  // we're not saving originals and we got asked to remove everything, then                                        // 175
                  // just empty everything directly.                                                                               // 176
                  if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {
                    // 177
                    var _result = this._docs.size(); // 178
                    //
                    this._docs.clear(); // 180
                    //
                    Object.keys(this.queries).forEach(function (qid) {
                      // 182
                      var query = _this3.queries[qid]; // 183
                      //
                      if (query.ordered) {
                        // 185
                        query.results = []; // 186
                      } else {
                        // 187
                        query.results.clear(); // 188
                      } // 189
                    }); // 190
                    //
                    if (callback) {
                      // 192
                      Meteor.defer(function () {
                        // 193
                        callback(null, _result); // 194
                      }); // 195
                    } // 196
                    //
                    return _result; // 198
                  } // 199
                  //
                  var matcher = new Minimongo.Matcher(selector); // 201
                  var remove = []; // 202
                  //
                  this._eachPossiblyMatchingDoc(selector, function (doc, id) {
                    // 204
                    if (matcher.documentMatches(doc).result) {
                      // 205
                      remove.push(id); // 206
                    } // 207
                  }); // 208
                  //
                  var queriesToRecompute = []; // 210
                  var queryRemove = []; // 211
                  //
                  var _loop = function (i) {
                    // 173
                    var removeId = remove[i]; // 214
                    //
                    var removeDoc = _this3._docs.get(removeId); // 215
                    //
                    Object.keys(_this3.queries).forEach(function (qid) {
                      // 217
                      var query = _this3.queries[qid]; // 218
                      //
                      if (query.dirty) {
                        // 220
                        return; // 221
                      } // 222
                      //
                      if (query.matcher.documentMatches(removeDoc).result) {
                        // 224
                        if (query.cursor.skip || query.cursor.limit) {
                          // 225
                          queriesToRecompute.push(qid); // 226
                        } else {
                          // 227
                          queryRemove.push({ // 228
                            qid: qid, // 228
                            doc: removeDoc // 228
                          }); // 228
                        } // 229
                      } // 230
                    }); // 231
                    //
                    _this3._saveOriginal(removeId, removeDoc); // 233
                    //
                    _this3._docs.remove(removeId); // 234
                  }; // 173
                  //
                  for (var i = 0; i < remove.length; i++) {
                    // 213
                    _loop(i); // 213
                  } // run live query callbacks _after_ we've removed the documents.                                               // 235
                  //
                  //
                  queryRemove.forEach(function (remove) {
                    // 238
                    var query = _this3.queries[remove.qid]; // 239
                    //
                    if (query) {
                      // 241
                      query.distances && query.distances.remove(remove.doc._id); // 242
                      //
                      LocalCollection._removeFromResults(query, remove.doc); // 243
                    } // 244
                  }); // 245
                  queriesToRecompute.forEach(function (qid) {
                    // 247
                    var query = _this3.queries[qid]; // 248
                    //
                    if (query) {
                      // 250
                      _this3._recomputeResults(query); // 251
                    } // 252
                  }); // 253
                  //
                  this._observeQueue.drain(); // 255
                  //
                  var result = remove.length; // 257
                  //
                  if (callback) {
                    // 259
                    Meteor.defer(function () {
                      // 260
                      callback(null, result); // 261
                    }); // 262
                  } // 263
                  //
                  return result; // 265
                } // 266
                //
                return remove; //
              }(); // Resume the observers. Observers immediately receive change                                                   //
              // notifications to bring them to the current state of the                                                           // 269
              // database. Note that this is not just replaying all the changes that                                               // 270
              // happened during the pause, it is a smarter 'coalesced' diff.                                                      // 271
              //
              //
              LocalCollection.prototype.resumeObservers = function () {
                //
                function resumeObservers() {
                  //
                  var _this4 = this; // 272
                  //
                  // No-op if not paused.                                                                                          // 273
                  if (!this.paused) {
                    // 274
                    return; // 275
                  } // Unset the 'paused' flag. Make sure to do this first, otherwise                                              // 276
                  // observer methods won't actually fire when we trigger them.                                                    // 279
                  //
                  //
                  this.paused = false; // 280
                  Object.keys(this.queries).forEach(function (qid) {
                    // 282
                    var query = _this4.queries[qid]; // 283
                    //
                    if (query.dirty) {
                      // 285
                      query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`                  // 286
                      // automatically.                                                                                            // 289
                      //
                      _this4._recomputeResults(query, query.resultsSnapshot); // 290
                    } else {
                      // 291
                      // Diff the current results against the snapshot and send to observers.                                      // 292
                      // pass the query object for its observer callbacks.                                                         // 293
                      LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, { // 294
                        projectionFn: query.projectionFn // 299
                      }); // 299
                    } // 301
                    //
                    query.resultsSnapshot = null; // 303
                  }); // 304
                  //
                  this._observeQueue.drain(); // 306
                } // 307
                //
                return resumeObservers; //
              }(); //
              //
              LocalCollection.prototype.retrieveOriginals = function () {
                //
                function retrieveOriginals() {
                  //
                  if (!this._savedOriginals) {
                    // 310
                    throw new Error('Called retrieveOriginals without saveOriginals'); // 311
                  } // 312
                  //
                  var originals = this._savedOriginals; // 314
                  this._savedOriginals = null; // 316
                  return originals; // 318
                } // 319
                //
                return retrieveOriginals; //
              }(); // To track what documents are affected by a piece of code, call                                                //
              // saveOriginals() before it and retrieveOriginals() after it.                                                       // 322
              // retrieveOriginals returns an object whose keys are the ids of the documents                                       // 323
              // that were affected since the call to saveOriginals(), and the values are                                          // 324
              // equal to the document's contents at the time of saveOriginals. (In the case                                       // 325
              // of an inserted document, undefined is the value.) You must alternate                                              // 326
              // between calls to saveOriginals() and retrieveOriginals().                                                         // 327
              //
              //
              LocalCollection.prototype.saveOriginals = function () {
                //
                function saveOriginals() {
                  //
                  if (this._savedOriginals) {
                    // 329
                    throw new Error('Called saveOriginals twice without retrieveOriginals'); // 330
                  } // 331
                  //
                  this._savedOriginals = new LocalCollection._IdMap(); // 333
                } // 334
                //
                return saveOriginals; //
              }(); // XXX atomicity: if multi is true, and one modification fails, do                                              //
              // we rollback the whole operation, or what?                                                                         // 337
              //
              //
              LocalCollection.prototype.update = function () {
                //
                function update(selector, mod, options, callback) {
                  //
                  var _this5 = this; // 338
                  //
                  if (!callback && options instanceof Function) {
                    // 339
                    callback = options; // 340
                    options = null; // 341
                  } // 342
                  //
                  if (!options) {
                    // 344
                    options = {}; // 345
                  } // 346
                  //
                  var matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to
                  // _recomputeResults on, because _modifyAndNotify will mutate the objects in                                     // 351
                  // it. (We don't need to save the original results of paused queries because                                     // 352
                  // they already have a resultsSnapshot and we won't be diffing in                                                // 353
                  // _recomputeResults.)                                                                                           // 354
                  //
                  var qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple        // 355
                  // queries                                                                                                       // 358
                  //
                  var docMap = new LocalCollection._IdMap(); // 359
                  //
                  var idsMatched = LocalCollection._idsMatchedBySelector(selector); // 360
                  //
                  Object.keys(this.queries).forEach(function (qid) {
                    // 362
                    var query = _this5.queries[qid]; // 363
                    //
                    if ((query.cursor.skip || query.cursor.limit) && !_this5.paused) {
                      // 365
                      // Catch the case of a reactive `count()` on a cursor with skip                                              // 366
                      // or limit, which registers an unordered observe. This is a                                                 // 367
                      // pretty rare case, so we just clone the entire result set with                                             // 368
                      // no optimizations for documents that appear in these result                                                // 369
                      // sets and other queries.                                                                                   // 370
                      if (query.results instanceof LocalCollection._IdMap) {
                        // 371
                        qidToOriginalResults[qid] = query.results.clone(); // 372
                        return; // 373
                      } // 374
                      //
                      if (!(query.results instanceof Array)) {
                        // 376
                        throw new Error('Assertion failed: query.results not an array'); // 377
                      } // Clones a document to be stored in `qidToOriginalResults`                                                // 378
                      // because it may be modified before the new and old result sets                                             // 381
                      // are diffed. But if we know exactly which document IDs we're                                               // 382
                      // going to modify, then we only need to clone those.                                                        // 383
                      //
                      //
                      var memoizedCloneIfNeeded = function (doc) {
                        // 384
                        if (docMap.has(doc._id)) {
                          // 385
                          return docMap.get(doc._id); // 386
                        } // 387
                        //
                        var docToMemoize = idsMatched && !idsMatched.some(function (id) {
                          // 389
                          return EJSON.equals(id, doc._id); // 391
                        }) ? doc : EJSON.clone(doc); // 391
                        docMap.set(doc._id, docToMemoize); // 394
                        return docToMemoize; // 396
                      }; // 397
                      //
                      qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded); // 399
                    } // 400
                  }); // 401
                  var recomputeQids = {}; // 403
                  var updateCount = 0; // 405
                  //
                  this._eachPossiblyMatchingDoc(selector, function (doc, id) {
                    // 407
                    var queryResult = matcher.documentMatches(doc); // 408
                    //
                    if (queryResult.result) {
                      // 410
                      // XXX Should we save the original even if mod ends up being a no-op?                                        // 411
                      _this5._saveOriginal(id, doc); // 412
                      //
                      _this5._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices); // 413
                      //
                      ++updateCount; // 420
                      //
                      if (!options.multi) {
                        // 422
                        return false; // break                                                                                     // 423
                      } // 424
                    } // 425
                    //
                    return true; // 427
                  }); // 428
                  //
                  Object.keys(recomputeQids).forEach(function (qid) {
                    // 430
                    var query = _this5.queries[qid]; // 431
                    //
                    if (query) {
                      // 433
                      _this5._recomputeResults(query, qidToOriginalResults[qid]); // 434
                    } // 435
                  }); // 436
                  //
                  this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then           // 438
                  // it's time to do an insert. Figure out what document we are inserting, and                                     // 441
                  // generate an id for it.                                                                                        // 442
                  //
                  //
                  var insertedId = void 0; // 443
                  //
                  if (updateCount === 0 && options.upsert) {
                    // 444
                    var doc = LocalCollection._createUpsertDocument(selector, mod); // 445
                    //
                    if (!doc._id && options.insertedId) {
                      // 446
                      doc._id = options.insertedId; // 447
                    } // 448
                    //
                    insertedId = this.insert(doc); // 450
                    updateCount = 1; // 451
                  } // Return the number of affected documents, or in the upsert case, an object                                   // 452
                  // containing the number of affected docs and the id of the doc that was                                         // 455
                  // inserted, if any.                                                                                             // 456
                  //
                  //
                  var result = void 0; // 457
                  //
                  if (options._returnObject) {
                    // 458
                    result = { // 459
                      numberAffected: updateCount // 459
                    }; // 459
                    //
                    if (insertedId !== undefined) {
                      // 461
                      result.insertedId = insertedId; // 462
                    } // 463
                  } else {
                    // 464
                    result = updateCount; // 465
                  } // 466
                  //
                  if (callback) {
                    // 468
                    Meteor.defer(function () {
                      // 469
                      callback(null, result); // 470
                    }); // 471
                  } // 472
                  //
                  return result; // 474
                } // 475
                //
                return update; //
              }(); // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                                         //
              // equivalent to LocalCollection.update(sel, mod, {upsert: true,                                                     // 478
              // _returnObject: true}).                                                                                            // 479
              //
              //
              LocalCollection.prototype.upsert = function () {
                //
                function upsert(selector, mod, options, callback) {
                  //
                  if (!callback && typeof options === 'function') {
                    // 481
                    callback = options; // 482
                    options = {}; // 483
                  } // 484
                  //
                  return this.update(selector, mod, Object.assign({}, options, { // 486
                    upsert: true, // 489
                    _returnObject: true // 489
                  }), callback); // 489
                } // 492
                //
                return upsert; //
              }(); // Iterates over a subset of documents that could match selector; calls                                         //
              // fn(doc, id) on each of them.  Specifically, if selector specifies                                                 // 495
              // specific _id's, it only looks at those.  doc is *not* cloned: it is the                                           // 496
              // same object that is in _docs.                                                                                     // 497
              //
              //
              LocalCollection.prototype._eachPossiblyMatchingDoc = function () {
                //
                function _eachPossiblyMatchingDoc(selector, fn) {
                  //
                  var _this6 = this; // 498
                  //
                  var specificIds = LocalCollection._idsMatchedBySelector(selector); // 499
                  //
                  if (specificIds) {
                    // 501
                    specificIds.some(function (id) {
                      // 502
                      var doc = _this6._docs.get(id); // 503
                      //
                      if (doc) {
                        // 505
                        return fn(doc, id) === false; // 506
                      } // 507
                    }); // 508
                  } else {
                    // 509
                    this._docs.forEach(fn); // 510
                  } // 511
                } // 512
                //
                return _eachPossiblyMatchingDoc; //
              }(); //
              //
              LocalCollection.prototype._modifyAndNotify = function () {
                //
                function _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {
                  //
                  var _this7 = this; // 514
                  //
                  var matched_before = {}; // 515
                  Object.keys(this.queries).forEach(function (qid) {
                    // 517
                    var query = _this7.queries[qid]; // 518
                    //
                    if (query.dirty) {
                      // 520
                      return; // 521
                    } // 522
                    //
                    if (query.ordered) {
                      // 524
                      matched_before[qid] = query.matcher.documentMatches(doc).result; // 525
                    } else {
                      // 526
                      // Because we don't support skip or limit (yet) in unordered queries, we                                     // 527
                      // can just do a direct lookup.                                                                              // 528
                      matched_before[qid] = query.results.has(doc._id); // 529
                    } // 530
                  }); // 531
                  var old_doc = EJSON.clone(doc); // 533
                  //
                  LocalCollection._modify(doc, mod, { // 535
                    arrayIndices: arrayIndices // 535
                  }); // 535
                  //
                  Object.keys(this.queries).forEach(function (qid) {
                    // 537
                    var query = _this7.queries[qid]; // 538
                    //
                    if (query.dirty) {
                      // 540
                      return; // 541
                    } // 542
                    //
                    var afterMatch = query.matcher.documentMatches(doc); // 544
                    var after = afterMatch.result; // 545
                    var before = matched_before[qid]; // 546
                    //
                    if (after && query.distances && afterMatch.distance !== undefined) {
                      // 548
                      query.distances.set(doc._id, afterMatch.distance); // 549
                    } // 550
                    //
                    if (query.cursor.skip || query.cursor.limit) {
                      // 552
                      // We need to recompute any query where the doc may have been in the                                         // 553
                      // cursor's window either before or after the update. (Note that if skip                                     // 554
                      // or limit is set, "before" and "after" being true do not necessarily                                       // 555
                      // mean that the document is in the cursor's output after skip/limit is                                      // 556
                      // applied... but if they are false, then the document definitely is NOT                                     // 557
                      // in the output. So it's safe to skip recompute if neither before or                                        // 558
                      // after are true.)                                                                                          // 559
                      if (before || after) {
                        // 560
                        recomputeQids[qid] = true; // 561
                      } // 562
                    } else if (before && !after) {
                      // 563
                      LocalCollection._removeFromResults(query, doc); // 564
                    } else if (!before && after) {
                      // 565
                      LocalCollection._insertInResults(query, doc); // 566
                    } else if (before && after) {
                      // 567
                      LocalCollection._updateInResults(query, doc, old_doc); // 568
                    } // 569
                  }); // 570
                } // 571
                //
                return _modifyAndNotify; //
              }(); // Recomputes the results of a query and runs observe callbacks for the                                         //
              // difference between the previous results and the current results (unless                                           // 574
              // paused). Used for skip/limit queries.                                                                             // 575
              //                                                                                                                   // 576
              // When this is used by insert or remove, it can just use query.results for                                          // 577
              // the old results (and there's no need to pass in oldResults), because these                                        // 578
              // operations don't mutate the documents in the collection. Update needs to                                          // 579
              // pass in an oldResults which was deep-copied before the modifier was                                               // 580
              // applied.                                                                                                          // 581
              //                                                                                                                   // 582
              // oldResults is guaranteed to be ignored if the query is not paused.                                                // 583
              //
              //
              LocalCollection.prototype._recomputeResults = function () {
                //
                function _recomputeResults(query, oldResults) {
                  //
                  if (this.paused) {
                    // 585
                    // There's no reason to recompute the results now as we're still paused.                                       // 586
                    // By flagging the query as "dirty", the recompute will be performed                                           // 587
                    // when resumeObservers is called.                                                                             // 588
                    query.dirty = true; // 589
                    return; // 590
                  } // 591
                  //
                  if (!this.paused && !oldResults) {
                    // 593
                    oldResults = query.results; // 594
                  } // 595
                  //
                  if (query.distances) {
                    // 597
                    query.distances.clear(); // 598
                  } // 599
                  //
                  query.results = query.cursor._getRawObjects({ // 601
                    distances: query.distances, // 602
                    ordered: query.ordered // 603
                  }); // 601
                  //
                  if (!this.paused) {
                    // 606
                    LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, { // 607
                      projectionFn: query.projectionFn // 612
                    }); // 612
                  } // 614
                } // 615
                //
                return _recomputeResults; //
              }(); //
              //
              LocalCollection.prototype._saveOriginal = function () {
                //
                function _saveOriginal(id, doc) {
                  //
                  // Are we even trying to save originals?                                                                         // 618
                  if (!this._savedOriginals) {
                    // 619
                    return; // 620
                  } // Have we previously mutated the original (and so 'doc' is not actually                                       // 621
                  // original)?  (Note the 'has' check rather than truth: we store undefined                                       // 624
                  // here for inserted docs!)                                                                                      // 625
                  //
                  //
                  if (this._savedOriginals.has(id)) {
                    // 626
                    return; // 627
                  } // 628
                  //
                  this._savedOriginals.set(id, EJSON.clone(doc)); // 630
                } // 631
                //
                return _saveOriginal; //
              }(); //
              //
              return LocalCollection; //
            }(); //
            //
            LocalCollection.Cursor = Cursor; // 634
            LocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something
            // _CachingChangeObserver is an object which receives observeChanges callbacks                                         // 640
            // and keeps a cache of the current cursor state up to date in this.docs. Users                                        // 641
            // of this class should read the docs field but not modify it. You should pass                                         // 642
            // the "applyChange" field as the callbacks to the underlying observeChanges                                           // 643
            // call. Optionally, you can specify your own observeChanges callbacks which are                                       // 644
            // invoked immediately before the docs field is updated; this object is made                                           // 645
            // available as `this` to those callbacks.                                                                             // 646
            //
            LocalCollection._CachingChangeObserver = function () {
              // 647
              function _CachingChangeObserver() {
                // 648
                var _this8 = this; // 648
                //
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // 648
                (0, _classCallCheck3.default)(this, _CachingChangeObserver); // 648
                //
                var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);
                //
                if (hasOwn.call(options, 'ordered')) {
                  // 654
                  this.ordered = options.ordered; // 655
                  //
                  if (options.callbacks && options.ordered !== orderedFromCallbacks) {
                    // 657
                    throw Error('ordered option doesn\'t match callbacks'); // 658
                  } // 659
                } else if (options.callbacks) {
                  // 660
                  this.ordered = orderedFromCallbacks; // 661
                } else {
                  // 662
                  throw Error('must provide ordered or callbacks'); // 663
                } // 664
                //
                var callbacks = options.callbacks || {}; // 666
                //
                if (this.ordered) {
                  // 668
                  this.docs = new OrderedDict(MongoID.idStringify); // 669
                  this.applyChange = { // 670
                    addedBefore: function (id, fields, before) {
                      // 671
                      var doc = EJSON.clone(fields); // 672
                      doc._id = id; // 674
                      //
                      if (callbacks.addedBefore) {
                        // 676
                        callbacks.addedBefore.call(_this8, id, fields, before); // 677
                      } // This line triggers if we provide added with movedBefore.                                                // 678
                      //
                      //
                      if (callbacks.added) {
                        // 681
                        callbacks.added.call(_this8, id, fields); // 682
                      } // XXX could `before` be a falsy ID?  Technically                                                          // 683
                      // idStringify seems to allow for them -- though                                                             // 686
                      // OrderedDict won't call stringify on a falsy arg.                                                          // 687
                      //
                      //
                      _this8.docs.putBefore(id, doc, before || null); // 688
                    }, // 689
                    movedBefore: function (id, before) {
                      // 690
                      var doc = _this8.docs.get(id); // 691
                      //
                      if (callbacks.movedBefore) {
                        // 693
                        callbacks.movedBefore.call(_this8, id, before); // 694
                      } // 695
                      //
                      _this8.docs.moveBefore(id, before || null); // 697
                    } // 698
                  }; // 670
                } else {
                  // 700
                  this.docs = new LocalCollection._IdMap(); // 701
                  this.applyChange = { // 702
                    added: function (id, fields) {
                      // 703
                      var doc = EJSON.clone(fields); // 704
                      //
                      if (callbacks.added) {
                        // 706
                        callbacks.added.call(_this8, id, fields); // 707
                      } // 708
                      //
                      doc._id = id; // 710
                      //
                      _this8.docs.set(id, doc); // 712
                    } // 713
                  }; // 702
                } // The methods in _IdMap and OrderedDict used by these callbacks are                                             // 715
                // identical.                                                                                                      // 718
                //
                //
                this.applyChange.changed = function (id, fields) {
                  // 719
                  var doc = _this8.docs.get(id); // 720
                  //
                  if (!doc) {
                    // 722
                    throw new Error("Unknown id for changed: " + id); // 723
                  } // 724
                  //
                  if (callbacks.changed) {
                    // 726
                    callbacks.changed.call(_this8, id, EJSON.clone(fields)); // 727
                  } // 728
                  //
                  DiffSequence.applyChanges(doc, fields); // 730
                }; // 731
                //
                this.applyChange.removed = function (id) {
                  // 733
                  if (callbacks.removed) {
                    // 734
                    callbacks.removed.call(_this8, id); // 735
                  } // 736
                  //
                  _this8.docs.remove(id); // 738
                }; // 739
              } // 740
              //
              return _CachingChangeObserver; // 647
            }(); // 647
            //
            LocalCollection._IdMap = function (_IdMap2) {
              // 743
              (0, _inherits3.default)(_IdMap, _IdMap2); // 743
              //
              function _IdMap() {
                // 744
                (0, _classCallCheck3.default)(this, _IdMap); // 744
                return (0, _possibleConstructorReturn3.default)(this, _IdMap2.call(this, MongoID.idStringify, MongoID.idParse)); // 744
              } // 746
              //
              return _IdMap; // 743
            }(IdMap); // Wrap a transform function to return objects that have the _id field                                       // 743
            // of the untransformed document. This ensures that subsystems such as                                                 // 750
            // the observe-sequence package that call `observe` can keep track of                                                  // 751
            // the documents identities.                                                                                           // 752
            //                                                                                                                     // 753
            // - Require that it returns objects                                                                                   // 754
            // - If the return value has an _id field, verify that it matches the                                                  // 755
            //   original _id field                                                                                                // 756
            // - If the return value doesn't have an _id field, add it back.                                                       // 757
            //
            //
            LocalCollection.wrapTransform = function (transform) {
              // 758
              if (!transform) {
                // 759
                return null; // 760
              } // No need to doubly-wrap transforms.                                                                              // 761
              //
              //
              if (transform.__wrappedTransform__) {
                // 764
                return transform; // 765
              } // 766
              //
              var wrapped = function (doc) {
                // 768
                if (!hasOwn.call(doc, '_id')) {
                  // 769
                  // XXX do we ever have a transform on the oplog's collection? because that                                       // 770
                  // collection has no _id.                                                                                        // 771
                  throw new Error('can only transform documents with _id'); // 772
                } // 773
                //
                var id = doc._id; // XXX consider making tracker a weak dependency and checking                                    // 775
                // Package.tracker here                                                                                            // 778
                //
                var transformed = Tracker.nonreactive(function () {
                  // 779
                  return transform(doc); // 779
                }); // 779
                //
                if (!LocalCollection._isPlainObject(transformed)) {
                  // 781
                  throw new Error('transform must return object'); // 782
                } // 783
                //
                if (hasOwn.call(transformed, '_id')) {
                  // 785
                  if (!EJSON.equals(transformed._id, id)) {
                    // 786
                    throw new Error('transformed document can\'t have different _id'); // 787
                  } // 788
                } else {
                  // 789
                  transformed._id = id; // 790
                } // 791
                //
                return transformed; // 793
              }; // 794
              //
              wrapped.__wrappedTransform__ = true; // 796
              return wrapped; // 798
            }; // XXX the sorted-query logic below is laughably inefficient. we'll                                                 // 799
            // need to come up with a better datastructure for this.                                                               // 802
            //                                                                                                                     // 803
            // XXX the logic for observing with a skip or a limit is even more                                                     // 804
            // laughably inefficient. we recompute the whole results every time!                                                   // 805
            // This binary search puts a value between any equal values, and the first                                             // 807
            // lesser value.                                                                                                       // 808
            //
            //
            LocalCollection._binarySearch = function (cmp, array, value) {
              // 809
              var first = 0; // 810
              var range = array.length; // 811
              //
              while (range > 0) {
                // 813
                var halfRange = Math.floor(range / 2); // 814
                //
                if (cmp(value, array[first + halfRange]) >= 0) {
                  // 816
                  first += halfRange + 1; // 817
                  range -= halfRange + 1; // 818
                } else {
                  // 819
                  range = halfRange; // 820
                } // 821
              } // 822
              //
              return first; // 824
            }; // 825
            //
            LocalCollection._checkSupportedProjection = function (fields) {
              // 827
              if (fields !== Object(fields) || Array.isArray(fields)) {
                // 828
                throw MinimongoError('fields option must be an object'); // 829
              } // 830
              //
              Object.keys(fields).forEach(function (keyPath) {
                // 832
                if (keyPath.split('.').includes('$')) {
                  // 833
                  throw MinimongoError('Minimongo doesn\'t support $ operator in projections yet.'); // 834
                } // 837
                //
                var value = fields[keyPath]; // 839
                //
                if ((typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === 'object' && ['$elemMatch', '$meta', '$slice'].some(function (key) {
                  return hasOwn.call(value, key); // 842
                })) {
                  // 842
                  throw MinimongoError('Minimongo doesn\'t support operators in projections yet.'); // 845
                } // 848
                //
                if (![1, 0, true, false].includes(value)) {
                  // 850
                  throw MinimongoError('Projection values should be one of 1, 0, true, or false'); // 851
                } // 854
              }); // 855
            }; // Knows how to compile a fields projection to a predicate function.                                                // 856
            // @returns - Function: a closure that filters out an object according to the                                          // 859
            //            fields projection rules:                                                                                 // 860
            //            @param obj - Object: MongoDB-styled document                                                             // 861
            //            @returns - Object: a document with the fields filtered out                                               // 862
            //                       according to projection rules. Doesn't retain subfields                                       // 863
            //                       of passed argument.                                                                           // 864
            //
            //
            LocalCollection._compileProjection = function (fields) {
              // 865
              LocalCollection._checkSupportedProjection(fields); // 866
              //
              var _idProjection = fields._id === undefined ? true : fields._id; // 868
              //
              var details = projectionDetails(fields); // returns transformed doc according to ruleTree                            // 869
              //
              var transform = function (doc, ruleTree) {
                // 872
                // Special case for "sets"                                                                                         // 873
                if (Array.isArray(doc)) {
                  // 874
                  return doc.map(function (subdoc) {
                    // 875
                    return transform(subdoc, ruleTree); // 875
                  }); // 875
                } // 876
                //
                var result = details.including ? {} : EJSON.clone(doc); // 878
                Object.keys(ruleTree).forEach(function (key) {
                  // 880
                  if (!hasOwn.call(doc, key)) {
                    // 881
                    return; // 882
                  } // 883
                  //
                  var rule = ruleTree[key]; // 885
                  //
                  if (rule === Object(rule)) {
                    // 887
                    // For sub-objects/subsets we branch                                                                           // 888
                    if (doc[key] === Object(doc[key])) {
                      // 889
                      result[key] = transform(doc[key], rule); // 890
                    } // 891
                  } else if (details.including) {
                    // 892
                    // Otherwise we don't even touch this subfield                                                                 // 893
                    result[key] = EJSON.clone(doc[key]); // 894
                  } else {
                    // 895
                    delete result[key]; // 896
                  } // 897
                }); // 898
                return result; // 900
              }; // 901
              //
              return function (doc) {
                // 903
                var result = transform(doc, details.tree); // 904
                //
                if (_idProjection && hasOwn.call(doc, '_id')) {
                  // 906
                  result._id = doc._id; // 907
                } // 908
                //
                if (!_idProjection && hasOwn.call(result, '_id')) {
                  // 910
                  delete result._id; // 911
                } // 912
                //
                return result; // 914
              }; // 915
            }; // Calculates the document to insert in case we're doing an upsert and the                                          // 916
            // selector does not match any elements                                                                                // 919
            //
            //
            LocalCollection._createUpsertDocument = function (selector, modifier) {
              // 920
              var selectorDocument = populateDocumentWithQueryFields(selector); // 921
              //
              var isModify = LocalCollection._isModificationMod(modifier); // 922
              //
              var newDoc = {}; // 924
              //
              if (selectorDocument._id) {
                // 926
                newDoc._id = selectorDocument._id; // 927
                delete selectorDocument._id; // 928
              } // This double _modify call is made to help with nested properties (see issue                                      // 929
              // #8631). We do this even if it's a replacement for validation purposes (e.g.                                       // 932
              // ambiguous id's)                                                                                                   // 933
              //
              //
              LocalCollection._modify(newDoc, { // 934
                $set: selectorDocument // 934
              }); // 934
              //
              LocalCollection._modify(newDoc, modifier, { // 935
                isInsert: true // 935
              }); // 935
              //
              if (isModify) {
                // 937
                return newDoc; // 938
              } // Replacement can take _id from query document                                                                    // 939
              //
              //
              var replacement = Object.assign({}, modifier); // 942
              //
              if (newDoc._id) {
                // 943
                replacement._id = newDoc._id; // 944
              } // 945
              //
              return replacement; // 947
            }; // 948
            //
            LocalCollection._diffObjects = function (left, right, callbacks) {
              // 950
              return DiffSequence.diffObjects(left, right, callbacks); // 951
            }; // ordered: bool.                                                                                                   // 952
            // old_results and new_results: collections of documents.                                                              // 955
            //    if ordered, they are arrays.                                                                                     // 956
            //    if unordered, they are IdMaps                                                                                    // 957
            //
            //
            LocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {
              // 958
              return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options); // 958
            }; // 958
            //
            LocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {
              // 962
              return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options); // 962
            }; // 962
            //
            LocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {
              // 966
              return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options); // 966
            }; // 966
            //
            LocalCollection._findInOrderedResults = function (query, doc) {
              // 970
              if (!query.ordered) {
                // 971
                throw new Error('Can\'t call _findInOrderedResults on unordered query'); // 972
              } // 973
              //
              for (var i = 0; i < query.results.length; i++) {
                // 975
                if (query.results[i] === doc) {
                  // 976
                  return i; // 977
                } // 978
              } // 979
              //
              throw Error('object missing from query'); // 981
            }; // If this is a selector which explicitly constrains the match by ID to a finite                                    // 982
            // number of documents, returns a list of their IDs.  Otherwise returns                                                // 985
            // null. Note that the selector may have other restrictions so it may not even                                         // 986
            // match those document!  We care about $in and $and since those are generated                                         // 987
            // access-controlled update and remove.                                                                                // 988
            //
            //
            LocalCollection._idsMatchedBySelector = function (selector) {
              // 989
              // Is the selector just an ID?                                                                                       // 990
              if (LocalCollection._selectorIsId(selector)) {
                // 991
                return [selector]; // 992
              } // 993
              //
              if (!selector) {
                // 995
                return null; // 996
              } // Do we have an _id clause?                                                                                       // 997
              //
              //
              if (hasOwn.call(selector, '_id')) {
                // 1000
                // Is the _id clause just an ID?                                                                                   // 1001
                if (LocalCollection._selectorIsId(selector._id)) {
                  // 1002
                  return [selector._id]; // 1003
                } // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?                                                              // 1004
                //
                //
                if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {
                  return selector._id.$in; // 1011
                } // 1012
                //
                return null; // 1014
              } // If this is a top-level $and, and any of the clauses constrain their                                             // 1015
              // documents, then the whole selector is constrained by any one clause's                                             // 1018
              // constraint. (Well, by their intersection, but that seems unlikely.)                                               // 1019
              //
              //
              if (Array.isArray(selector.$and)) {
                // 1020
                for (var i = 0; i < selector.$and.length; ++i) {
                  // 1021
                  var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]); // 1022
                  //
                  if (subIds) {
                    // 1024
                    return subIds; // 1025
                  } // 1026
                } // 1027
              } // 1028
              //
              return null; // 1030
            }; // 1031
            //
            LocalCollection._insertInResults = function (query, doc) {
              // 1033
              var fields = EJSON.clone(doc); // 1034
              delete fields._id; // 1036
              //
              if (query.ordered) {
                // 1038
                if (!query.sorter) {
                  // 1039
                  query.addedBefore(doc._id, query.projectionFn(fields), null); // 1040
                  query.results.push(doc); // 1041
                } else {
                  // 1042
                  var i = LocalCollection._insertInSortedList(query.sorter.getComparator({ // 1043
                    distances: query.distances // 1044
                  }), query.results, doc); // 1044
                  //
                  var next = query.results[i + 1]; // 1049
                  //
                  if (next) {
                    // 1050
                    next = next._id; // 1051
                  } else {
                    // 1052
                    next = null; // 1053
                  } // 1054
                  //
                  query.addedBefore(doc._id, query.projectionFn(fields), next); // 1056
                } // 1057
                //
                query.added(doc._id, query.projectionFn(fields)); // 1059
              } else {
                // 1060
                query.added(doc._id, query.projectionFn(fields)); // 1061
                query.results.set(doc._id, doc); // 1062
              } // 1063
            }; // 1064
            //
            LocalCollection._insertInSortedList = function (cmp, array, value) {
              // 1066
              if (array.length === 0) {
                // 1067
                array.push(value); // 1068
                return 0; // 1069
              } // 1070
              //
              var i = LocalCollection._binarySearch(cmp, array, value); // 1072
              //
              array.splice(i, 0, value); // 1074
              return i; // 1076
            }; // 1077
            //
            LocalCollection._isModificationMod = function (mod) {
              // 1079
              var isModify = false; // 1080
              var isReplace = false; // 1081
              Object.keys(mod).forEach(function (key) {
                // 1083
                if (key.substr(0, 1) === '$') {
                  // 1084
                  isModify = true; // 1085
                } else {
                  // 1086
                  isReplace = true; // 1087
                } // 1088
              }); // 1089
              //
              if (isModify && isReplace) {
                // 1091
                throw new Error('Update parameter cannot have both modifier and non-modifier fields.'); // 1092
              } // 1095
              //
              return isModify; // 1097
            }; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                                         // 1098
            // RegExp                                                                                                              // 1101
            // XXX note that _type(undefined) === 3!!!!                                                                            // 1102
            //
            //
            LocalCollection._isPlainObject = function (x) {
              // 1103
              return x && LocalCollection._f._type(x) === 3; // 1104
            }; // XXX need a strategy for passing the binding of $ into this                                                       // 1105
            // function, from the compiled selector                                                                                // 1108
            //                                                                                                                     // 1109
            // maybe just {key.up.to.just.before.dollarsign: array_index}                                                          // 1110
            //                                                                                                                     // 1111
            // XXX atomicity: if one modification fails, do we roll back the whole                                                 // 1112
            // change?                                                                                                             // 1113
            //                                                                                                                     // 1114
            // options:                                                                                                            // 1115
            //   - isInsert is set when _modify is being called to compute the document to                                         // 1116
            //     insert as part of an upsert operation. We use this primarily to figure                                          // 1117
            //     out when to set the fields in $setOnInsert, if present.                                                         // 1118
            //
            //
            LocalCollection._modify = function (doc, modifier) {
              // 1119
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // 1119
              //
              if (!LocalCollection._isPlainObject(modifier)) {
                // 1120
                throw MinimongoError('Modifier must be an object'); // 1121
              } // Make sure the caller can't mutate our data structures.                                                          // 1122
              //
              //
              modifier = EJSON.clone(modifier); // 1125
              var isModifier = isOperatorObject(modifier); // 1127
              var newDoc = isModifier ? EJSON.clone(doc) : modifier; // 1128
              //
              if (isModifier) {
                // 1130
                // apply modifiers to the doc.                                                                                     // 1131
                Object.keys(modifier).forEach(function (operator) {
                  // 1132
                  // Treat $setOnInsert as $set if this is an insert.                                                              // 1133
                  var setOnInsert = options.isInsert && operator === '$setOnInsert'; // 1134
                  var modFunc = MODIFIERS[setOnInsert ? '$set' : operator]; // 1135
                  var operand = modifier[operator]; // 1136
                  //
                  if (!modFunc) {
                    // 1138
                    throw MinimongoError("Invalid modifier specified " + operator); // 1139
                  } // 1140
                  //
                  Object.keys(operand).forEach(function (keypath) {
                    // 1142
                    var arg = operand[keypath]; // 1143
                    //
                    if (keypath === '') {
                      // 1145
                      throw MinimongoError('An empty update path is not valid.'); // 1146
                    } // 1147
                    //
                    var keyparts = keypath.split('.'); // 1149
                    //
                    if (!keyparts.every(Boolean)) {
                      // 1151
                      throw MinimongoError("The update path '" + keypath + "' contains an empty field name, " + 'which is not allowed.');
                    } // 1156
                    //
                    var target = findModTarget(newDoc, keyparts, { // 1158
                      arrayIndices: options.arrayIndices, // 1159
                      forbidArray: operator === '$rename', // 1160
                      noCreate: NO_CREATE_MODIFIERS[operator] // 1161
                    }); // 1158
                    modFunc(target, keyparts.pop(), arg, keypath, newDoc); // 1164
                  }); // 1165
                }); // 1166
                //
                if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {
                  // 1168
                  throw MinimongoError("After applying the update to the document {_id: \"" + doc._id + "\", ...}," + ' the (immutable) field \'_id\' was found to have been altered to ' + ("_id: \"" + newDoc._id + "\""));
                } // 1174
              } else {
                // 1175
                if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {
                  // 1176
                  throw MinimongoError("The _id field cannot be changed from {_id: \"" + doc._id + "\"} to " + ("{_id: \"" + modifier._id + "\"}"));
                } // replace the whole document                                                                                    // 1181
                //
                //
                assertHasValidFieldNames(modifier); // 1184
              } // move new document into place.                                                                                   // 1185
              //
              //
              Object.keys(doc).forEach(function (key) {
                // 1188
                // Note: this used to be for (var key in doc) however, this does not                                               // 1189
                // work right in Opera. Deleting from a doc while iterating over it                                                // 1190
                // would sometimes cause opera to skip some keys.                                                                  // 1191
                if (key !== '_id') {
                  // 1192
                  delete doc[key]; // 1193
                } // 1194
              }); // 1195
              Object.keys(newDoc).forEach(function (key) {
                // 1197
                doc[key] = newDoc[key]; // 1198
              }); // 1199
            }; // 1200
            //
            LocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {
              // 1202
              var transform = cursor.getTransform() || function (doc) {
                // 1203
                return doc; // 1203
              }; // 1203
              //
              var suppressed = !!observeCallbacks._suppress_initial; // 1204
              var observeChangesCallbacks = void 0; // 1206
              //
              if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {
                // 1207
                // The "_no_indices" option sets all index arguments to -1 and skips the                                           // 1208
                // linear scans required to generate them.  This lets observers that don't                                         // 1209
                // need absolute indices benefit from the other features of this API --                                            // 1210
                // relative order, transforms, and applyChanges -- without the speed hit.                                          // 1211
                var indices = !observeCallbacks._no_indices; // 1212
                observeChangesCallbacks = { // 1214
                  addedBefore: function (id, fields, before) {
                    // 1215
                    if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {
                      // 1216
                      return; // 1217
                    } // 1218
                    //
                    var doc = transform(Object.assign(fields, { // 1220
                      _id: id // 1220
                    })); // 1220
                    //
                    if (observeCallbacks.addedAt) {
                      // 1222
                      observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);
                    } else {
                      // 1232
                      observeCallbacks.added(doc); // 1233
                    } // 1234
                  }, // 1235
                  changed: function (id, fields) {
                    // 1236
                    if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {
                      // 1237
                      return; // 1238
                    } // 1239
                    //
                    var doc = EJSON.clone(this.docs.get(id)); // 1241
                    //
                    if (!doc) {
                      // 1242
                      throw new Error("Unknown id for changed: " + id); // 1243
                    } // 1244
                    //
                    var oldDoc = transform(EJSON.clone(doc)); // 1246
                    DiffSequence.applyChanges(doc, fields); // 1248
                    //
                    if (observeCallbacks.changedAt) {
                      // 1250
                      observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1); // 1251
                    } else {
                      // 1256
                      observeCallbacks.changed(transform(doc), oldDoc); // 1257
                    } // 1258
                  }, // 1259
                  movedBefore: function (id, before) {
                    // 1260
                    if (!observeCallbacks.movedTo) {
                      // 1261
                      return; // 1262
                    } // 1263
                    //
                    var from = indices ? this.docs.indexOf(id) : -1; // 1265
                    var to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the
                    // document slides everything back one slot.                                                                   // 1273
                    //
                    if (to > from) {
                      // 1274
                      --to; // 1275
                    } // 1276
                    //
                    observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null); // 1278
                  }, // 1284
                  removed: function (id) {
                    // 1285
                    if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {
                      // 1286
                      return; // 1287
                    } // technically maybe there should be an EJSON.clone here, but it's about                                     // 1288
                    // to be removed from this.docs!                                                                               // 1291
                    //
                    //
                    var doc = transform(this.docs.get(id)); // 1292
                    //
                    if (observeCallbacks.removedAt) {
                      // 1294
                      observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1); // 1295
                    } else {
                      // 1296
                      observeCallbacks.removed(doc); // 1297
                    } // 1298
                  } // 1299
                }; // 1214
              } else {
                // 1301
                observeChangesCallbacks = { // 1302
                  added: function (id, fields) {
                    // 1303
                    if (!suppressed && observeCallbacks.added) {
                      // 1304
                      observeCallbacks.added(transform(Object.assign(fields, { // 1305
                        _id: id // 1305
                      }))); // 1305
                    } // 1306
                  }, // 1307
                  changed: function (id, fields) {
                    // 1308
                    if (observeCallbacks.changed) {
                      // 1309
                      var oldDoc = this.docs.get(id); // 1310
                      var doc = EJSON.clone(oldDoc); // 1311
                      DiffSequence.applyChanges(doc, fields); // 1313
                      observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc))); // 1315
                    } // 1319
                  }, // 1320
                  removed: function (id) {
                    // 1321
                    if (observeCallbacks.removed) {
                      // 1322
                      observeCallbacks.removed(transform(this.docs.get(id))); // 1323
                    } // 1324
                  } // 1325
                }; // 1302
              } // 1327
              //
              var changeObserver = new LocalCollection._CachingChangeObserver({ // 1329
                callbacks: observeChangesCallbacks // 1330
              }); // 1329
              var handle = cursor.observeChanges(changeObserver.applyChange); // 1333
              suppressed = false; // 1335
              return handle; // 1337
            }; // 1338
            //
            LocalCollection._observeCallbacksAreOrdered = function (callbacks) {
              // 1340
              if (callbacks.added && callbacks.addedAt) {
                // 1341
                throw new Error('Please specify only one of added() and addedAt()'); // 1342
              } // 1343
              //
              if (callbacks.changed && callbacks.changedAt) {
                // 1345
                throw new Error('Please specify only one of changed() and changedAt()'); // 1346
              } // 1347
              //
              if (callbacks.removed && callbacks.removedAt) {
                // 1349
                throw new Error('Please specify only one of removed() and removedAt()'); // 1350
              } // 1351
              //
              return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt); // 1353
            }; // 1359
            //
            LocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {
              // 1361
              if (callbacks.added && callbacks.addedBefore) {
                // 1362
                throw new Error('Please specify only one of added() and addedBefore()'); // 1363
              } // 1364
              //
              return !!(callbacks.addedBefore || callbacks.movedBefore); // 1366
            }; // 1367
            //
            LocalCollection._removeFromResults = function (query, doc) {
              // 1369
              if (query.ordered) {
                // 1370
                var i = LocalCollection._findInOrderedResults(query, doc); // 1371
                //
                query.removed(doc._id); // 1373
                query.results.splice(i, 1); // 1374
              } else {
                // 1375
                var id = doc._id; // in case callback mutates doc                                                                  // 1376
                //
                query.removed(doc._id); // 1378
                query.results.remove(id); // 1379
              } // 1380
            }; // Is this selector just shorthand for lookup by _id?                                                               // 1381
            //
            //
            LocalCollection._selectorIsId = function (selector) {
              // 1384
              return typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID; // 1384
            }; // Is the selector just lookup by _id (shorthand or not)?                                                           // 1384
            //
            //
            LocalCollection._selectorIsIdPerhapsAsObject = function (selector) {
              // 1391
              return LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;
            }; // 1391
            //
            LocalCollection._updateInResults = function (query, doc, old_doc) {
              // 1397
              if (!EJSON.equals(doc._id, old_doc._id)) {
                // 1398
                throw new Error('Can\'t change a doc\'s _id while updating'); // 1399
              } // 1400
              //
              var projectionFn = query.projectionFn; // 1402
              var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc)); // 1403
              //
              if (!query.ordered) {
                // 1408
                if (Object.keys(changedFields).length) {
                  // 1409
                  query.changed(doc._id, changedFields); // 1410
                  query.results.set(doc._id, doc); // 1411
                } // 1412
                //
                return; // 1414
              } // 1415
              //
              var old_idx = LocalCollection._findInOrderedResults(query, doc); // 1417
              //
              if (Object.keys(changedFields).length) {
                // 1419
                query.changed(doc._id, changedFields); // 1420
              } // 1421
              //
              if (!query.sorter) {
                // 1423
                return; // 1424
              } // just take it out and put it back in again, and see if the index changes                                         // 1425
              //
              //
              query.results.splice(old_idx, 1); // 1428
              //
              var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({ // 1430
                distances: query.distances // 1431
              }), query.results, doc); // 1431
              //
              if (old_idx !== new_idx) {
                // 1436
                var next = query.results[new_idx + 1]; // 1437
                //
                if (next) {
                  // 1438
                  next = next._id; // 1439
                } else {
                  // 1440
                  next = null; // 1441
                } // 1442
                //
                query.movedBefore && query.movedBefore(doc._id, next); // 1444
              } // 1445
            }; // 1446
            //
            var MODIFIERS = { // 1448
              $currentDate: function (target, field, arg) {
                // 1449
                if ((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === 'object' && hasOwn.call(arg, '$type')) {
                  if (arg.$type !== 'date') {
                    // 1451
                    throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', { // 1452
                      field: field // 1455
                    }); // 1455
                  } // 1457
                } else if (arg !== true) {
                  // 1458
                  throw MinimongoError('Invalid $currentDate modifier', { // 1459
                    field: field // 1459
                  }); // 1459
                } // 1460
                //
                target[field] = new Date(); // 1462
              }, // 1463
              $min: function (target, field, arg) {
                // 1464
                if (typeof arg !== 'number') {
                  // 1465
                  throw MinimongoError('Modifier $min allowed for numbers only', { // 1466
                    field: field // 1466
                  }); // 1466
                } // 1467
                //
                if (field in target) {
                  // 1469
                  if (typeof target[field] !== 'number') {
                    // 1470
                    throw MinimongoError('Cannot apply $min modifier to non-number', { // 1471
                      field: field // 1473
                    }); // 1473
                  } // 1475
                  //
                  if (target[field] > arg) {
                    // 1477
                    target[field] = arg; // 1478
                  } // 1479
                } else {
                  // 1480
                  target[field] = arg; // 1481
                } // 1482
              }, // 1483
              $max: function (target, field, arg) {
                // 1484
                if (typeof arg !== 'number') {
                  // 1485
                  throw MinimongoError('Modifier $max allowed for numbers only', { // 1486
                    field: field // 1486
                  }); // 1486
                } // 1487
                //
                if (field in target) {
                  // 1489
                  if (typeof target[field] !== 'number') {
                    // 1490
                    throw MinimongoError('Cannot apply $max modifier to non-number', { // 1491
                      field: field // 1493
                    }); // 1493
                  } // 1495
                  //
                  if (target[field] < arg) {
                    // 1497
                    target[field] = arg; // 1498
                  } // 1499
                } else {
                  // 1500
                  target[field] = arg; // 1501
                } // 1502
              }, // 1503
              $inc: function (target, field, arg) {
                // 1504
                if (typeof arg !== 'number') {
                  // 1505
                  throw MinimongoError('Modifier $inc allowed for numbers only', { // 1506
                    field: field // 1506
                  }); // 1506
                } // 1507
                //
                if (field in target) {
                  // 1509
                  if (typeof target[field] !== 'number') {
                    // 1510
                    throw MinimongoError('Cannot apply $inc modifier to non-number', { // 1511
                      field: field // 1513
                    }); // 1513
                  } // 1515
                  //
                  target[field] += arg; // 1517
                } else {
                  // 1518
                  target[field] = arg; // 1519
                } // 1520
              }, // 1521
              $set: function (target, field, arg) {
                // 1522
                if (target !== Object(target)) {
                  // 1523
                  // not an array or an object                                                                                     // 1523
                  var error = MinimongoError('Cannot set property on non-object field', { // 1524
                    field: field // 1526
                  }); // 1526
                  error.setPropertyError = true; // 1528
                  throw error; // 1529
                } // 1530
                //
                if (target === null) {
                  // 1532
                  var _error = MinimongoError('Cannot set property on null', { // 1533
                    field: field // 1533
                  }); // 1533
                  //
                  _error.setPropertyError = true; // 1534
                  throw _error; // 1535
                } // 1536
                //
                assertHasValidFieldNames(arg); // 1538
                target[field] = arg; // 1540
              }, // 1541
              $setOnInsert: function (target, field, arg) {// converted to `$set` in `_modify`                                     // 1542
              }, // 1544
              $unset: function (target, field, arg) {
                // 1545
                if (target !== undefined) {
                  // 1546
                  if (target instanceof Array) {
                    // 1547
                    if (field in target) {
                      // 1548
                      target[field] = null; // 1549
                    } // 1550
                  } else {
                    // 1551
                    delete target[field]; // 1552
                  } // 1553
                } // 1554
              }, // 1555
              $push: function (target, field, arg) {
                // 1556
                if (target[field] === undefined) {
                  // 1557
                  target[field] = []; // 1558
                } // 1559
                //
                if (!(target[field] instanceof Array)) {
                  // 1561
                  throw MinimongoError('Cannot apply $push modifier to non-array', { // 1562
                    field: field // 1562
                  }); // 1562
                } // 1563
                //
                if (!(arg && arg.$each)) {
                  // 1565
                  // Simple mode: not $each                                                                                        // 1566
                  assertHasValidFieldNames(arg); // 1567
                  target[field].push(arg); // 1569
                  return; // 1571
                } // Fancy mode: $each (and maybe $slice and $sort and $position)                                                  // 1572
                //
                //
                var toPush = arg.$each; // 1575
                //
                if (!(toPush instanceof Array)) {
                  // 1576
                  throw MinimongoError('$each must be an array', { // 1577
                    field: field // 1577
                  }); // 1577
                } // 1578
                //
                assertHasValidFieldNames(toPush); // Parse $position                                                               // 1580
                //
                var position = undefined; // 1583
                //
                if ('$position' in arg) {
                  // 1584
                  if (typeof arg.$position !== 'number') {
                    // 1585
                    throw MinimongoError('$position must be a numeric value', { // 1586
                      field: field // 1586
                    }); // 1586
                  } // XXX should check to make sure integer                                                                       // 1587
                  //
                  //
                  if (arg.$position < 0) {
                    // 1590
                    throw MinimongoError('$position in $push must be zero or positive', { // 1591
                      field: field // 1593
                    }); // 1593
                  } // 1595
                  //
                  position = arg.$position; // 1597
                } // Parse $slice.                                                                                                 // 1598
                //
                //
                var slice = undefined; // 1601
                //
                if ('$slice' in arg) {
                  // 1602
                  if (typeof arg.$slice !== 'number') {
                    // 1603
                    throw MinimongoError('$slice must be a numeric value', { // 1604
                      field: field // 1604
                    }); // 1604
                  } // XXX should check to make sure integer                                                                       // 1605
                  //
                  //
                  slice = arg.$slice; // 1608
                } // Parse $sort.                                                                                                  // 1609
                //
                //
                var sortFunction = undefined; // 1612
                //
                if (arg.$sort) {
                  // 1613
                  if (slice === undefined) {
                    // 1614
                    throw MinimongoError('$sort requires $slice to be present', { // 1615
                      field: field // 1615
                    }); // 1615
                  } // XXX this allows us to use a $sort whose value is an array, but that's                                       // 1616
                  // actually an extension of the Node driver, so it won't work                                                    // 1619
                  // server-side. Could be confusing!                                                                              // 1620
                  // XXX is it correct that we don't do geo-stuff here?                                                            // 1621
                  //
                  //
                  sortFunction = new Minimongo.Sorter(arg.$sort).getComparator(); // 1622
                  toPush.forEach(function (element) {
                    // 1624
                    if (LocalCollection._f._type(element) !== 3) {
                      // 1625
                      throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', { // 1626
                        field: field // 1629
                      }); // 1629
                    } // 1631
                  }); // 1632
                } // Actually push.                                                                                                // 1633
                //
                //
                if (position === undefined) {
                  // 1636
                  toPush.forEach(function (element) {
                    // 1637
                    target[field].push(element); // 1638
                  }); // 1639
                } else {
                  // 1640
                  var _target$field; // 1640
                  //
                  var spliceArguments = [position, 0]; // 1641
                  toPush.forEach(function (element) {
                    // 1643
                    spliceArguments.push(element); // 1644
                  }); // 1645
                  //
                  (_target$field = target[field]).splice.apply(_target$field, spliceArguments); // 1647
                } // Actually sort.                                                                                                // 1648
                //
                //
                if (sortFunction) {
                  // 1651
                  target[field].sort(sortFunction); // 1652
                } // Actually slice.                                                                                               // 1653
                //
                //
                if (slice !== undefined) {
                  // 1656
                  if (slice === 0) {
                    // 1657
                    target[field] = []; // differs from Array.slice!                                                               // 1658
                  } else if (slice < 0) {
                    // 1659
                    target[field] = target[field].slice(slice); // 1660
                  } else {
                    // 1661
                    target[field] = target[field].slice(0, slice); // 1662
                  } // 1663
                } // 1664
              }, // 1665
              $pushAll: function (target, field, arg) {
                // 1666
                if (!((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only'); // 1668
                } // 1669
                //
                assertHasValidFieldNames(arg); // 1671
                var toPush = target[field]; // 1673
                //
                if (toPush === undefined) {
                  // 1675
                  target[field] = arg; // 1676
                } else if (!(toPush instanceof Array)) {
                  // 1677
                  throw MinimongoError('Cannot apply $pushAll modifier to non-array', { // 1678
                    field: field // 1680
                  }); // 1680
                } else {
                  // 1682
                  toPush.push.apply(toPush, (0, _toConsumableArray3.default)(arg)); // 1683
                } // 1684
              }, // 1685
              $addToSet: function (target, field, arg) {
                // 1686
                var isEach = false; // 1687
                //
                if ((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === 'object') {
                  // 1689
                  // check if first key is '$each'                                                                                 // 1690
                  var keys = Object.keys(arg); // 1691
                  //
                  if (keys[0] === '$each') {
                    // 1692
                    isEach = true; // 1693
                  } // 1694
                } // 1695
                //
                var values = isEach ? arg.$each : [arg]; // 1697
                assertHasValidFieldNames(values); // 1699
                var toAdd = target[field]; // 1701
                //
                if (toAdd === undefined) {
                  // 1702
                  target[field] = values; // 1703
                } else if (!(toAdd instanceof Array)) {
                  // 1704
                  throw MinimongoError('Cannot apply $addToSet modifier to non-array', { // 1705
                    field: field // 1707
                  }); // 1707
                } else {
                  // 1709
                  values.forEach(function (value) {
                    // 1710
                    if (toAdd.some(function (element) {
                      // 1711
                      return LocalCollection._f._equal(value, element); // 1711
                    })) {
                      // 1711
                      return; // 1712
                    } // 1713
                    //
                    toAdd.push(value); // 1715
                  }); // 1716
                } // 1717
              }, // 1718
              $pop: function (target, field, arg) {
                // 1719
                if (target === undefined) {
                  // 1720
                  return; // 1721
                } // 1722
                //
                var toPop = target[field]; // 1724
                //
                if (toPop === undefined) {
                  // 1726
                  return; // 1727
                } // 1728
                //
                if (!(toPop instanceof Array)) {
                  // 1730
                  throw MinimongoError('Cannot apply $pop modifier to non-array', { // 1731
                    field: field // 1731
                  }); // 1731
                } // 1732
                //
                if (typeof arg === 'number' && arg < 0) {
                  // 1734
                  toPop.splice(0, 1); // 1735
                } else {
                  // 1736
                  toPop.pop(); // 1737
                } // 1738
              }, // 1739
              $pull: function (target, field, arg) {
                // 1740
                if (target === undefined) {
                  // 1741
                  return; // 1742
                } // 1743
                //
                var toPull = target[field]; // 1745
                //
                if (toPull === undefined) {
                  // 1746
                  return; // 1747
                } // 1748
                //
                if (!(toPull instanceof Array)) {
                  // 1750
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', { // 1751
                    field: field // 1753
                  }); // 1753
                } // 1755
                //
                var out = void 0; // 1757
                //
                if (arg != null && (typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === 'object' && !(arg instanceof Array)) {
                  // XXX would be much nicer to compile this once, rather than                                                     // 1759
                  // for each document we modify.. but usually we're not                                                           // 1760
                  // modifying that many documents, so we'll let it slide for                                                      // 1761
                  // now                                                                                                           // 1762
                  // XXX Minimongo.Matcher isn't up for the job, because we need                                                   // 1764
                  // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                                       // 1765
                  // like {$gt: 4} is not normally a complete selector.                                                            // 1766
                  // same issue as $elemMatch possibly?                                                                            // 1767
                  var matcher = new Minimongo.Matcher(arg); // 1768
                  out = toPull.filter(function (element) {
                    // 1770
                    return !matcher.documentMatches(element).result; // 1770
                  }); // 1770
                } else {
                  // 1771
                  out = toPull.filter(function (element) {
                    // 1772
                    return !LocalCollection._f._equal(element, arg); // 1772
                  }); // 1772
                } // 1773
                //
                target[field] = out; // 1775
              }, // 1776
              $pullAll: function (target, field, arg) {
                // 1777
                if (!((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', { // 1779
                    field: field // 1781
                  }); // 1781
                } // 1783
                //
                if (target === undefined) {
                  // 1785
                  return; // 1786
                } // 1787
                //
                var toPull = target[field]; // 1789
                //
                if (toPull === undefined) {
                  // 1791
                  return; // 1792
                } // 1793
                //
                if (!(toPull instanceof Array)) {
                  // 1795
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', { // 1796
                    field: field // 1798
                  }); // 1798
                } // 1800
                //
                target[field] = toPull.filter(function (object) {
                  // 1802
                  return !arg.some(function (element) {
                    // 1802
                    return LocalCollection._f._equal(object, element); // 1803
                  }); // 1803
                }); // 1802
              }, // 1805
              $rename: function (target, field, arg, keypath, doc) {
                // 1806
                // no idea why mongo has this restriction..                                                                        // 1807
                if (keypath === arg) {
                  // 1808
                  throw MinimongoError('$rename source must differ from target', { // 1809
                    field: field // 1809
                  }); // 1809
                } // 1810
                //
                if (target === null) {
                  // 1812
                  throw MinimongoError('$rename source field invalid', { // 1813
                    field: field // 1813
                  }); // 1813
                } // 1814
                //
                if (typeof arg !== 'string') {
                  // 1816
                  throw MinimongoError('$rename target must be a string', { // 1817
                    field: field // 1817
                  }); // 1817
                } // 1818
                //
                if (arg.includes('\0')) {
                  // 1820
                  // Null bytes are not allowed in Mongo field names                                                               // 1821
                  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                 // 1822
                  throw MinimongoError('The \'to\' field for $rename cannot contain an embedded null byte', { // 1823
                    field: field // 1825
                  }); // 1825
                } // 1827
                //
                if (target === undefined) {
                  // 1829
                  return; // 1830
                } // 1831
                //
                var object = target[field]; // 1833
                delete target[field]; // 1835
                var keyparts = arg.split('.'); // 1837
                var target2 = findModTarget(doc, keyparts, { // 1838
                  forbidArray: true // 1838
                }); // 1838
                //
                if (target2 === null) {
                  // 1840
                  throw MinimongoError('$rename target field invalid', { // 1841
                    field: field // 1841
                  }); // 1841
                } // 1842
                //
                target2[keyparts.pop()] = object; // 1844
              }, // 1845
              $bit: function (target, field, arg) {
                // 1846
                // XXX mongo only supports $bit on integers, and we only support                                                   // 1847
                // native javascript numbers (doubles) so far, so we can't support $bit                                            // 1848
                throw MinimongoError('$bit is not supported', { // 1849
                  field: field // 1849
                }); // 1849
              } // 1850
            }; // 1448
            var NO_CREATE_MODIFIERS = { // 1853
              $pop: true, // 1854
              $pull: true, // 1855
              $pullAll: true, // 1856
              $rename: true, // 1857
              $unset: true // 1858
            }; // Make sure field names do not contain Mongo restricted                                                            // 1853
            // characters ('.', '$', '\0').                                                                                        // 1862
            // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                       // 1863
            //
            var invalidCharMsg = { // 1864
              $: 'start with \'$\'', // 1865
              '.': 'contain \'.\'', // 1866
              '\0': 'contain null bytes' // 1867
            }; // checks if all field names in an object are valid                                                                 // 1864
            //
            function assertHasValidFieldNames(doc) {
              // 1871
              if (doc && (typeof doc === "undefined" ? "undefined" : (0, _typeof3.default)(doc)) === 'object') {
                // 1872
                JSON.stringify(doc, function (key, value) {
                  // 1873
                  assertIsValidFieldName(key); // 1874
                  return value; // 1875
                }); // 1876
              } // 1877
            } // 1878
            //
            function assertIsValidFieldName(key) {
              // 1880
              var match = void 0; // 1881
              //
              if (typeof key === 'string' && (match = key.match(/^\$|\.|\0/))) {
                // 1882
                throw MinimongoError("Key " + key + " must not " + invalidCharMsg[match[0]]); // 1883
              } // 1884
            } // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                               // 1885
            // and then you would operate on the 'e' property of the returned                                                      // 1888
            // object.                                                                                                             // 1889
            //                                                                                                                     // 1890
            // if options.noCreate is falsey, creates intermediate levels of                                                       // 1891
            // structure as necessary, like mkdir -p (and raises an exception if                                                   // 1892
            // that would mean giving a non-numeric property to an array.) if                                                      // 1893
            // options.noCreate is true, return undefined instead.                                                                 // 1894
            //                                                                                                                     // 1895
            // may modify the last element of keyparts to signal to the caller that it needs                                       // 1896
            // to use a different value to index into the returned object (for example,                                            // 1897
            // ['a', '01'] -> ['a', 1]).                                                                                           // 1898
            //                                                                                                                     // 1899
            // if forbidArray is true, return null if the keypath goes through an array.                                           // 1900
            //                                                                                                                     // 1901
            // if options.arrayIndices is set, use its first element for the (first) '$' in                                        // 1902
            // the path.                                                                                                           // 1903
            //
            //
            function findModTarget(doc, keyparts) {
              // 1904
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // 1904
              var usedArrayIndex = false; // 1905
              //
              for (var i = 0; i < keyparts.length; i++) {
                // 1907
                var last = i === keyparts.length - 1; // 1908
                var keypart = keyparts[i]; // 1909
                //
                if (!isIndexable(doc)) {
                  // 1911
                  if (options.noCreate) {
                    // 1912
                    return undefined; // 1913
                  } // 1914
                  //
                  var error = MinimongoError("cannot use the part '" + keypart + "' to traverse " + doc); // 1916
                  error.setPropertyError = true; // 1919
                  throw error; // 1920
                } // 1921
                //
                if (doc instanceof Array) {
                  // 1923
                  if (options.forbidArray) {
                    // 1924
                    return null; // 1925
                  } // 1926
                  //
                  if (keypart === '$') {
                    // 1928
                    if (usedArrayIndex) {
                      // 1929
                      throw MinimongoError('Too many positional (i.e. \'$\') elements'); // 1930
                    } // 1931
                    //
                    if (!options.arrayIndices || !options.arrayIndices.length) {
                      // 1933
                      throw MinimongoError('The positional operator did not find the match needed from the ' + 'query'); // 1934
                    } // 1938
                    //
                    keypart = options.arrayIndices[0]; // 1940
                    usedArrayIndex = true; // 1941
                  } else if (isNumericKey(keypart)) {
                    // 1942
                    keypart = parseInt(keypart); // 1943
                  } else {
                    // 1944
                    if (options.noCreate) {
                      // 1945
                      return undefined; // 1946
                    } // 1947
                    //
                    throw MinimongoError("can't append to array using string field name [" + keypart + "]"); // 1949
                  } // 1952
                  //
                  if (last) {
                    // 1954
                    keyparts[i] = keypart; // handle 'a.01'                                                                        // 1955
                  } // 1956
                  //
                  if (options.noCreate && keypart >= doc.length) {
                    // 1958
                    return undefined; // 1959
                  } // 1960
                  //
                  while (doc.length < keypart) {
                    // 1962
                    doc.push(null); // 1963
                  } // 1964
                  //
                  if (!last) {
                    // 1966
                    if (doc.length === keypart) {
                      // 1967
                      doc.push({}); // 1968
                    } else if ((0, _typeof3.default)(doc[keypart]) !== 'object') {
                      // 1969
                      throw MinimongoError("can't modify field '" + keyparts[i + 1] + "' of list value " + JSON.stringify(doc[keypart]));
                    } // 1974
                  } // 1975
                } else {
                  // 1976
                  assertIsValidFieldName(keypart); // 1977
                  //
                  if (!(keypart in doc)) {
                    // 1979
                    if (options.noCreate) {
                      // 1980
                      return undefined; // 1981
                    } // 1982
                    //
                    if (!last) {
                      // 1984
                      doc[keypart] = {}; // 1985
                    } // 1986
                  } // 1987
                } // 1988
                //
                if (last) {
                  // 1990
                  return doc; // 1991
                } // 1992
                //
                doc = doc[keypart]; // 1994
              } // notreached                                                                                                      // 1995
              //
            } // 1998
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "matcher.js": function (_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/matcher.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _classCallCheck2 = _require6("babel-runtime/helpers/classCallCheck"); //
            //
            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module5.export({ // 1
              "default": function () {
                // 1
                return Matcher; // 1
              } // 1
            }); // 1
            var LocalCollection = void 0; // 1
            _module5.watch(_require6("./local_collection.js"), { // 1
              "default": function (v) {
                // 1
                LocalCollection = v; // 1
              } // 1
            }, 0); // 1
            var compileDocumentSelector = void 0,
                // 1
            hasOwn = void 0,
                // 1
            nothingMatcher = void 0; // 1
            _module5.watch(_require6("./common.js"), { // 1
              compileDocumentSelector: function (v) {
                // 1
                compileDocumentSelector = v; // 1
              }, // 1
              hasOwn: function (v) {
                // 1
                hasOwn = v; // 1
              }, // 1
              nothingMatcher: function (v) {
                // 1
                nothingMatcher = v; // 1
              } // 1
            }, 1); // 1
            //
            var Matcher = function () {
              //
              function Matcher(selector, isUpdate) {
                // 29
                (0, _classCallCheck3.default)(this, Matcher); // 29
                // A set (object mapping string -> *) of all of the document paths looked                                          // 30
                // at by the selector. Also includes the empty string if it may look at any                                        // 31
                // path (eg, $where).                                                                                              // 32
                this._paths = {}; // Set to true if compilation finds a $near.                                                     // 33
                //
                this._hasGeoQuery = false; // Set to true if compilation finds a $where.                                           // 35
                //
                this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality                 // 37
                // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used                                       // 39
                // with scalars as operands.                                                                                       // 40
                //
                this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null                // 41
                // if such document is too hard to find.                                                                           // 43
                //
                this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user     // 44
                // passed in a function; otherwise is definitely an object (eg, IDs are                                            // 46
                // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                                            // 47
                // Sorter._useWithMatcher.                                                                                         // 48
                //
                this._selector = null; // 49
                this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation    // 50
                // Default is false                                                                                                // 52
                // Used for $near array update (issue #3599)                                                                       // 53
                //
                this._isUpdate = isUpdate; // 54
              } // 55
              //
              Matcher.prototype.documentMatches = function () {
                //
                function documentMatches(doc) {
                  //
                  if (doc !== Object(doc)) {
                    // 58
                    throw Error('documentMatches needs a document'); // 59
                  } // 60
                  //
                  return this._docMatcher(doc); // 62
                } // 63
                //
                return documentMatches; //
              }(); //
              //
              Matcher.prototype.hasGeoQuery = function () {
                //
                function hasGeoQuery() {
                  //
                  return this._hasGeoQuery; // 66
                } // 67
                //
                return hasGeoQuery; //
              }(); //
              //
              Matcher.prototype.hasWhere = function () {
                //
                function hasWhere() {
                  //
                  return this._hasWhere; // 70
                } // 71
                //
                return hasWhere; //
              }(); //
              //
              Matcher.prototype.isSimple = function () {
                //
                function isSimple() {
                  //
                  return this._isSimple; // 74
                } // 75
                //
                return isSimple; //
              }(); // Given a selector, return a function that takes one argument, a                                               //
              // document. It returns a result object.                                                                             // 78
              //
              //
              Matcher.prototype._compileSelector = function () {
                //
                function _compileSelector(selector) {
                  //
                  // you can pass a literal function instead of a selector                                                         // 80
                  if (selector instanceof Function) {
                    // 81
                    this._isSimple = false; // 82
                    this._selector = selector; // 83
                    //
                    this._recordPathUsed(''); // 84
                    //
                    return function (doc) {
                      // 86
                      return { // 86
                        result: !!selector.call(doc) // 86
                      }; // 86
                    }; // 86
                  } // shorthand -- scalar _id                                                                                     // 87
                  //
                  //
                  if (LocalCollection._selectorIsId(selector)) {
                    // 90
                    this._selector = { // 91
                      _id: selector // 91
                    }; // 91
                    //
                    this._recordPathUsed('_id'); // 92
                    //
                    return function (doc) {
                      // 94
                      return { // 94
                        result: EJSON.equals(doc._id, selector) // 94
                      }; // 94
                    }; // 94
                  } // protect against dangerous selectors.  falsey and {_id: falsey} are both                                     // 95
                  // likely programmer error, and not what you want, particularly for                                              // 98
                  // destructive operations.                                                                                       // 99
                  //
                  //
                  if (!selector || hasOwn.call(selector, '_id') && !selector._id) {
                    // 100
                    this._isSimple = false; // 101
                    return nothingMatcher; // 102
                  } // Top level can't be an array or true or binary.                                                              // 103
                  //
                  //
                  if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {
                    // 106
                    throw new Error("Invalid selector: " + selector); // 109
                  } // 110
                  //
                  this._selector = EJSON.clone(selector); // 112
                  return compileDocumentSelector(selector, this, { // 114
                    isRoot: true // 114
                  }); // 114
                } // 115
                //
                return _compileSelector; //
              }(); // Returns a list of key paths the given selector is looking for. It includes                                   //
              // the empty string if there is a $where.                                                                            // 118
              //
              //
              Matcher.prototype._getPaths = function () {
                //
                function _getPaths() {
                  //
                  return Object.keys(this._paths); // 120
                } // 121
                //
                return _getPaths; //
              }(); //
              //
              Matcher.prototype._recordPathUsed = function () {
                //
                function _recordPathUsed(path) {
                  //
                  this._paths[path] = true; // 124
                } // 125
                //
                return _recordPathUsed; //
              }(); //
              //
              return Matcher; //
            }(); //
            //
            // helpers used by compiled selector code                                                                              // 128
            LocalCollection._f = { // 129
              // XXX for _all and _in, consider building 'inquery' at compile time..                                               // 130
              _type: function (v) {
                // 131
                if (typeof v === 'number') {
                  // 132
                  return 1; // 133
                } // 134
                //
                if (typeof v === 'string') {
                  // 136
                  return 2; // 137
                } // 138
                //
                if (typeof v === 'boolean') {
                  // 140
                  return 8; // 141
                } // 142
                //
                if (Array.isArray(v)) {
                  // 144
                  return 4; // 145
                } // 146
                //
                if (v === null) {
                  // 148
                  return 10; // 149
                } // note that typeof(/x/) === "object"                                                                            // 150
                //
                //
                if (v instanceof RegExp) {
                  // 153
                  return 11; // 154
                } // 155
                //
                if (typeof v === 'function') {
                  // 157
                  return 13; // 158
                } // 159
                //
                if (v instanceof Date) {
                  // 161
                  return 9; // 162
                } // 163
                //
                if (EJSON.isBinary(v)) {
                  // 165
                  return 5; // 166
                } // 167
                //
                if (v instanceof MongoID.ObjectID) {
                  // 169
                  return 7; // 170
                } // object                                                                                                        // 171
                //
                //
                return 3; // XXX support some/all of these:                                                                        // 174
                // 14, symbol                                                                                                      // 177
                // 15, javascript code with scope                                                                                  // 178
                // 16, 18: 32-bit/64-bit integer                                                                                   // 179
                // 17, timestamp                                                                                                   // 180
                // 255, minkey                                                                                                     // 181
                // 127, maxkey                                                                                                     // 182
              }, // 183
              // deep equality test: use for literal document and array matches                                                    // 185
              _equal: function (a, b) {
                // 186
                return EJSON.equals(a, b, { // 187
                  keyOrderSensitive: true // 187
                }); // 187
              }, // 188
              // maps a type code to a value that can be used to sort values of different                                          // 190
              // types                                                                                                             // 191
              _typeorder: function (t) {
                // 192
                // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                                    // 193
                // XXX what is the correct sort position for Javascript code?                                                      // 194
                // ('100' in the matrix below)                                                                                     // 195
                // XXX minkey/maxkey                                                                                               // 196
                return [-1, // (not a type)                                                                                        // 197
                1, // number                                                                                                       // 199
                2, // string                                                                                                       // 200
                3, // object                                                                                                       // 201
                4, // array                                                                                                        // 202
                5, // binary                                                                                                       // 203
                -1, // deprecated                                                                                                  // 204
                6, // ObjectID                                                                                                     // 205
                7, // bool                                                                                                         // 206
                8, // Date                                                                                                         // 207
                0, // null                                                                                                         // 208
                9, // RegExp                                                                                                       // 209
                -1, // deprecated                                                                                                  // 210
                100, // JS code                                                                                                    // 211
                2, // deprecated (symbol)                                                                                          // 212
                100, // JS code                                                                                                    // 213
                1, // 32-bit int                                                                                                   // 214
                8, // Mongo timestamp                                                                                              // 215
                1 // 64-bit int                                                                                                    // 216
                ][t]; // 197
              }, // 218
              // compare two values of unknown type according to BSON ordering                                                     // 220
              // semantics. (as an extension, consider 'undefined' to be less than                                                 // 221
              // any other value.) return negative if a is less, positive if b is                                                  // 222
              // less, or 0 if equal                                                                                               // 223
              _cmp: function (a, b) {
                // 224
                if (a === undefined) {
                  // 225
                  return b === undefined ? 0 : -1; // 226
                } // 227
                //
                if (b === undefined) {
                  // 229
                  return 1; // 230
                } // 231
                //
                var ta = LocalCollection._f._type(a); // 233
                //
                var tb = LocalCollection._f._type(b); // 234
                //
                var oa = LocalCollection._f._typeorder(ta); // 236
                //
                var ob = LocalCollection._f._typeorder(tb); // 237
                //
                if (oa !== ob) {
                  // 239
                  return oa < ob ? -1 : 1; // 240
                } // XXX need to implement this if we implement Symbol or integers, or                                             // 241
                // Timestamp                                                                                                       // 244
                //
                //
                if (ta !== tb) {
                  // 245
                  throw Error('Missing type coercion logic in _cmp'); // 246
                } // 247
                //
                if (ta === 7) {
                  // 249
                  // ObjectID                                                                                                      // 249
                  // Convert to string.                                                                                            // 250
                  ta = tb = 2; // 251
                  a = a.toHexString(); // 252
                  b = b.toHexString(); // 253
                } // 254
                //
                if (ta === 9) {
                  // 256
                  // Date                                                                                                          // 256
                  // Convert to millis.                                                                                            // 257
                  ta = tb = 1; // 258
                  a = a.getTime(); // 259
                  b = b.getTime(); // 260
                } // 261
                //
                if (ta === 1) // double                                                                                            // 263
                  return a - b; // 264
                if (tb === 2) // string                                                                                            // 266
                  return a < b ? -1 : a === b ? 0 : 1; // 267
                //
                if (ta === 3) {
                  // 269
                  // Object                                                                                                        // 269
                  // this could be much more efficient in the expected case ...                                                    // 270
                  var toArray = function (object) {
                    // 271
                    var result = []; // 272
                    Object.keys(object).forEach(function (key) {
                      // 274
                      result.push(key, object[key]); // 275
                    }); // 276
                    return result; // 278
                  }; // 279
                  //
                  return LocalCollection._f._cmp(toArray(a), toArray(b)); // 281
                } // 282
                //
                if (ta === 4) {
                  // 284
                  // Array                                                                                                         // 284
                  for (var i = 0;; i++) {
                    // 285
                    if (i === a.length) {
                      // 286
                      return i === b.length ? 0 : -1; // 287
                    } // 288
                    //
                    if (i === b.length) {
                      // 290
                      return 1; // 291
                    } // 292
                    //
                    var s = LocalCollection._f._cmp(a[i], b[i]); // 294
                    //
                    if (s !== 0) {
                      // 295
                      return s; // 296
                    } // 297
                  } // 298
                } // 299
                //
                if (ta === 5) {
                  // 301
                  // binary                                                                                                        // 301
                  // Surprisingly, a small binary blob is always less than a large one in                                          // 302
                  // Mongo.                                                                                                        // 303
                  if (a.length !== b.length) {
                    // 304
                    return a.length - b.length; // 305
                  } // 306
                  //
                  for (var _i = 0; _i < a.length; _i++) {
                    // 308
                    if (a[_i] < b[_i]) {
                      // 309
                      return -1; // 310
                    } // 311
                    //
                    if (a[_i] > b[_i]) {
                      // 313
                      return 1; // 314
                    } // 315
                  } // 316
                  //
                  return 0; // 318
                } // 319
                //
                if (ta === 8) {
                  // 321
                  // boolean                                                                                                       // 321
                  if (a) {
                    // 322
                    return b ? 0 : 1; // 323
                  } // 324
                  //
                  return b ? -1 : 0; // 326
                } // 327
                //
                if (ta === 10) // null                                                                                             // 329
                  return 0; // 330
                if (ta === 11) // regexp                                                                                           // 332
                  throw Error('Sorting not supported on regular expression'); // XXX                                               // 333
                // 13: javascript code                                                                                             // 335
                // 14: symbol                                                                                                      // 336
                // 15: javascript code with scope                                                                                  // 337
                // 16: 32-bit integer                                                                                              // 338
                // 17: timestamp                                                                                                   // 339
                // 18: 64-bit integer                                                                                              // 340
                // 255: minkey                                                                                                     // 341
                // 127: maxkey                                                                                                     // 342
                //
                if (ta === 13) // javascript code                                                                                  // 343
                  throw Error('Sorting not supported on Javascript code'); // XXX                                                  // 344
                //
                throw Error('Unknown type to sort'); // 346
              } // 347
            }; // 129
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "minimongo_common.js": function (_require7, _exports7, _module6) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_common.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var LocalCollection_ = void 0; // 1
            _module6.watch(_require7("./local_collection.js"), { // 1
              "default": function (v) {
                // 1
                LocalCollection_ = v; // 1
              } // 1
            }, 0); // 1
            var Matcher = void 0; // 1
            _module6.watch(_require7("./matcher.js"), { // 1
              "default": function (v) {
                // 1
                Matcher = v; // 1
              } // 1
            }, 1); // 1
            var Sorter = void 0; // 1
            _module6.watch(_require7("./sorter.js"), { // 1
              "default": function (v) {
                // 1
                Sorter = v; // 1
              } // 1
            }, 2); // 1
            LocalCollection = LocalCollection_; // 5
            Minimongo = { // 6
              LocalCollection: LocalCollection_, // 7
              Matcher: Matcher, // 8
              Sorter: Sorter // 9
            }; // 6
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "observe_handle.js": function (_require8, _exports8, _module7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/observe_handle.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _classCallCheck2 = _require8("babel-runtime/helpers/classCallCheck"); //
            //
            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module7.export({ // 1
              "default": function () {
                // 1
                return ObserveHandle; // 1
              } // 1
            }); // 1
            //
            var ObserveHandle = function () {
              //
              function ObserveHandle() {
                //
                (0, _classCallCheck3.default)(this, ObserveHandle); //
              } //
              //
              return ObserveHandle; //
            }(); //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sorter.js": function (_require9, _exports9, _module8) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/sorter.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _typeof2 = _require9("babel-runtime/helpers/typeof"); //
            //
            var _typeof3 = _interopRequireDefault(_typeof2); //
            //
            var _classCallCheck2 = _require9("babel-runtime/helpers/classCallCheck"); //
            //
            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2); //
            //
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            } //
            //
            _module8.export({ // 1
              "default": function () {
                // 1
                return Sorter; // 1
              } // 1
            }); // 1
            var ELEMENT_OPERATORS = void 0,
                // 1
            equalityElementMatcher = void 0,
                // 1
            expandArraysInBranches = void 0,
                // 1
            hasOwn = void 0,
                // 1
            isOperatorObject = void 0,
                // 1
            makeLookupFunction = void 0,
                // 1
            regexpElementMatcher = void 0; // 1
            _module8.watch(_require9("./common.js"), { // 1
              ELEMENT_OPERATORS: function (v) {
                // 1
                ELEMENT_OPERATORS = v; // 1
              }, // 1
              equalityElementMatcher: function (v) {
                // 1
                equalityElementMatcher = v; // 1
              }, // 1
              expandArraysInBranches: function (v) {
                // 1
                expandArraysInBranches = v; // 1
              }, // 1
              hasOwn: function (v) {
                // 1
                hasOwn = v; // 1
              }, // 1
              isOperatorObject: function (v) {
                // 1
                isOperatorObject = v; // 1
              }, // 1
              makeLookupFunction: function (v) {
                // 1
                makeLookupFunction = v; // 1
              }, // 1
              regexpElementMatcher: function (v) {
                // 1
                regexpElementMatcher = v; // 1
              } // 1
            }, 0); // 1
            //
            var Sorter = function () {
              //
              function Sorter(spec) {
                // 25
                var _this = this; // 25
                //
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // 25
                (0, _classCallCheck3.default)(this, Sorter); // 25
                this._sortSpecParts = []; // 26
                this._sortFunction = null; // 27
                //
                var addSpecPart = function (path, ascending) {
                  // 29
                  if (!path) {
                    // 30
                    throw Error('sort keys must be non-empty'); // 31
                  } // 32
                  //
                  if (path.charAt(0) === '$') {
                    // 34
                    throw Error("unsupported sort key: " + path); // 35
                  } // 36
                  //
                  _this._sortSpecParts.push({ // 38
                    ascending: ascending, // 39
                    lookup: makeLookupFunction(path, { // 40
                      forSort: true // 40
                    }), // 40
                    path: path // 41
                  }); // 38
                }; // 43
                //
                if (spec instanceof Array) {
                  // 45
                  spec.forEach(function (element) {
                    // 46
                    if (typeof element === 'string') {
                      // 47
                      addSpecPart(element, true); // 48
                    } else {
                      // 49
                      addSpecPart(element[0], element[1] !== 'desc'); // 50
                    } // 51
                  }); // 52
                } else if ((typeof spec === "undefined" ? "undefined" : (0, _typeof3.default)(spec)) === 'object') {
                  // 53
                  Object.keys(spec).forEach(function (key) {
                    // 54
                    addSpecPart(key, spec[key] >= 0); // 55
                  }); // 56
                } else if (typeof spec === 'function') {
                  // 57
                  this._sortFunction = spec; // 58
                } else {
                  // 59
                  throw Error("Bad sort specification: " + JSON.stringify(spec)); // 60
                } // If a function is specified for sorting, we skip the rest.                                                     // 61
                //
                //
                if (this._sortFunction) {
                  // 64
                  return; // 65
                } // To implement affectedByModifier, we piggy-back on top of Matcher's                                            // 66
                // affectedByModifier code; we create a selector that is affected by the                                           // 69
                // same modifiers as this sort order. This is only implemented on the                                              // 70
                // server.                                                                                                         // 71
                //
                //
                if (this.affectedByModifier) {
                  // 72
                  var selector = {}; // 73
                  //
                  this._sortSpecParts.forEach(function (spec) {
                    // 75
                    selector[spec.path] = 1; // 76
                  }); // 77
                  //
                  this._selectorForAffectedByModifier = new Minimongo.Matcher(selector); // 79
                } // 80
                //
                this._keyComparator = composeComparators(this._sortSpecParts.map(function (spec, i) {
                  // 82
                  return _this._keyFieldComparator(i); // 83
                })); // If you specify a matcher for this Sorter, _keyFilter may be set to a                                       // 83
                // function which selects whether or not a given "sort key" (tuple of values                                       // 87
                // for the different sort spec fields) is compatible with the selector.                                            // 88
                //
                this._keyFilter = null; // 89
                //
                if (options.matcher) {
                  // 91
                  this._useWithMatcher(options.matcher); // 92
                } // 93
              } // 94
              //
              Sorter.prototype.getComparator = function () {
                //
                function getComparator(options) {
                  //
                  // If sort is specified or have no distances, just use the comparator from                                       // 97
                  // the source specification (which defaults to "everything is equal".                                            // 98
                  // issue #3599                                                                                                   // 99
                  // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation                                 // 100
                  // sort effectively overrides $near                                                                              // 101
                  if (this._sortSpecParts.length || !options || !options.distances) {
                    // 102
                    return this._getBaseComparator(); // 103
                  } // 104
                  //
                  var distances = options.distances; // Return a comparator which compares using $near distances.                  // 106
                  //
                  return function (a, b) {
                    // 109
                    if (!distances.has(a._id)) {
                      // 110
                      throw Error("Missing distance for " + a._id); // 111
                    } // 112
                    //
                    if (!distances.has(b._id)) {
                      // 114
                      throw Error("Missing distance for " + b._id); // 115
                    } // 116
                    //
                    return distances.get(a._id) - distances.get(b._id); // 118
                  }; // 119
                } // 120
                //
                return getComparator; //
              }(); // Takes in two keys: arrays whose lengths match the number of spec                                             //
              // parts. Returns negative, 0, or positive based on using the sort spec to                                           // 123
              // compare fields.                                                                                                   // 124
              //
              //
              Sorter.prototype._compareKeys = function () {
                //
                function _compareKeys(key1, key2) {
                  //
                  if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {
                    // 126
                    throw Error('Key has wrong length'); // 128
                  } // 129
                  //
                  return this._keyComparator(key1, key2); // 131
                } // 132
                //
                return _compareKeys; //
              }(); // Iterates over each possible "key" from doc (ie, over each branch), calling                                   //
              // 'cb' with the key.                                                                                                // 135
              //
              //
              Sorter.prototype._generateKeysFromDoc = function () {
                //
                function _generateKeysFromDoc(doc, cb) {
                  //
                  if (this._sortSpecParts.length === 0) {
                    // 137
                    throw new Error('can\'t generate keys without a spec'); // 138
                  } // 139
                  //
                  var pathFromIndices = function (indices) {
                    // 141
                    return indices.join(',') + ","; // 141
                  }; // 141
                  //
                  var knownPaths = null; // maps index -> ({'' -> value} or {path -> value})                                       // 143
                  //
                  var valuesByIndexAndPath = this._sortSpecParts.map(function (spec) {
                    // 146
                    // Expand any leaf arrays that we find, and ignore those arrays                                                // 147
                    // themselves.  (We never sort based on an array itself.)                                                      // 148
                    var branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),
                    // pretend we found one null value.                                                                            // 152
                    //
                    if (!branches.length) {
                      // 153
                      branches = [{ // 154
                        value: null // 154
                      }]; // 154
                    } // 155
                    //
                    var element = Object.create(null); // 157
                    var usedPaths = false; // 158
                    branches.forEach(function (branch) {
                      // 160
                      if (!branch.arrayIndices) {
                        // 161
                        // If there are no array indices for a branch, then it must be the                                         // 162
                        // only branch, because the only thing that produces multiple branches                                     // 163
                        // is the use of arrays.                                                                                   // 164
                        if (branches.length > 1) {
                          // 165
                          throw Error('multiple branches but no array used?'); // 166
                        } // 167
                        //
                        element[''] = branch.value; // 169
                        return; // 170
                      } // 171
                      //
                      usedPaths = true; // 173
                      var path = pathFromIndices(branch.arrayIndices); // 175
                      //
                      if (hasOwn.call(element, path)) {
                        // 177
                        throw Error("duplicate path: " + path); // 178
                      } // 179
                      //
                      element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the            // 181
                      // exact same arrays and we have to find the same paths.  This is                                            // 184
                      // roughly the same condition that makes MongoDB throw this strange                                          // 185
                      // error message.  eg, the main thing is that if sort spec is {a: 1,                                         // 186
                      // b:1} then a and b cannot both be arrays.                                                                  // 187
                      //                                                                                                           // 188
                      // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                                        // 189
                      // and 'a.x.y' are both arrays, but we don't allow this for now.                                             // 190
                      // #NestedArraySort                                                                                          // 191
                      // XXX achieve full compatibility here                                                                       // 192
                      //
                      if (knownPaths && !hasOwn.call(knownPaths, path)) {
                        // 193
                        throw Error('cannot index parallel arrays'); // 194
                      } // 195
                    }); // 196
                    //
                    if (knownPaths) {
                      // 198
                      // Similarly to above, paths must match everywhere, unless this is a                                         // 199
                      // non-array field.                                                                                          // 200
                      if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {
                        // 201
                        throw Error('cannot index parallel arrays!'); // 203
                      } // 204
                    } else if (usedPaths) {
                      // 205
                      knownPaths = {}; // 206
                      Object.keys(element).forEach(function (path) {
                        // 208
                        knownPaths[path] = true; // 209
                      }); // 210
                    } // 211
                    //
                    return element; // 213
                  }); // 214
                  //
                  if (!knownPaths) {
                    // 216
                    // Easy case: no use of arrays.                                                                                // 217
                    var soleKey = valuesByIndexAndPath.map(function (values) {
                      // 218
                      if (!hasOwn.call(values, '')) {
                        // 219
                        throw Error('no value in sole key case?'); // 220
                      } // 221
                      //
                      return values['']; // 223
                    }); // 224
                    cb(soleKey); // 226
                    return; // 228
                  } // 229
                  //
                  Object.keys(knownPaths).forEach(function (path) {
                    // 231
                    var key = valuesByIndexAndPath.map(function (values) {
                      // 232
                      if (hasOwn.call(values, '')) {
                        // 233
                        return values['']; // 234
                      } // 235
                      //
                      if (!hasOwn.call(values, path)) {
                        // 237
                        throw Error('missing path?'); // 238
                      } // 239
                      //
                      return values[path]; // 241
                    }); // 242
                    cb(key); // 244
                  }); // 245
                } // 246
                //
                return _generateKeysFromDoc; //
              }(); // Returns a comparator that represents the sort specification (but not                                         //
              // including a possible geoquery distance tie-breaker).                                                              // 249
              //
              //
              Sorter.prototype._getBaseComparator = function () {
                //
                function _getBaseComparator() {
                  //
                  var _this2 = this; // 250
                  //
                  if (this._sortFunction) {
                    // 251
                    return this._sortFunction; // 252
                  } // If we're only sorting on geoquery distance and no specs, just say                                           // 253
                  // everything is equal.                                                                                          // 256
                  //
                  //
                  if (!this._sortSpecParts.length) {
                    // 257
                    return function (doc1, doc2) {
                      // 258
                      return 0; // 258
                    }; // 258
                  } // 259
                  //
                  return function (doc1, doc2) {
                    // 261
                    var key1 = _this2._getMinKeyFromDoc(doc1); // 262
                    //
                    var key2 = _this2._getMinKeyFromDoc(doc2); // 263
                    //
                    return _this2._compareKeys(key1, key2); // 264
                  }; // 265
                } // 266
                //
                return _getBaseComparator; //
              }(); // Finds the minimum key from the doc, according to the sort specs.  (We say                                    //
              // "minimum" here but this is with respect to the sort spec, so "descending"                                         // 269
              // sort fields mean we're finding the max for that field.)                                                           // 270
              //                                                                                                                   // 271
              // Note that this is NOT "find the minimum value of the first field, the                                             // 272
              // minimum value of the second field, etc"... it's "choose the                                                       // 273
              // lexicographically minimum value of the key vector, allowing only keys which                                       // 274
              // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:                                         // 275
              // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                                       // 276
              // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                                 // 277
              //
              //
              Sorter.prototype._getMinKeyFromDoc = function () {
                //
                function _getMinKeyFromDoc(doc) {
                  //
                  var _this3 = this; // 278
                  //
                  var minKey = null; // 279
                  //
                  this._generateKeysFromDoc(doc, function (key) {
                    // 281
                    if (!_this3._keyCompatibleWithSelector(key)) {
                      // 282
                      return; // 283
                    } // 284
                    //
                    if (minKey === null) {
                      // 286
                      minKey = key; // 287
                      return; // 288
                    } // 289
                    //
                    if (_this3._compareKeys(key, minKey) < 0) {
                      // 291
                      minKey = key; // 292
                    } // 293
                  }); // This could happen if our key filter somehow filters out all the keys even                                 // 294
                  // though somehow the selector matches.                                                                          // 297
                  //
                  //
                  if (minKey === null) {
                    // 298
                    throw Error('sort selector found no keys in doc?'); // 299
                  } // 300
                  //
                  return minKey; // 302
                } // 303
                //
                return _getMinKeyFromDoc; //
              }(); //
              //
              Sorter.prototype._getPaths = function () {
                //
                function _getPaths() {
                  //
                  return this._sortSpecParts.map(function (part) {
                    // 306
                    return part.path; // 306
                  }); // 306
                } // 307
                //
                return _getPaths; //
              }(); //
              //
              Sorter.prototype._keyCompatibleWithSelector = function () {
                //
                function _keyCompatibleWithSelector(key) {
                  //
                  return !this._keyFilter || this._keyFilter(key); // 310
                } // 311
                //
                return _keyCompatibleWithSelector; //
              }(); // Given an index 'i', returns a comparator that compares two key arrays based                                  //
              // on field 'i'.                                                                                                     // 314
              //
              //
              Sorter.prototype._keyFieldComparator = function () {
                //
                function _keyFieldComparator(i) {
                  //
                  var invert = !this._sortSpecParts[i].ascending; // 316
                  return function (key1, key2) {
                    // 318
                    var compare = LocalCollection._f._cmp(key1[i], key2[i]); // 319
                    //
                    return invert ? -compare : compare; // 320
                  }; // 321
                } // 322
                //
                return _keyFieldComparator; //
              }(); // In MongoDB, if you have documents                                                                            //
              //    {_id: 'x', a: [1, 10]} and                                                                                     // 325
              //    {_id: 'y', a: [5, 15]},                                                                                        // 326
              // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                                               // 327
              // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                                            // 328
              // match the selector, and 5 comes before 10).                                                                       // 329
              //                                                                                                                   // 330
              // The way this works is pretty subtle!  For example, if the documents                                               // 331
              // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                                 // 332
              //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                                    // 333
              // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                                            // 334
              //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                                 // 335
              // both follow this rule (y before x).  (ie, you do have to apply this                                               // 336
              // through $elemMatch.)                                                                                              // 337
              //                                                                                                                   // 338
              // So if you pass a matcher to this sorter's constructor, we will attempt to                                         // 339
              // skip sort keys that don't match the selector. The logic here is pretty                                            // 340
              // subtle and undocumented; we've gotten as close as we can figure out based                                         // 341
              // on our understanding of Mongo's behavior.                                                                         // 342
              //
              //
              Sorter.prototype._useWithMatcher = function () {
                //
                function _useWithMatcher(matcher) {
                  //
                  var _this4 = this; // 343
                  //
                  if (this._keyFilter) {
                    // 344
                    throw Error('called _useWithMatcher twice?'); // 345
                  } // If we are only sorting by distance, then we're not going to bother to                                       // 346
                  // build a key filter.                                                                                           // 349
                  // XXX figure out how geoqueries interact with this stuff                                                        // 350
                  //
                  //
                  if (!this._sortSpecParts.length) {
                    // 351
                    return; // 352
                  } // 353
                  //
                  var selector = matcher._selector; // If the user just passed a literal function to find(), then we can't get a   // 355
                  // key filter from it.                                                                                           // 358
                  //
                  if (selector instanceof Function) {
                    // 359
                    return; // 360
                  } // 361
                  //
                  var constraintsByPath = {}; // 363
                  //
                  this._sortSpecParts.forEach(function (spec) {
                    // 365
                    constraintsByPath[spec.path] = []; // 366
                  }); // 367
                  //
                  Object.keys(selector).forEach(function (key) {
                    // 369
                    var subSelector = selector[key]; // XXX support $and and $or                                                   // 370
                    //
                    var constraints = constraintsByPath[key]; // 373
                    //
                    if (!constraints) {
                      // 374
                      return; // 375
                    } // XXX it looks like the real MongoDB implementation isn't "does the                                         // 376
                    // regexp match" but "does the value fall into a range named by the                                            // 379
                    // literal prefix of the regexp", ie "foo" in /^foo(bar|baz)+/  But                                            // 380
                    // "does the regexp match" is a good approximation.                                                            // 381
                    //
                    //
                    if (subSelector instanceof RegExp) {
                      // 382
                      // As far as we can tell, using either of the options that both we and                                       // 383
                      // MongoDB support ('i' and 'm') disables use of the key filter. This                                        // 384
                      // makes sense: MongoDB mostly appears to be calculating ranges of an                                        // 385
                      // index to use, which means it only cares about regexps that match                                          // 386
                      // one range (with a literal prefix), and both 'i' and 'm' prevent the                                       // 387
                      // literal prefix of the regexp from actually meaning one range.                                             // 388
                      if (subSelector.ignoreCase || subSelector.multiline) {
                        // 389
                        return; // 390
                      } // 391
                      //
                      constraints.push(regexpElementMatcher(subSelector)); // 393
                      return; // 394
                    } // 395
                    //
                    if (isOperatorObject(subSelector)) {
                      // 397
                      Object.keys(subSelector).forEach(function (operator) {
                        // 398
                        var operand = subSelector[operator]; // 399
                        //
                        if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {
                          // 401
                          // XXX this depends on us knowing that these operators don't use any                                     // 402
                          // of the arguments to compileElementSelector other than operand.                                        // 403
                          constraints.push(ELEMENT_OPERATORS[operator].compileElementSelector(operand)); // 404
                        } // See comments in the RegExp block above.                                                               // 407
                        //
                        //
                        if (operator === '$regex' && !subSelector.$options) {
                          // 410
                          constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector)); // 411
                        } // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                             // 417
                        //
                      }); // 420
                      return; // 422
                    } // OK, it's an equality thing.                                                                               // 423
                    //
                    //
                    constraints.push(equalityElementMatcher(subSelector)); // 426
                  }); // It appears that the first sort field is treated differently from the                                      // 427
                  // others; we shouldn't create a key filter unless the first sort field is                                       // 430
                  // restricted, though after that point we can restrict the other sort fields                                     // 431
                  // or not as we wish.                                                                                            // 432
                  //
                  if (!constraintsByPath[this._sortSpecParts[0].path].length) {
                    // 433
                    return; // 434
                  } // 435
                  //
                  this._keyFilter = function (key) {
                    // 437
                    return _this4._sortSpecParts.every(function (specPart, index) {
                      // 437
                      return constraintsByPath[specPart.path].every(function (fn) {
                        // 438
                        return fn(key[index]); // 439
                      }); // 439
                    }); // 438
                  }; // 437
                } // 442
                //
                return _useWithMatcher; //
              }(); //
              //
              return Sorter; //
            }(); //
            //
            // Given an array of comparators                                                                                       // 445
            // (functions (a,b)->(negative or positive or zero)), returns a single                                                 // 446
            // comparator which uses each comparator in order and returns the first                                                // 447
            // non-zero value.                                                                                                     // 448
            function composeComparators(comparatorArray) {
              // 449
              return function (a, b) {
                // 450
                for (var i = 0; i < comparatorArray.length; ++i) {
                  // 451
                  var compare = comparatorArray[i](a, b); // 452
                  //
                  if (compare !== 0) {
                    // 453
                    return compare; // 454
                  } // 455
                } // 456
                //
                return 0; // 458
              }; // 459
            } // 460
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  var _exports3 = _require3("./node_modules/meteor/minimongo/minimongo_client.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.minimongo = _exports3, {
    LocalCollection: LocalCollection,
    Minimongo: Minimongo,
    MinimongoTest: MinimongoTest,
    MinimongoError: MinimongoError
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var AllowDeny;

  var _require = meteorInstall({ "node_modules": { "meteor": { "allow-deny": { "allow-deny.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/allow-deny/allow-deny.js                                                                                  //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            ///                                                                                                                   // 1
            /// Remote methods and access control.                                                                                // 2
            ///                                                                                                                   // 3
            var hasOwn = Object.prototype.hasOwnProperty; // Restrict default mutators on collection. allow() and deny() take the
            // same options:                                                                                                      // 8
            //                                                                                                                    // 9
            // options.insert {Function(userId, doc)}                                                                             // 10
            //   return true to allow/deny adding this document                                                                   // 11
            //                                                                                                                    // 12
            // options.update {Function(userId, docs, fields, modifier)}                                                          // 13
            //   return true to allow/deny updating these documents.                                                              // 14
            //   `fields` is passed as an array of fields that are to be modified                                                 // 15
            //                                                                                                                    // 16
            // options.remove {Function(userId, docs)}                                                                            // 17
            //   return true to allow/deny removing these documents                                                               // 18
            //                                                                                                                    // 19
            // options.fetch {Array}                                                                                              // 20
            //   Fields to fetch for these validators. If any call to allow or deny                                               // 21
            //   does not have this option then all fields are loaded.                                                            // 22
            //                                                                                                                    // 23
            // allow and deny can be called multiple times. The validators are                                                    // 24
            // evaluated as follows:                                                                                              // 25
            // - If neither deny() nor allow() has been called on the collection,                                                 // 26
            //   then the request is allowed if and only if the "insecure" smart                                                  // 27
            //   package is in use.                                                                                               // 28
            // - Otherwise, if any deny() function returns true, the request is denied.                                           // 29
            // - Otherwise, if any allow() function returns true, the request is allowed.                                         // 30
            // - Otherwise, the request is denied.                                                                                // 31
            //                                                                                                                    // 32
            // Meteor may call your deny() and allow() functions in any order, and may not                                        // 33
            // call all of them if it is able to make a decision without calling them all                                         // 34
            // (so don't include side effects).                                                                                   // 35
            //
            AllowDeny = { // 37
              CollectionPrototype: {} // 38
            }; // In the `mongo` package, we will extend Mongo.Collection.prototype with these                                    // 37
            // methods                                                                                                            // 42
            //
            var CollectionPrototype = AllowDeny.CollectionPrototype; /**                                                          // 43
                                                                      * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
                                                                      * @locus Server                                             //
                                                                      * @method allow                                             //
                                                                      * @memberOf Mongo.Collection                                //
                                                                      * @instance                                                 //
                                                                      * @param {Object} options                                   //
                                                                      * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
                                                                      * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
                                                                      * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
                                                                      */ //
            //
            CollectionPrototype.allow = function (options) {
              // 56
              addValidator(this, 'allow', options); // 57
            }; /**                                                                                                                // 58
                * @summary Override `allow` rules.                                                                                //
                * @locus Server                                                                                                   //
                * @method deny                                                                                                    //
                * @memberOf Mongo.Collection                                                                                      //
                * @instance                                                                                                       //
                * @param {Object} options                                                                                         //
                * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
                * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
                * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
                */ //
            //
            CollectionPrototype.deny = function (options) {
              // 71
              addValidator(this, 'deny', options); // 72
            }; // 73
            //
            CollectionPrototype._defineMutationMethods = function (options) {
              // 75
              var self = this; // 76
              options = options || {}; // set to true once we call any allow or deny methods. If true, use                        // 77
              // allow/deny semantics. If false, use insecure mode semantics.                                                     // 80
              //
              self._restricted = false; // Insecure mode (default to allowing writes). Defaults to 'undefined' which              // 81
              // means insecure iff the insecure package is loaded. This property can be                                          // 84
              // overriden by tests or packages wishing to change insecure mode behavior of                                       // 85
              // their collections.                                                                                               // 86
              //
              self._insecure = undefined; // 87
              self._validators = { // 89
                insert: { // 90
                  allow: [], // 90
                  deny: [] // 90
                }, // 90
                update: { // 91
                  allow: [], // 91
                  deny: [] // 91
                }, // 91
                remove: { // 92
                  allow: [], // 92
                  deny: [] // 92
                }, // 92
                upsert: { // 93
                  allow: [], // 93
                  deny: [] // 93
                }, // 93
                // dummy arrays; can't set these!                                                                                 // 93
                fetch: [], // 94
                fetchAllFields: false // 95
              }; // 89
              if (!self._name) return; // anonymous collection                                                                    // 98
              // XXX Think about method namespacing. Maybe methods should be                                                      // 101
              // "Meteor:Mongo:insert/NAME"?                                                                                      // 102
              //
              self._prefix = '/' + self._name + '/'; // Mutation Methods                                                          // 103
              // Minimongo on the server gets no stubs; instead, by default                                                       // 106
              // it wait()s until its result is ready, yielding.                                                                  // 107
              // This matches the behavior of macromongo on the server better.                                                    // 108
              // XXX see #MeteorServerNull                                                                                        // 109
              //
              if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {
                // 110
                var m = {}; // 111
                ['insert', 'update', 'remove'].forEach(function (method) {
                  // 113
                  var methodName = self._prefix + method; // 114
                  //
                  if (options.useExisting) {
                    // 116
                    var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers'; // Do not try to create additional methods if this has already been called.
                    // (Otherwise the .methods() call below will throw an error.)                                                 // 119
                    //
                    if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
                  } // 122
                  //
                  m[methodName] = function () /* ... */{
                    // 124
                    // All the methods do their own validation, instead of using check().                                         // 125
                    check(arguments, [Match.Any]); // 126
                    var args = Array.from(arguments); // 127
                    //
                    try {
                      // 128
                      // For an insert, if the client didn't specify an _id, generate one                                         // 129
                      // now; because this uses DDP.randomStream, it will be consistent with                                      // 130
                      // what the client generated. We generate it now rather than later so                                       // 131
                      // that if (eg) an allow/deny rule does an insert to the same                                               // 132
                      // collection (not that it really should), the generated _id will                                           // 133
                      // still be the first use of the stream and will be consistent.                                             // 134
                      //                                                                                                          // 135
                      // However, we don't actually stick the _id onto the document yet,                                          // 136
                      // because we want allow/deny rules to be able to differentiate                                             // 137
                      // between arbitrary client-specified _id fields and merely                                                 // 138
                      // client-controlled-via-randomSeed fields.                                                                 // 139
                      var generatedId = null; // 140
                      //
                      if (method === "insert" && !hasOwn.call(args[0], '_id')) {
                        // 141
                        generatedId = self._makeNewID(); // 142
                      } // 143
                      //
                      if (this.isSimulation) {
                        // 145
                        // In a client simulation, you can do any mutation (even with a                                           // 146
                        // complex selector).                                                                                     // 147
                        if (generatedId !== null) args[0]._id = generatedId; // 148
                        return self._collection[method].apply(self._collection, args); // 150
                      } // This is the server receiving a method call from the client.                                            // 152
                      // We don't allow arbitrary selectors in mutations from the client: only                                    // 156
                      // single-ID selectors.                                                                                     // 157
                      //
                      //
                      if (method !== 'insert') throwIfSelectorIsNotId(args[0], method); // 158
                      //
                      if (self._restricted) {
                        // 161
                        // short circuit if there is no way it will pass.                                                         // 162
                        if (self._validators[method].allow.length === 0) {
                          // 163
                          throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
                        } // 167
                        //
                        var validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1); // 169
                        args.unshift(this.userId); // 171
                        method === 'insert' && args.push(generatedId); // 172
                        return self[validatedMethodName].apply(self, args); // 173
                      } else if (self._isInsecure()) {
                        // 174
                        if (generatedId !== null) args[0]._id = generatedId; // In insecure mode, allow any mutation (with a simple selector).
                        // XXX This is kind of bogus.  Instead of blindly passing whatever                                        // 178
                        //     we get from the network to this function, we should actually                                       // 179
                        //     know the correct arguments for the function and pass just                                          // 180
                        //     them.  For example, if you have an extraneous extra null                                           // 181
                        //     argument and this is Mongo on the server, the .wrapAsync'd                                         // 182
                        //     functions like update will get confused and pass the                                               // 183
                        //     "fut.resolver()" in the wrong slot, where _update will never                                       // 184
                        //     invoke it. Bam, broken DDP connection.  Probably should just                                       // 185
                        //     take this whole method and write it three times, invoking                                          // 186
                        //     helpers for the common code.                                                                       // 187
                        //
                        return self._collection[method].apply(self._collection, args); // 188
                      } else {
                        // 189
                        // In secure mode, if we haven't called allow or deny, then nothing                                       // 190
                        // is permitted.                                                                                          // 191
                        throw new Meteor.Error(403, "Access denied"); // 192
                      } // 193
                    } catch (e) {
                      // 194
                      if (e.name === 'MongoError' || e.name === 'MinimongoError') {
                        // 195
                        throw new Meteor.Error(409, e.toString()); // 196
                      } else {
                        // 197
                        throw e; // 198
                      } // 199
                    } // 200
                  }; // 201
                }); // 202
                //
                self._connection.methods(m); // 204
              } // 205
            }; // 206
            //
            CollectionPrototype._updateFetch = function (fields) {
              // 208
              var self = this; // 209
              //
              if (!self._validators.fetchAllFields) {
                // 211
                if (fields) {
                  // 212
                  var union = Object.create(null); // 213
                  //
                  var add = function (names) {
                    // 214
                    return names && names.forEach(function (name) {
                      // 214
                      return union[name] = 1; // 214
                    }); // 214
                  }; // 214
                  //
                  add(self._validators.fetch); // 215
                  add(fields); // 216
                  self._validators.fetch = Object.keys(union); // 217
                } else {
                  // 218
                  self._validators.fetchAllFields = true; // clear fetch just to make sure we don't accidentally read it          // 219
                  //
                  self._validators.fetch = null; // 221
                } // 222
              } // 223
            }; // 224
            //
            CollectionPrototype._isInsecure = function () {
              // 226
              var self = this; // 227
              if (self._insecure === undefined) return !!Package.insecure; // 228
              return self._insecure; // 230
            }; // 231
            //
            CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {
              // 233
              var self = this; // call user validators.                                                                           // 235
              // Any deny returns true means denied.                                                                              // 238
              //
              if (self._validators.insert.deny.some(function (validator) {
                // 239
                return validator(userId, docToValidate(validator, doc, generatedId)); // 240
              })) {
                // 241
                throw new Meteor.Error(403, "Access denied"); // 242
              } // Any allow returns true means proceed. Throw error if they all fail.                                            // 243
              //
              //
              if (self._validators.insert.allow.every(function (validator) {
                // 245
                return !validator(userId, docToValidate(validator, doc, generatedId)); // 246
              })) {
                // 247
                throw new Meteor.Error(403, "Access denied"); // 248
              } // If we generated an ID above, insert it now: after the validation, but                                          // 249
              // before actually inserting.                                                                                       // 252
              //
              //
              if (generatedId !== null) doc._id = generatedId; // 253
              //
              self._collection.insert.call(self._collection, doc); // 256
            }; // Simulate a mongo `update` operation while validating that the access                                            // 257
            // control rules set by calls to `allow/deny` are satisfied. If all                                                   // 260
            // pass, rewrite the mongo operation to use $in to set the list of                                                    // 261
            // document ids to change ##ValidatedChange                                                                           // 262
            //
            //
            CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {
              // 263
              var self = this; // 265
              check(mutator, Object); // 267
              options = Object.assign(Object.create(null), options); // 269
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID"); // We don't support upserts because they don't fit nicely into allow/deny
              // rules.                                                                                                           // 275
              //
              if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
              var noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'.";
              var mutatorKeys = Object.keys(mutator); // compute modified fields                                                  // 284
              //
              var modifiedFields = {}; // 287
              //
              if (mutatorKeys.length === 0) {
                // 289
                throw new Meteor.Error(403, noReplaceError); // 290
              } // 291
              //
              mutatorKeys.forEach(function (op) {
                // 292
                var params = mutator[op]; // 293
                //
                if (op.charAt(0) !== '$') {
                  // 294
                  throw new Meteor.Error(403, noReplaceError); // 295
                } else if (!hasOwn.call(ALLOWED_UPDATE_OPERATIONS, op)) {
                  // 296
                  throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection."); // 297
                } else {
                  // 299
                  Object.keys(params).forEach(function (field) {
                    // 300
                    // treat dotted fields as if they are replacing their                                                         // 301
                    // top-level part                                                                                             // 302
                    if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change
                    //
                    modifiedFields[field] = true; // 307
                  }); // 308
                } // 309
              }); // 310
              var fields = Object.keys(modifiedFields); // 312
              var findOptions = { // 314
                transform: null // 314
              }; // 314
              //
              if (!self._validators.fetchAllFields) {
                // 315
                findOptions.fields = {}; // 316
                //
                self._validators.fetch.forEach(function (fieldName) {
                  // 317
                  findOptions.fields[fieldName] = 1; // 318
                }); // 319
              } // 320
              //
              var doc = self._collection.findOne(selector, findOptions); // 322
              //
              if (!doc) // none satisfied!                                                                                        // 323
                return 0; // call user validators.                                                                                // 324
              // Any deny returns true means denied.                                                                              // 327
              //
              if (self._validators.update.deny.some(function (validator) {
                // 328
                var factoriedDoc = transformDoc(validator, doc); // 329
                return validator(userId, factoriedDoc, fields, mutator); // 330
              })) {
                // 334
                throw new Meteor.Error(403, "Access denied"); // 335
              } // Any allow returns true means proceed. Throw error if they all fail.                                            // 336
              //
              //
              if (self._validators.update.allow.every(function (validator) {
                // 338
                var factoriedDoc = transformDoc(validator, doc); // 339
                return !validator(userId, factoriedDoc, fields, mutator); // 340
              })) {
                // 344
                throw new Meteor.Error(403, "Access denied"); // 345
              } // 346
              //
              options._forbidReplace = true; // Back when we supported arbitrary client-provided selectors, we actually           // 348
              // rewrote the selector to include an _id clause before passing to Mongo to                                         // 351
              // avoid races, but since selector is guaranteed to already just be an ID, we                                       // 352
              // don't have to any more.                                                                                          // 353
              //
              return self._collection.update.call(self._collection, selector, mutator, options); // 355
            }; // Only allow these operations in validated updates. Specifically                                                  // 357
            // whitelist operations, rather than blacklist, so new complex                                                        // 360
            // operations that are added aren't automatically allowed. A complex                                                  // 361
            // operation is one that does more than just modify its target                                                        // 362
            // field. For now this contains all update operations except '$rename'.                                               // 363
            // http://docs.mongodb.org/manual/reference/operators/#update                                                         // 364
            //
            //
            var ALLOWED_UPDATE_OPERATIONS = { // 365
              $inc: 1, // 366
              $set: 1, // 366
              $unset: 1, // 366
              $addToSet: 1, // 366
              $pop: 1, // 366
              $pullAll: 1, // 366
              $pull: 1, // 366
              $pushAll: 1, // 367
              $push: 1, // 367
              $bit: 1 // 367
            }; // Simulate a mongo `remove` operation while validating access control                                             // 365
            // rules. See #ValidatedChange                                                                                        // 371
            //
            CollectionPrototype._validatedRemove = function (userId, selector) {
              // 372
              var self = this; // 373
              var findOptions = { // 375
                transform: null // 375
              }; // 375
              //
              if (!self._validators.fetchAllFields) {
                // 376
                findOptions.fields = {}; // 377
                //
                self._validators.fetch.forEach(function (fieldName) {
                  // 378
                  findOptions.fields[fieldName] = 1; // 379
                }); // 380
              } // 381
              //
              var doc = self._collection.findOne(selector, findOptions); // 383
              //
              if (!doc) return 0; // call user validators.                                                                        // 384
              // Any deny returns true means denied.                                                                              // 388
              //
              if (self._validators.remove.deny.some(function (validator) {
                // 389
                return validator(userId, transformDoc(validator, doc)); // 390
              })) {
                // 391
                throw new Meteor.Error(403, "Access denied"); // 392
              } // Any allow returns true means proceed. Throw error if they all fail.                                            // 393
              //
              //
              if (self._validators.remove.allow.every(function (validator) {
                // 395
                return !validator(userId, transformDoc(validator, doc)); // 396
              })) {
                // 397
                throw new Meteor.Error(403, "Access denied"); // 398
              } // Back when we supported arbitrary client-provided selectors, we actually                                        // 399
              // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to                                      // 402
              // Mongo to avoid races, but since selector is guaranteed to already just be                                        // 403
              // an ID, we don't have to any more.                                                                                // 404
              //
              //
              return self._collection.remove.call(self._collection, selector); // 406
            }; // 407
            //
            CollectionPrototype._callMutatorMethod = function () {
              // 409
              function _callMutatorMethod(name, args, callback) {
                // 409
                if (Meteor.isClient && !callback && !alreadyInSimulation()) {
                  // 410
                  // Client can't block, so it can't report errors by exception,                                                  // 411
                  // only by callback. If they forget the callback, give them a                                                   // 412
                  // default one that logs the error, so they aren't totally                                                      // 413
                  // baffled if their writes don't work because their database is                                                 // 414
                  // down.                                                                                                        // 415
                  // Don't give a default callback in simulation, because inside stubs we                                         // 416
                  // want to return the results from the local collection immediately and                                         // 417
                  // not force a callback.                                                                                        // 418
                  callback = function (err) {
                    // 419
                    if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack)); // 420
                  }; // 422
                } // For two out of three mutator methods, the first argument is a selector                                       // 423
                //
                //
                var firstArgIsSelector = name === "update" || name === "remove"; // 426
                //
                if (firstArgIsSelector && !alreadyInSimulation()) {
                  // 427
                  // If we're about to actually send an RPC, we should throw an error if                                          // 428
                  // this is a non-ID selector, because the mutation methods only allow                                           // 429
                  // single-ID selectors. (If we don't throw here, we'll see flicker.)                                            // 430
                  throwIfSelectorIsNotId(args[0], name); // 431
                } // 432
                //
                var mutatorMethodName = this._prefix + name; // 434
                return this._connection.apply(mutatorMethodName, args, { // 435
                  returnStubValue: true // 436
                }, callback); // 436
              } // 437
              //
              return _callMutatorMethod; // 409
            }(); // 409
            //
            function transformDoc(validator, doc) {
              // 439
              if (validator.transform) return validator.transform(doc); // 440
              return doc; // 442
            } // 443
            //
            function docToValidate(validator, doc, generatedId) {
              // 445
              var ret = doc; // 446
              //
              if (validator.transform) {
                // 447
                ret = EJSON.clone(doc); // If you set a server-side transform on your collection, then you don't get              // 448
                // to tell the difference between "client specified the ID" and "server                                           // 450
                // generated the ID", because transforms expect to get _id.  If you want to                                       // 451
                // do that check, you can do it with a specific                                                                   // 452
                // `C.allow({insert: f, transform: null})` validator.                                                             // 453
                //
                if (generatedId !== null) {
                  // 454
                  ret._id = generatedId; // 455
                } // 456
                //
                ret = validator.transform(ret); // 457
              } // 458
              //
              return ret; // 459
            } // 460
            //
            function addValidator(collection, allowOrDeny, options) {
              // 462
              // validate keys                                                                                                    // 463
              var validKeysRegEx = /^(?:insert|update|remove|fetch|transform)$/; // 464
              Object.keys(options).forEach(function (key) {
                // 465
                if (!validKeysRegEx.test(key)) throw new Error(allowOrDeny + ": Invalid key: " + key); // 466
              }); // 468
              collection._restricted = true; // 470
              ['insert', 'update', 'remove'].forEach(function (name) {
                // 472
                if (hasOwn.call(options, name)) {
                  // 473
                  if (!(options[name] instanceof Function)) {
                    // 474
                    throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function"); // 475
                  } // If the transform is specified at all (including as 'null') in this                                         // 476
                  // call, then take that; otherwise, take the transform from the                                                 // 479
                  // collection.                                                                                                  // 480
                  //
                  //
                  if (options.transform === undefined) {
                    // 481
                    options[name].transform = collection._transform; // already wrapped                                           // 482
                  } else {
                    // 483
                    options[name].transform = LocalCollection.wrapTransform(options.transform); // 484
                  } // 486
                  //
                  collection._validators[name][allowOrDeny].push(options[name]); // 488
                } // 489
              }); // Only update the fetch fields if we're passed things that affect                                              // 490
              // fetching. This way allow({}) and allow({insert: f}) don't result in                                              // 493
              // setting fetchAllFields                                                                                           // 494
              //
              if (options.update || options.remove || options.fetch) {
                // 495
                if (options.fetch && !(options.fetch instanceof Array)) {
                  // 496
                  throw new Error(allowOrDeny + ": Value for `fetch` must be an array"); // 497
                } // 498
                //
                collection._updateFetch(options.fetch); // 499
              } // 500
            } // 501
            //
            function throwIfSelectorIsNotId(selector, methodName) {
              // 503
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                // 504
                throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID."); // 505
              } // 508
            } // 509
            //
            ; // Determine if we are in a DDP method simulation                                                                   // 509
            //
            function alreadyInSimulation() {
              // 512
              var CurrentInvocation = DDP._CurrentMethodInvocation || // For backwards compatibility, as explained in this issue:
              // https://github.com/meteor/meteor/issues/8947                                                                     // 516
              DDP._CurrentInvocation; // 517
              var enclosing = CurrentInvocation.get(); // 519
              return enclosing && enclosing.isSimulation; // 520
            } // 521
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require("./node_modules/meteor/allow-deny/allow-deny.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package['allow-deny'] = {}, {
    AllowDeny: AllowDeny
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  Package['mongo-dev-server'] = {};
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var AllowDeny = Package['allow-deny'].AllowDeny;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var _ = Package.underscore._;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var DDP = Package['ddp-client'].DDP;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;
  var Symbol = Package['ecmascript-runtime-client'].Symbol;
  var Map = Package['ecmascript-runtime-client'].Map;
  var Set = Package['ecmascript-runtime-client'].Set;

  /* Package-scope variables */
  var LocalCollectionDriver, Mongo;

  var _require = meteorInstall({ "node_modules": { "meteor": { "mongo": { "local_collection_driver.js": function () {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                              //
            // packages/mongo/local_collection_driver.js                                                                    //
            //                                                                                                              //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            LocalCollectionDriver = function () {
              // 1
              var self = this; // 2
              self.noConnCollections = {}; // 3
            }; // 4
            //
            var ensureCollection = function (name, collections) {
              // 6
              if (!(name in collections)) collections[name] = new LocalCollection(name); // 7
              return collections[name]; // 9
            }; // 10
            //
            _.extend(LocalCollectionDriver.prototype, { // 12
              open: function (name, conn) {
                // 13
                var self = this; // 14
                if (!name) return new LocalCollection(); // 15
                //
                if (!conn) {
                  // 17
                  return ensureCollection(name, self.noConnCollections); // 18
                } // 19
                //
                if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {}; // XXX is there a way to keep track of a connection's collections without
                // dangling it off the connection object?                                                                   // 23
                //
                return ensureCollection(name, conn._mongo_livedata_collections); // 24
              } // 25
            }); // singleton                                                                                                // 12
            //
            //
            LocalCollectionDriver = new LocalCollectionDriver(); // 29
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "collection.js": function (_require2, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                              //
            // packages/mongo/collection.js                                                                                 //
            //                                                                                                              //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // options.connection, if given, is a LivedataClient or LivedataServer                                          // 1
            // XXX presently there is no way to destroy/clean up a Collection                                               // 2
            /**                                                                                                             // 4
             * @summary Namespace for MongoDB-related items                                                                 //
             * @namespace                                                                                                   //
             */Mongo = {}; /**                                                                                              //
                            * @summary Constructor for a Collection                                                         //
                            * @locus Anywhere                                                                               //
                            * @instancename collection                                                                      //
                            * @class                                                                                        //
                            * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
                            * @param {Object} [options]                                                                     //
                            * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
                            * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
                                                                                                                            //
                            - **`'STRING'`**: random strings                                                                //
                            - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                            //
                                                                                                                            //
                           The default id generation technique is `'STRING'`.                                               //
                            * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
                            * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
                            */ //
            //
            Mongo.Collection = function (name, options) {
              // 27
              var self = this; // 28
              if (!(self instanceof Mongo.Collection)) throw new Error('use "new" to construct a Mongo.Collection'); // 29
              //
              if (!name && name !== null) {
                // 32
                Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");
                //
                name = null; // 36
              } // 37
              //
              if (name !== null && typeof name !== "string") {
                // 39
                throw new Error("First argument to new Mongo.Collection must be a string or null"); // 40
              } // 42
              //
              if (options && options.methods) {
                // 44
                // Backwards compatibility hack with original signature (which passed                                       // 45
                // "connection" directly instead of in options. (Connections must have a "methods"                          // 46
                // method.)                                                                                                 // 47
                // XXX remove before 1.0                                                                                    // 48
                options = { // 49
                  connection: options // 49
                }; // 49
              } // Backwards compatibility: "connection" used to be called "manager".                                       // 50
              //
              //
              if (options && options.manager && !options.connection) {
                // 52
                options.connection = options.manager; // 53
              } // 54
              //
              options = _.extend({ // 55
                connection: undefined, // 56
                idGeneration: 'STRING', // 57
                transform: null, // 58
                _driver: undefined, // 59
                _preventAutopublish: false // 60
              }, options); // 55
              //
              switch (options.idGeneration) {// 63
                case 'MONGO':
                  // 64
                  self._makeNewID = function () {
                    // 65
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure; // 66
                    return new Mongo.ObjectID(src.hexString(24)); // 67
                  }; // 68
                  //
                  break; // 69
                //
                case 'STRING': // 70
                default:
                  // 71
                  self._makeNewID = function () {
                    // 72
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure; // 73
                    return src.id(); // 74
                  }; // 75
                  //
                  break; // 76
              } // 63
              //
              self._transform = LocalCollection.wrapTransform(options.transform); // 79
              if (!name || options.connection === null) // note: nameless collections never have a connection               // 81
                self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;
              //
              if (!options._driver) {
                // 91
                // XXX This check assumes that webapp is loaded so that Meteor.server !==                                   // 92
                // null. We should fully support the case of "want to use a Mongo-backed                                    // 93
                // collection from Node code without webapp", but we don't yet.                                             // 94
                // #MeteorServerNull                                                                                        // 95
                if (name && self._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
                  options._driver = MongoInternals.defaultRemoteCollectionDriver(); // 99
                } else {
                  // 100
                  options._driver = LocalCollectionDriver; // 101
                } // 102
              } // 103
              //
              self._collection = options._driver.open(name, self._connection); // 105
              self._name = name; // 106
              self._driver = options._driver; // 107
              //
              if (self._connection && self._connection.registerStore) {
                // 109
                // OK, we're going to be a slave, replicating some remote                                                   // 110
                // database, except possibly with some temporary divergence while                                           // 111
                // we have unacknowledged RPC's.                                                                            // 112
                var ok = self._connection.registerStore(name, { // 113
                  // Called at the beginning of a batch of updates. batchSize is the number                                 // 114
                  // of update calls to expect.                                                                             // 115
                  //                                                                                                        // 116
                  // XXX This interface is pretty janky. reset probably ought to go back to                                 // 117
                  // being its own function, and callers shouldn't have to calculate                                        // 118
                  // batchSize. The optimization of not calling pause/remove should be                                      // 119
                  // delayed until later: the first call to update() should buffer its                                      // 120
                  // message, and then we can either directly apply it at endUpdate time if                                 // 121
                  // it was the only update, or do pauseObservers/apply/apply at the next                                   // 122
                  // update() if there's another one.                                                                       // 123
                  beginUpdate: function (batchSize, reset) {
                    // 124
                    // pause observers so users don't see flicker when updating several                                     // 125
                    // objects at once (including the post-reconnect reset-and-reapply                                      // 126
                    // stage), and so that a re-sorting of a query can take advantage of the                                // 127
                    // full _diffQuery moved calculation instead of applying change one at a                                // 128
                    // time.                                                                                                // 129
                    if (batchSize > 1 || reset) self._collection.pauseObservers(); // 130
                    if (reset) self._collection.remove({}); // 133
                  }, // 135
                  // Apply an update.                                                                                       // 137
                  // XXX better specify this interface (not in terms of a wire message)?                                    // 138
                  update: function (msg) {
                    // 139
                    var mongoId = MongoID.idParse(msg.id); // 140
                    //
                    var doc = self._collection.findOne(mongoId); // Is this a "replace the whole doc" message coming from the quiescence
                    // of method writes to an object? (Note that 'undefined' is a valid                                     // 144
                    // value meaning "remove it".)                                                                          // 145
                    //
                    //
                    if (msg.msg === 'replace') {
                      // 146
                      var replace = msg.replace; // 147
                      //
                      if (!replace) {
                        // 148
                        if (doc) self._collection.remove(mongoId); // 149
                      } else if (!doc) {
                        // 151
                        self._collection.insert(replace); // 152
                      } else {
                        // 153
                        // XXX check that replace has no $ ops                                                              // 154
                        self._collection.update(mongoId, replace); // 155
                      } // 156
                      //
                      return; // 157
                    } else if (msg.msg === 'added') {
                      // 158
                      if (doc) {
                        // 159
                        throw new Error("Expected not to find a document already present for an add"); // 160
                      } // 161
                      //
                      self._collection.insert(_.extend({ // 162
                        _id: mongoId // 162
                      }, msg.fields)); // 162
                    } else if (msg.msg === 'removed') {
                      // 163
                      if (!doc) throw new Error("Expected to find a document already present for removed"); // 164
                      //
                      self._collection.remove(mongoId); // 166
                    } else if (msg.msg === 'changed') {
                      // 167
                      if (!doc) throw new Error("Expected to find a document to change"); // 168
                      //
                      if (!_.isEmpty(msg.fields)) {
                        // 170
                        var modifier = {}; // 171
                        //
                        _.each(msg.fields, function (value, key) {
                          // 172
                          if (value === undefined) {
                            // 173
                            if (!modifier.$unset) modifier.$unset = {}; // 174
                            modifier.$unset[key] = 1; // 176
                          } else {
                            // 177
                            if (!modifier.$set) modifier.$set = {}; // 178
                            modifier.$set[key] = value; // 180
                          } // 181
                        }); // 182
                        //
                        self._collection.update(mongoId, modifier); // 183
                      } // 184
                    } else {
                      // 185
                      throw new Error("I don't know how to deal with this message"); // 186
                    } // 187
                  }, // 189
                  // Called at the end of a batch of updates.                                                               // 191
                  endUpdate: function () {
                    // 192
                    self._collection.resumeObservers(); // 193
                  }, // 194
                  // Called around method stub invocations to capture the original versions                                 // 196
                  // of modified documents.                                                                                 // 197
                  saveOriginals: function () {
                    // 198
                    self._collection.saveOriginals(); // 199
                  }, // 200
                  retrieveOriginals: function () {
                    // 201
                    return self._collection.retrieveOriginals(); // 202
                  }, // 203
                  // Used to preserve current versions of documents across a store reset.                                   // 205
                  getDoc: function (id) {
                    // 206
                    return self.findOne(id); // 207
                  }, // 208
                  // To be able to get back to the collection from the store.                                               // 210
                  _getCollection: function () {
                    // 211
                    return self; // 212
                  } // 213
                }); // 113
                //
                if (!ok) {
                  // 216
                  var message = "There is already a collection named \"" + name + "\""; // 217
                  //
                  if (options._suppressSameNameError === true) {
                    // 218
                    // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined               // 219
                    // for this collection name, but this will simply be another reference to it and everything             // 220
                    // should work. However, we have historically thrown an error here, so for now we will                  // 221
                    // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in               // 222
                    // and give this some real world testing.                                                               // 223
                    console.warn ? console.warn(message) : console.log(message); // 224
                  } else {
                    // 225
                    throw new Error(message); // 226
                  } // 227
                } // 228
              } // XXX don't define these until allow or deny is actually used for this                                     // 229
              // collection. Could be hard if the security rules are only defined on the                                    // 232
              // server.                                                                                                    // 233
              //
              //
              if (options.defineMutationMethods !== false) {
                // 234
                try {
                  // 235
                  self._defineMutationMethods({ // 236
                    useExisting: options._suppressSameNameError === true // 236
                  }); // 236
                } catch (error) {
                  // 237
                  // Throw a more understandable error on the server for same collection name                               // 238
                  if (error.message === "A method named '/" + name + "/insert' is already defined") throw new Error("There is already a collection named \"" + name + "\"");
                  throw error; // 241
                } // 242
              } // autopublish                                                                                              // 243
              //
              //
              if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {
                // 246
                self._connection.publish(null, function () {
                  // 247
                  return self.find(); // 248
                }, { // 249
                  is_auto: true // 249
                }); // 249
              } // 250
            }; ///                                                                                                          // 251
            /// Main collection API                                                                                         // 254
            ///                                                                                                             // 255
            //
            //
            _.extend(Mongo.Collection.prototype, { // 258
              _getFindSelector: function (args) {
                // 260
                if (args.length == 0) return {};else return args[0]; // 261
              }, // 265
              _getFindOptions: function (args) {
                // 267
                var self = this; // 268
                //
                if (args.length < 2) {
                  // 269
                  return { // 270
                    transform: self._transform // 270
                  }; // 270
                } else {
                  // 271
                  check(args[1], Match.Optional(Match.ObjectIncluding({ // 272
                    fields: Match.Optional(Match.OneOf(Object, undefined)), // 273
                    sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)), // 274
                    limit: Match.Optional(Match.OneOf(Number, undefined)), // 275
                    skip: Match.Optional(Match.OneOf(Number, undefined)) // 276
                  }))); // 272
                  return _.extend({ // 279
                    transform: self._transform // 280
                  }, args[1]); // 279
                } // 282
              }, // 283
              /**                                                                                                           // 285
               * @summary Find the documents in a collection that match the selector.                                       //
               * @locus Anywhere                                                                                            //
               * @method find                                                                                               //
               * @memberOf Mongo.Collection                                                                                 //
               * @instance                                                                                                  //
               * @param {MongoSelector} [selector] A query describing the documents to find                                 //
               * @param {Object} [options]                                                                                  //
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                               //
               * @param {Number} options.skip Number of results to skip at the beginning                                    //
               * @param {Number} options.limit Maximum number of results to return                                          //
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                     //
               * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity         //
               * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
               * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).
               * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.
               * @param {Number} options.maxTimeMs (Server only) If set, instructs MongoDB to set a time limit for this cursor's operations. If the operation reaches the specified time limit (in milliseconds) without the having been completed, an exception will be thrown. Useful to prevent an (accidental or malicious) unoptimized query from causing a full collection scan that would disrupt other database users, at the expense of needing to handle the resulting error.
               * @param {String|Object} options.hint (Server only) Overrides MongoDB's default index selection and query optimization process. Specify an index to force its use, either by its name or index specification. You can also specify `{ $natural : 1 }` to force a forwards collection scan, or `{ $natural : -1 }` for a reverse collection scan. Setting this is only recommended for advanced users.
               * @returns {Mongo.Cursor}                                                                                    //
               */find: function () /* selector, options */{
                //
                // Collection.find() (return all docs) behaves differently                                                  // 307
                // from Collection.find(undefined) (return 0 docs).  so be                                                  // 308
                // careful about the length of arguments.                                                                   // 309
                var self = this; // 310
                //
                var argArray = _.toArray(arguments); // 311
                //
                return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray)); // 312
              }, // 314
              /**                                                                                                           // 316
               * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.
               * @locus Anywhere                                                                                            //
               * @method findOne                                                                                            //
               * @memberOf Mongo.Collection                                                                                 //
               * @instance                                                                                                  //
               * @param {MongoSelector} [selector] A query describing the documents to find                                 //
               * @param {Object} [options]                                                                                  //
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                               //
               * @param {Number} options.skip Number of results to skip at the beginning                                    //
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                     //
               * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity             //
               * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @returns {Object}                                                                                          //
               */findOne: function () /* selector, options */{
                //
                var self = this; // 332
                //
                var argArray = _.toArray(arguments); // 333
                //
                return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray)); // 334
              } // 336
            }); // 258
            //
            Mongo.Collection._publishCursor = function (cursor, sub, collection) {
              // 340
              var observeHandle = cursor.observeChanges({ // 341
                added: function (id, fields) {
                  // 342
                  sub.added(collection, id, fields); // 343
                }, // 344
                changed: function (id, fields) {
                  // 345
                  sub.changed(collection, id, fields); // 346
                }, // 347
                removed: function (id) {
                  // 348
                  sub.removed(collection, id); // 349
                } // 350
              }); // We don't call sub.ready() here: it gets called in livedata_server, after                               // 341
              // possibly calling _publishCursor on multiple returned cursors.                                              // 354
              // register stop callback (expects lambda w/ no args).                                                        // 356
              //
              sub.onStop(function () {
                // 357
                observeHandle.stop(); // 357
              }); // return the observeHandle in case it needs to be stopped early                                          // 357
              //
              return observeHandle; // 360
            }; // protect against dangerous selectors.  falsey and {_id: falsey} are both                                   // 361
            // likely programmer error, and not what you want, particularly for destructive                                 // 364
            // operations. If a falsey _id is sent in, a new string _id will be                                             // 365
            // generated and returned; if a fallbackId is provided, it will be returned                                     // 366
            // instead.                                                                                                     // 367
            //
            //
            Mongo.Collection._rewriteSelector = function (selector) {
              // 368
              var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                  // 368
              fallbackId = _ref.fallbackId; // 368
              //
              // shorthand -- scalars match _id                                                                             // 369
              if (LocalCollection._selectorIsId(selector)) selector = { // 370
                _id: selector // 371
              }; // 371
              //
              if (_.isArray(selector)) {
                // 373
                // This is consistent with the Mongo console itself; if we don't do this                                    // 374
                // check passing an empty array ends up selecting all items                                                 // 375
                throw new Error("Mongo selector can't be an array."); // 376
              } // 377
              //
              if (!selector || '_id' in selector && !selector._id) {
                // 379
                // can't match anything                                                                                     // 380
                return { // 381
                  _id: fallbackId || Random.id() // 381
                }; // 381
              } // 382
              //
              return selector; // 384
            }; // 'insert' immediately returns the inserted document's new _id.                                             // 385
            // The others return values immediately if you are in a stub, an in-memory                                      // 388
            // unmanaged collection, or a mongo-backed collection and you don't pass a                                      // 389
            // callback. 'update' and 'remove' return the number of affected                                                // 390
            // documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                  // 391
            // insert happened, 'insertedId'.                                                                               // 392
            //                                                                                                              // 393
            // Otherwise, the semantics are exactly like other methods: they take                                           // 394
            // a callback as an optional last argument; if no callback is                                                   // 395
            // provided, they block until the operation is complete, and throw an                                           // 396
            // exception if it fails; if a callback is provided, then they don't                                            // 397
            // necessarily block, and they call the callback when they finish with error and                                // 398
            // result arguments.  (The insert method provides the document ID as its result;                                // 399
            // update and remove provide the number of affected docs as the result; upsert                                  // 400
            // provides an object with numberAffected and maybe insertedId.)                                                // 401
            //                                                                                                              // 402
            // On the client, blocking is impossible, so if a callback                                                      // 403
            // isn't provided, they just return immediately and any error                                                   // 404
            // information is lost.                                                                                         // 405
            //                                                                                                              // 406
            // There's one more tweak. On the client, if you don't provide a                                                // 407
            // callback, then if there is an error, a message will be logged with                                           // 408
            // Meteor._debug.                                                                                               // 409
            //                                                                                                              // 410
            // The intent (though this is actually determined by the underlying                                             // 411
            // drivers) is that the operations should be done synchronously, not                                            // 412
            // generating their result until the database has acknowledged                                                  // 413
            // them. In the future maybe we should provide a flag to turn this                                              // 414
            // off.                                                                                                         // 415
            /**                                                                                                             // 417
             * @summary Insert a document in the collection.  Returns its unique _id.                                       //
             * @locus Anywhere                                                                                              //
             * @method  insert                                                                                              //
             * @memberOf Mongo.Collection                                                                                   //
             * @instance                                                                                                    //
             * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
             * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
             */ //
            //
            Mongo.Collection.prototype.insert = function () {
              // 426
              function insert(doc, callback) {
                // 426
                // Make sure we were passed a document to insert                                                            // 427
                if (!doc) {
                  // 428
                  throw new Error("insert requires an argument"); // 429
                } // Shallow-copy the document and possibly generate an ID                                                  // 430
                //
                //
                doc = _.extend({}, doc); // 433
                //
                if ('_id' in doc) {
                  // 435
                  if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {
                    // 436
                    throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs"); // 437
                  } // 438
                } else {
                  // 439
                  var generateId = true; // Don't generate the id if we're the client and the 'outermost' call              // 440
                  // This optimization saves us passing both the randomSeed and the id                                      // 443
                  // Passing both is redundant.                                                                             // 444
                  //
                  if (this._isRemoteCollection()) {
                    // 445
                    var enclosing = DDP._CurrentMethodInvocation.get(); // 446
                    //
                    if (!enclosing) {
                      // 447
                      generateId = false; // 448
                    } // 449
                  } // 450
                  //
                  if (generateId) {
                    // 452
                    doc._id = this._makeNewID(); // 453
                  } // 454
                } // On inserts, always return the id that we generated; on all other                                       // 455
                // operations, just return the result from the collection.                                                  // 458
                //
                //
                var chooseReturnValueFromCollectionResult = function (result) {
                  // 459
                  if (doc._id) {
                    // 460
                    return doc._id; // 461
                  } // XXX what is this for??                                                                               // 462
                  // It's some iteraction between the callback to _callMutatorMethod and                                    // 465
                  // the return value conversion                                                                            // 466
                  //
                  //
                  doc._id = result; // 467
                  return result; // 469
                }; // 470
                //
                var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult); // 472
                //
                if (this._isRemoteCollection()) {
                  // 474
                  var result = this._callMutatorMethod("insert", [doc], wrappedCallback); // 475
                  //
                  return chooseReturnValueFromCollectionResult(result); // 476
                } // it's my collection.  descend into the collection object                                                // 477
                // and propagate any exception.                                                                             // 480
                //
                //
                try {
                  // 481
                  // If the user provided a callback and the collection implements this                                     // 482
                  // operation asynchronously, then queryRet will be undefined, and the                                     // 483
                  // result will be returned through the callback instead.                                                  // 484
                  var _result = this._collection.insert(doc, wrappedCallback); // 485
                  //
                  return chooseReturnValueFromCollectionResult(_result); // 486
                } catch (e) {
                  // 487
                  if (callback) {
                    // 488
                    callback(e); // 489
                    return null; // 490
                  } // 491
                  //
                  throw e; // 492
                } // 493
              } // 494
              //
              return insert; // 426
            }(); /**                                                                                                        // 426
                  * @summary Modify one or more documents in the collection. Returns the number of matched documents.       //
                  * @locus Anywhere                                                                                         //
                  * @method update                                                                                          //
                  * @memberOf Mongo.Collection                                                                              //
                  * @instance                                                                                               //
                  * @param {MongoSelector} selector Specifies which documents to modify                                     //
                  * @param {MongoModifier} modifier Specifies how to modify the documents                                   //
                  * @param {Object} [options]                                                                               //
                  * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
                  * @param {Boolean} options.upsert True to insert a document if no matching documents are found.           //
                  * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
                  */ //
            //
            Mongo.Collection.prototype.update = function () {
              // 509
              function update(selector, modifier) {
                // 509
                for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                  optionsAndCallback[_key - 2] = arguments[_key]; // 509
                } // 509
                //
                var callback = popCallbackFromArgs(optionsAndCallback); // We've already popped off the callback, so we are left with an array
                // of one or zero items                                                                                     // 513
                //
                var options = _.clone(optionsAndCallback[0]) || {}; // 514
                var insertedId = void 0; // 515
                //
                if (options && options.upsert) {
                  // 516
                  // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                       // 517
                  if (options.insertedId) {
                    // 518
                    if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
                    insertedId = options.insertedId; // 521
                  } else if (!selector || !selector._id) {
                    // 522
                    insertedId = this._makeNewID(); // 523
                    options.generatedId = true; // 524
                    options.insertedId = insertedId; // 525
                  } // 526
                } // 527
                //
                selector = Mongo.Collection._rewriteSelector(selector, { // 529
                  fallbackId: insertedId // 530
                }); // 530
                var wrappedCallback = wrapCallback(callback); // 532
                //
                if (this._isRemoteCollection()) {
                  // 534
                  var args = [selector, modifier, options]; // 535
                  return this._callMutatorMethod("update", args, wrappedCallback); // 541
                } // it's my collection.  descend into the collection object                                                // 542
                // and propagate any exception.                                                                             // 545
                //
                //
                try {
                  // 546
                  // If the user provided a callback and the collection implements this                                     // 547
                  // operation asynchronously, then queryRet will be undefined, and the                                     // 548
                  // result will be returned through the callback instead.                                                  // 549
                  return this._collection.update(selector, modifier, options, wrappedCallback); // 550
                } catch (e) {
                  // 552
                  if (callback) {
                    // 553
                    callback(e); // 554
                    return null; // 555
                  } // 556
                  //
                  throw e; // 557
                } // 558
              } // 559
              //
              return update; // 509
            }(); /**                                                                                                        // 509
                  * @summary Remove documents from the collection                                                           //
                  * @locus Anywhere                                                                                         //
                  * @method remove                                                                                          //
                  * @memberOf Mongo.Collection                                                                              //
                  * @instance                                                                                               //
                  * @param {MongoSelector} selector Specifies which documents to remove                                     //
                  * @param {Function} [callback] Optional.  If present, called with an error object as its argument.        //
                  */ //
            //
            Mongo.Collection.prototype.remove = function () {
              // 570
              function remove(selector, callback) {
                // 570
                selector = Mongo.Collection._rewriteSelector(selector); // 571
                var wrappedCallback = wrapCallback(callback); // 573
                //
                if (this._isRemoteCollection()) {
                  // 575
                  return this._callMutatorMethod("remove", [selector], wrappedCallback); // 576
                } // it's my collection.  descend into the collection object                                                // 577
                // and propagate any exception.                                                                             // 580
                //
                //
                try {
                  // 581
                  // If the user provided a callback and the collection implements this                                     // 582
                  // operation asynchronously, then queryRet will be undefined, and the                                     // 583
                  // result will be returned through the callback instead.                                                  // 584
                  return this._collection.remove(selector, wrappedCallback); // 585
                } catch (e) {
                  // 586
                  if (callback) {
                    // 587
                    callback(e); // 588
                    return null; // 589
                  } // 590
                  //
                  throw e; // 591
                } // 592
              } // 593
              //
              return remove; // 570
            }(); // Determine if this collection is simply a minimongo representation of a real                             // 570
            // database on another server                                                                                   // 596
            //
            //
            Mongo.Collection.prototype._isRemoteCollection = function () {
              // 597
              function _isRemoteCollection() {
                // 597
                // XXX see #MeteorServerNull                                                                                // 598
                return this._connection && this._connection !== Meteor.server; // 599
              } // 600
              //
              return _isRemoteCollection; // 597
            }(); // Convert the callback to not return a result if there is an error                                        // 597
            //
            //
            function wrapCallback(callback, convertResult) {
              // 603
              if (!callback) {
                // 604
                return; // 605
              } // If no convert function was passed in, just use a "blank function"                                        // 606
              //
              //
              convertResult = convertResult || _.identity; // 609
              return function (error, result) {
                // 611
                callback(error, !error && convertResult(result)); // 612
              }; // 613
            } /**                                                                                                           // 614
               * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
               * @locus Anywhere                                                                                            //
               * @param {MongoSelector} selector Specifies which documents to modify                                        //
               * @param {MongoModifier} modifier Specifies how to modify the documents                                      //
               * @param {Object} [options]                                                                                  //
               * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
               */ //
            //
            Mongo.Collection.prototype.upsert = function () {
              // 625
              function upsert(selector, modifier, options, callback) {
                // 625
                if (!callback && typeof options === "function") {
                  // 627
                  callback = options; // 628
                  options = {}; // 629
                } // 630
                //
                var updateOptions = _.extend({}, options, { // 632
                  _returnObject: true, // 633
                  upsert: true // 634
                }); // 632
                //
                return this.update(selector, modifier, updateOptions, callback); // 637
              } // 638
              //
              return upsert; // 625
            }(); // We'll actually design an index API later. For now, we just pass through to                              // 625
            // Mongo's, but make it synchronous.                                                                            // 641
            //
            //
            Mongo.Collection.prototype._ensureIndex = function (index, options) {
              // 642
              var self = this; // 643
              if (!self._collection._ensureIndex) throw new Error("Can only call _ensureIndex on server collections"); // 644
              //
              self._collection._ensureIndex(index, options); // 646
            }; // 647
            //
            Mongo.Collection.prototype._dropIndex = function (index) {
              // 648
              var self = this; // 649
              if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections"); // 650
              //
              self._collection._dropIndex(index); // 652
            }; // 653
            //
            Mongo.Collection.prototype._dropCollection = function () {
              // 654
              var self = this; // 655
              if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");
              //
              self._collection.dropCollection(); // 658
            }; // 659
            //
            Mongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {
              // 660
              var self = this; // 661
              if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");
              //
              self._collection._createCappedCollection(byteSize, maxDocuments); // 664
            }; /**                                                                                                          // 665
                * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                * @locus Server                                                                                             //
                */ //
            //
            Mongo.Collection.prototype.rawCollection = function () {
              // 671
              var self = this; // 672
              //
              if (!self._collection.rawCollection) {
                // 673
                throw new Error("Can only call rawCollection on server collections"); // 674
              } // 675
              //
              return self._collection.rawCollection(); // 676
            }; /**                                                                                                          // 677
                * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
                * @locus Server                                                                                             //
                */ //
            //
            Mongo.Collection.prototype.rawDatabase = function () {
              // 683
              var self = this; // 684
              //
              if (!(self._driver.mongo && self._driver.mongo.db)) {
                // 685
                throw new Error("Can only call rawDatabase on server collections"); // 686
              } // 687
              //
              return self._driver.mongo.db; // 688
            }; /**                                                                                                          // 689
                * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
                * @locus Anywhere                                                                                           //
                * @class                                                                                                    //
                * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create    //
                */ //
            //
            Mongo.ObjectID = MongoID.ObjectID; /**                                                                          // 698
                                                * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.
                                                * @class                                                                    //
                                                * @instanceName cursor                                                      //
                                                */ //
            Mongo.Cursor = LocalCollection.Cursor; /**                                                                      // 705
                                                    * @deprecated in 0.9.1                                                  //
                                                    */ //
            Mongo.Collection.Cursor = Mongo.Cursor; /**                                                                     // 710
                                                     * @deprecated in 0.9.1                                                 //
                                                     */ //
            Mongo.Collection.ObjectID = Mongo.ObjectID; /**                                                                 // 715
                                                         * @deprecated in 0.9.1                                             //
                                                         */ //
            Meteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package                      // 720
            //
            _.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype); // 723
            //
            function popCallbackFromArgs(args) {
              // 725
              // Pull off any callback (or perhaps a 'callback' variable that was passed                                    // 726
              // in undefined, like how 'upsert' does it).                                                                  // 727
              if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {
                // 728
                return args.pop(); // 731
              } // 732
            } // 733
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });
  _require("./node_modules/meteor/mongo/local_collection_driver.js");
  _require("./node_modules/meteor/mongo/collection.js");

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.mongo = {}, {
    Mongo: Mongo
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var _ = Package.underscore._;

  /* Package-scope variables */
  var ClientVersions, Autoupdate;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                         //
    // packages/autoupdate/autoupdate_client.js                                                //
    //                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Subscribe to the `meteor_autoupdate_clientVersions` collection,                         // 1
    // which contains the set of acceptable client versions.                                   // 2
    //                                                                                         // 3
    // A "hard code push" occurs when the running client version is not in                     // 4
    // the set of acceptable client versions (or the server updates the                        // 5
    // collection, there is a published client version marked `current` and                    // 6
    // the running client version is no longer in the set).                                    // 7
    //                                                                                         // 8
    // When the `reload` package is loaded, a hard code push causes                            // 9
    // the browser to reload, so that it will load the latest client                           // 10
    // version from the server.                                                                // 11
    //                                                                                         // 12
    // A "soft code push" represents the situation when the running client                     // 13
    // version is in the set of acceptable versions, but there is a newer                      // 14
    // version available on the server.                                                        // 15
    //                                                                                         // 16
    // `Autoupdate.newClientAvailable` is a reactive data source which                         // 17
    // becomes `true` if there is a new version of the client is available on                  // 18
    // the server.                                                                             // 19
    //                                                                                         // 20
    // This package doesn't implement a soft code reload process itself,                       // 21
    // but `newClientAvailable` could be used for example to display a                         // 22
    // "click to reload" link to the user.                                                     // 23
    // 24
    // The client version of the client code currently running in the                          // 25
    // browser.                                                                                // 26
    var autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || "unknown"; // 27
    var autoupdateVersionRefreshable = // 28
    __meteor_runtime_config__.autoupdateVersionRefreshable || "unknown"; // 29
    // 30
    // The collection of acceptable client versions.                                           // 31
    ClientVersions = new Mongo.Collection("meteor_autoupdate_clientVersions"); // 32
    // 33
    Autoupdate = {}; // 34
    // 35
    Autoupdate.newClientAvailable = function () {
      // 36
      return !!ClientVersions.findOne({ // 37
        _id: "version", // 38
        version: { $ne: autoupdateVersion } }) || // 39
      !!ClientVersions.findOne({ // 40
        _id: "version-refreshable", // 41
        version: { $ne: autoupdateVersionRefreshable } }); // 42
    }; // 43
    Autoupdate._ClientVersions = ClientVersions; // Used by a self-test                       // 44
    // 45
    var knownToSupportCssOnLoad = false; // 46
    // 47
    var retry = new Retry({ // 48
      // Unlike the stream reconnect use of Retry, which we want to be instant                 // 49
      // in normal operation, this is a wacky failure. We don't want to retry                  // 50
      // right away, we can start slowly.                                                      // 51
      //                                                                                       // 52
      // A better way than timeconstants here might be to use the knowledge                    // 53
      // of when we reconnect to help trigger these retries. Typically, the                    // 54
      // server fixing code will result in a restart and reconnect, but                        // 55
      // potentially the subscription could have a transient error.                            // 56
      minCount: 0, // don't do any immediate retries                                           // 57
      baseTimeout: 30 * 1000 // start with 30s                                                   // 58
    }); // 59
    var failures = 0; // 60
    // 61
    Autoupdate._retrySubscription = function () {
      // 62
      Meteor.subscribe("meteor_autoupdate_clientVersions", { // 63
        onError: function (error) {
          // 64
          Meteor._debug("autoupdate subscription failed:", error); // 65
          failures++; // 66
          retry.retryLater(failures, function () {
            // 67
            // Just retry making the subscription, don't reload the whole                      // 68
            // page. While reloading would catch more cases (for example,                      // 69
            // the server went back a version and is now doing old-style hot                   // 70
            // code push), it would also be more prone to reload loops,                        // 71
            // which look really bad to the user. Just retrying the                            // 72
            // subscription over DDP means it is at least possible to fix by                   // 73
            // updating the server.                                                            // 74
            Autoupdate._retrySubscription(); // 75
          }); // 76
        }, // 77
        onReady: function () {
          // 78
          if (Package.reload) {
            // 79
            var checkNewVersionDocument = function (doc) {
              // 80
              var self = this; // 81
              if (doc._id === 'version-refreshable' && // 82
              doc.version !== autoupdateVersionRefreshable) {
                // 83
                autoupdateVersionRefreshable = doc.version; // 84
                // Switch out old css links for the new css links. Inspired by:                // 85
                // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710
                var newCss = doc.assets && doc.assets.allCss || []; // 87
                var oldLinks = []; // 88
                _.each(document.getElementsByTagName('link'), function (link) {
                  // 89
                  if (link.className === '__meteor-css__') {
                    // 90
                    oldLinks.push(link); // 91
                  } // 92
                }); // 93
                // 94
                var waitUntilCssLoads = function (link, callback) {
                  // 95
                  var executeCallback = _.once(callback); // 96
                  link.onload = function () {
                    // 97
                    knownToSupportCssOnLoad = true; // 98
                    executeCallback(); // 99
                  }; // 100
                  if (!knownToSupportCssOnLoad) {
                    // 101
                    var id = Meteor.setInterval(function () {
                      // 102
                      if (link.sheet) {
                        // 103
                        executeCallback(); // 104
                        Meteor.clearInterval(id); // 105
                      } // 106
                    }, 50); // 107
                  } // 108
                }; // 109
                // 110
                var removeOldLinks = _.after(newCss.length, function () {
                  // 111
                  _.each(oldLinks, function (oldLink) {
                    // 112
                    oldLink.parentNode.removeChild(oldLink); // 113
                  }); // 114
                }); // 115
                // 116
                var attachStylesheetLink = function (newLink) {
                  // 117
                  document.getElementsByTagName("head").item(0).appendChild(newLink); // 118
                  // 119
                  waitUntilCssLoads(newLink, function () {
                    // 120
                    Meteor.setTimeout(removeOldLinks, 200); // 121
                  }); // 122
                }; // 123
                // 124
                if (newCss.length !== 0) {
                  // 125
                  _.each(newCss, function (css) {
                    // 126
                    var newLink = document.createElement("link"); // 127
                    newLink.setAttribute("rel", "stylesheet"); // 128
                    newLink.setAttribute("type", "text/css"); // 129
                    newLink.setAttribute("class", "__meteor-css__"); // 130
                    newLink.setAttribute("href", css.url); // 131
                    attachStylesheetLink(newLink); // 132
                  }); // 133
                } else {
                  // 134
                  removeOldLinks(); // 135
                } // 136
                // 137
              } // 138
              else if (doc._id === 'version' && doc.version !== autoupdateVersion) {
                  // 139
                  handle && handle.stop(); // 140
                  // 141
                  if (Package.reload) {
                    // 142
                    Package.reload.Reload._reload(); // 143
                  } // 144
                } // 145
            }; // 146
            // 147
            var handle = ClientVersions.find().observe({ // 148
              added: checkNewVersionDocument, // 149
              changed: checkNewVersionDocument // 150
            }); // 151
          } // 152
        } // 153
      }); // 154
    }; // 155
    Autoupdate._retrySubscription(); // 156
    // 157
    /////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  if (typeof Package === 'undefined') Package = {};
  (function (pkg, symbols) {
    for (var s in symbols) s in pkg || (pkg[s] = symbols[s]);
  })(Package.autoupdate = {}, {
    Autoupdate: Autoupdate
  });
})();/* Imports for global scope */

Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
WebApp = Package.webapp.WebApp;
_ = Package.underscore._;
DDP = Package['ddp-client'].DDP;
Autoupdate = Package.autoupdate.Autoupdate;
Reload = Package.reload.Reload;// Disable hot-code-push
if (Package.reload) {
  Meteor._reload.onMigrate(function () {
    return [false];
  });
}
